protocol CLDAP with
Documentation
{
    ProtocolName = "Connectionless Lightweight Directory Access Protocol",
    ShortName = "CLDAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
    new Reference{Name = "RFC 1798"}
    ],
    RevisionSummary =
    [
    new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "3/30/2012"},
    ]
};

using Standard;
using ASN1;
using UDP;
using IANA;
using Utility;
using LDAP;

endpoint Server over UDP.Host issues CldapMessage accepts CldapMessage;
    
client endpoint Client connected to Server;

/* rfc 3352
 * The security of the Internet will not be impacted by the retirement of CLDAP.
 *  - Insufficient security capabilities:
 *       + no integrity protection,
 *       + no confidentiality protection
 */
autostart actor CldapOverUdp(UDP.Host host)
{
    process host accepts d:UDP.Datagram where (d.DestinationPort == Port.LDAP || d.SourcePort == Port.LDAP)
    {
        stream s = d.Payload;
        while (s.BytePosition < s.ByteLength)
        {
            switch (s)
            {
                case cldap:CldapMessage from Asn1BerDecoder<CldapMessage> =>
                if(cldap.ProtocolOp is LDAP.SearchRequest || cldap.ProtocolOp is LDAP.AbandonRequest)
                {
                    dispatch endpoint CLDAP.Server over host accepts cldap;
                }
                else
                {
                    dispatch endpoint CLDAP.Server over host issues cldap;
                }
                default =>
                ThrowDecodingException("CLDAP", "CldapMessage");
            }
        }
    }
}

// RFC 1798 defines message but reuse types in RFC2251
message CldapMessage
{
    LDAP.MessageID MessageID;
    CldapProtocolOperation ProtocolOp;
    
    override string ToString()
    {
        // add text here because they inherits basic types
        string backUpText = "";  
        switch(ProtocolOp)
        {                              
            case op:SearchResultReference =>
            {
                backUpText = "Search Result Reference";
            }
            case op:AbandonRequest =>
            {
                backUpText = "Abandon Request";
            }
        }        
        return ((backUpText == "" ? ProtocolOp.ToString() : backUpText) + ", MessageID:" + (MessageID as string));
    }
}

pattern CldapProtocolOperation = LDAP.SearchRequest | LDAP.SearchResultEntry | LDAP.SearchResultDone | LDAP.AbandonRequest;
