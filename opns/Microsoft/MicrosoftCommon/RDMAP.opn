protocol RDMAP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "A Remote Direct Memory Access Protocol",
    ShortName = "RDMAP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 5040"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "04/28/2012"}
        ]
};

using Standard;
using DDP;
using IANA;
using Utility;

annotation byte Msg#OpCode;

// Endpoints
endpoint Server 
    over DDP.Server
    accepts Msg issues Msg;

client endpoint Client connected to Server;

autostart actor RDMAPOverDDP(DDP.Server server)
{
    bool t; // "t": DDP.Segment.bufferModel is TagedBufferModel or UntagedBufferModel.
    byte version; // "version": RDMAP's version which is from DDP.Segment.RsvdULP.
    byte opCode; // "opCode": RDMAP's opCode which is to diff the header type of RDMAP.
    
    process server accepts s:DDP.Segment where s.Payload.Count > 0
    {
        t = CalculateTag(s);
        version = CalculateVersion(s);
        opCode =CalculateOpCode(s);
        
        RDMAPDecoder(t, version, opCode, s, true);
    }
    
    process server issues s:DDP.Segment where s.Payload.Count > 0
    {
        t = CalculateTag(s);
        version = CalculateVersion(s);
        opCode = CalculateOpCode(s);
        
        RDMAPDecoder(t, version, opCode, s, false);
    }
    
    bool CalculateTag(DDP.Segment s)
    {
        return (s.bufferModel is TagedBufferModel) ? (s.bufferModel as TagedBufferModel).T : (s.bufferModel as UntagedBufferModel).T;
    }
    
    byte CalculateVersion(DDP.Segment s)
    {
        return (s.bufferModel is TagedBufferModel) ? 
                        (((s.bufferModel as TagedBufferModel).RsvdULP & 0xC0) as byte)
                         : (((((s.bufferModel as UntagedBufferModel).RsvdULP >> 32) as byte) & 0xC0) as byte);
    }
    
    byte CalculateOpCode(DDP.Segment s)
    {
        return (s.bufferModel is TagedBufferModel) ?
                     (((s.bufferModel as TagedBufferModel).RsvdULP & 0x0F) as byte)
                      : (((((s.bufferModel as UntagedBufferModel).RsvdULP >> 32) as byte) & 0x0F) as byte);
    }
    
    void RDMAPDecoder(bool tagged, byte version, byte opCode, DDP.Segment s, bool isAccepted)
    {
        // Set embedded control flag to DDP message.
        var controlFlag = new ControlFlag { Version = version, Reserved = 0, OpCode = opCode};
        map<string, any> embedded = {"RDMA Control" -> (controlFlag as any)};
        s#Embedded = embedded;
        s.AppendExtendingSummary("[DDP Extended by RDMA] ");
                
        var m = BinaryDecoder<Msg[tagged, opCode]>(s.Payload);
        
        if (m != nothing)
        {
            Msg tm = m as Msg;
            tm#OpCode = opCode;
            if (isAccepted)
            {
                dispatch (endpoint Server over server) accepts tm;
            }
            else
            {
                dispatch (endpoint Server over server) issues tm;
            }
        }
        else
        {
            ThrowDecodingException("RDMAP", "Msg");
        }
    }
}

message Msg[bool T, byte OpCode]
{
    // header part
    optional [|OpCode == MessageTypeBasedOpCode.RDMAReadRequest|] ReadRequestHeader ReadRequestHeader;
    optional [|OpCode == MessageTypeBasedOpCode.Terminate|] TerminateHeader[T] TerminateHeader;
    
    // message part
    optional [|OpCode in {0, 2, 3, 4, 5, 6}|] binary ULPPayload;
    
    override string ToString()
    {
        switch (this#OpCode)
        {
           case MessageTypeBasedOpCode.RDMAWrite               => return "RDMA Write";
            case MessageTypeBasedOpCode.RDMAReadRequest         => return "RDMA Read Request";
            case MessageTypeBasedOpCode.RDMAReadResponse        => return "RDMA Read Response";
            case MessageTypeBasedOpCode.Send                    => return "RDMA Send";
            case MessageTypeBasedOpCode.SendWithInvalidate      => return "RDMA Send With Invalidate";
            case MessageTypeBasedOpCode.SendWithSE              => return "RDMA Send With SE";
            case MessageTypeBasedOpCode.SendWithSEAndInvalidate => return "RDMA Send With SE and Invalidate";
            case MessageTypeBasedOpCode.Terminate               => return "RDMA Terminate";
            default                                             => return "OpCode: Unknown (" + (this#OpCode as string) + ")";
        }
    }
}

pattern MessageTypeBasedOpCode = enum byte
{
    RDMAWrite = 0,
    RDMAReadRequest = 1,
    RDMAReadResponse = 2,
    Send = 3,
    SendWithInvalidate = 4,
    SendWithSE = 5,
    SendWithSEAndInvalidate = 6,
    Terminate = 7
};

/*    4.2.  RDMA Message Definitions
   -------+-----------+-------------------+-------------------------
   RDMA   | Message   | RDMA Header Used  | ULP Message allowed in
   Message| Type      |                   | the RDMA Message
   OpCode |           |                   |
          |           |                   |
   -------+-----------+-------------------+-------------------------
   0000b  | RDMA Write| None              | Yes
          |           |                   |
   -------+-----------+-------------------+-------------------------
   0001b  | RDMA Read | RDMA Read Request | No
          | Request   | Header            |
   -------+-----------+-------------------+-------------------------
   0010b  | RDMA Read | None              | Yes
          | Response  |                   |
   -------+-----------+-------------------+-------------------------
   0011b  | Send      | None              | Yes
          |           |                   |
   -------+-----------+-------------------+-------------------------
   0100b  | Send with | None              | Yes
          | Invalidate|                   |
   -------+-----------+-------------------+-------------------------
   0101b  | Send with | None              | Yes
          | SE        |                   |
   -------+-----------+-------------------+-------------------------
   0110b  | Send with | None              | Yes
          | SE and    |                   |
          | Invalidate|                   |
   -------+-----------+-------------------+-------------------------
   0111b  | Terminate | Terminate Header  | No
          |           |                   |
   -------+-----------+-------------------+-------------------------
   1000b  |           |
   to     | Reserved  |            Not Specified
   1111b  |           |
   -------+-----------+-------------------+-------------------------
*/

//4.4.  RDMA Read Request Header
type ReadRequestHeader
{
    uint SinkSTag; //Data Sink Steering Tag
    ulong SinkTO;  //Data Sink Tagged Offset
    uint RDMARDSZ; //RDMA Read Message Size.
    uint SrcSTag;  //Data Source Steering Tag
    ulong SrcTO;   //Data Source Tagged Offset
}

//4.8.  Terminate Header
type TerminateHeader[bool Taged]
{
    // Terminate Control: 19 bits
    LayerPattern Layer with BinaryEncoding{Width = 4};
    ErrorType EType with BinaryEncoding{Width = 4};
    ErrorCode ErrorCode with BinaryEncoding{Width = 8};
     // HdrCt: 3 bits. Header control bits
    bool M with BinaryEncoding{Width = 1}; // DDP Segment Length valid.
    bool D with BinaryEncoding{Width = 1}; // DDP Header Included.
    bool R with BinaryEncoding{Width = 1}; // RDMAP Header Included.

    uint Reserved with BinaryEncoding{Width = 13};
    
    optional [|(Layer == LayerPattern.DDP) && D|] ushort DDPSegmentLength;
    
    optional [|D|] ([|(EType != ErrorType.LocalCatastrophicError) && Taged|] DDP.TagedBufferModel 
        | [|(EType != ErrorType.LocalCatastrophicError) && !Taged|] DDP.UntagedBufferModel) TerminatedDDPHeader;
    
    optional [|R|] ReadRequestHeader TerminatedRDMAHeader;
}

pattern LayerPattern = enum byte
{
    RDMA = 0,
    DDP = 1,
    LLP = 2
};

pattern ErrorType = enum byte
{
    LocalCatastrophicError = 0,
    RemoteProtectionError  = 1,
    RemoteOperationError   = 2
};

pattern ErrorCode = enum byte
{
    InvalidSTag = 0x00,
    BaseOrBoundsViolation = 0x01,
    AccessRightsViolation = 0x02,
    STagNotAssociatedWithRdmapStream = 0x03,
    TOWrap = 0x04,
    InvalidRdmapVersion = 0x05,
    UnexpectedOpCode = 0x06,
    CatastrophicErrorLocalizedToRdmapStream = 0x07,
    CatastrophicErrorGlobal = 0x08,
    STagCannotBeInvalidated = 0x09,
    UnspecifiedError = 0xFF
};

type ControlFlag
{
    byte Version with BinaryEncoding{Width = 2};
    byte Reserved with BinaryEncoding{Width = 2};
    MessageTypeBasedOpCode OpCode with BinaryEncoding{Width = 4};
}
