protocol WSDiscovery with 
XmlEncodingDefaults{Namespace = WSDiscoveryNamespace},
Documentation
{
    ProtocolName = "Web Services Dynamic Discovery",
    ShortName = "WSDiscovery",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
           new Reference{Name = "WSDiscovery", Link = "http://specs.xmlsoap.org/ws/2005/04/discovery/ws-discovery.pdf"},
        ],
    RevisionSummary = 
        [
            new Revision{Class=RevisionClass.Major, Version="1.0.0", Date="09/02/2011"}
        ]
};

using IANA;
using Standard;
using Utility;
using SOAP;
using Technologies.WSDL;
using Technologies.SOAP;
using WSA2004;
using XSD;

endpoint Server 
    over SOAP.Server
    accepts ProbeMessage issues ProbeMessage
    accepts ResolveMessage issues ResolveMessage
    accepts HelloMessage issues HelloMessage
    accepts ByeMessage issues ByeMessage
    accepts ProbeMatchesMessage issues ProbeMatchesMessage
    accepts ResolveMatchesMessage issues ResolveMatchesMessage;
    
client endpoint Client connected to Server;

autostart actor WSDiscoveryOverSOAP(SOAP.Server node)
{
    //Hello message
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionHello && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:HelloMessage from XmlDecoder<HelloMessage> =>
                var enu = endpoint Server over node;
                dispatch enu accepts m;
            default =>
                ThrowDecodingException("WSDiscovery", "HelloMessage");
        }
    }
    
    process node issues soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionHello && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:HelloMessage from XmlDecoder<HelloMessage> =>
                var enu = endpoint Server over node;
                dispatch enu issues m;
            default =>
                ThrowDecodingException("WSDiscovery", "HelloMessage");
        }
    }
    
    //Bye message
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionBye && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ByeMessage from XmlDecoder<ByeMessage> =>
                var enu = endpoint Server over node;
                dispatch enu accepts m;
            default =>
                ThrowDecodingException("WSDiscovery", "ByeMessage");
        }
    }
    
    process node issues soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionBye && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ByeMessage from XmlDecoder<ByeMessage> =>
                var enu = endpoint Server over node;
                dispatch enu issues m;
            default =>
                ThrowDecodingException("WSDiscovery", "ByeMessage");
        }
    }
    
    //ProbeMatches message
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionProbeMatches && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ProbeMatchesMessage from XmlDecoder<ProbeMatchesMessage> =>
                var enu = endpoint Server over node;
                dispatch enu accepts m;
            default =>
                ThrowDecodingException("WSDiscovery", "ProbeMatchesMessage");
        }
    }
    
    process node issues soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionProbeMatches && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ProbeMatchesMessage from XmlDecoder<ProbeMatchesMessage> =>
                var enu = endpoint Server over node;
                dispatch enu issues m;
            default =>
                ThrowDecodingException("WSDiscovery", "ProbeMatchesMessage");
        }
    }
    
    //Probe message
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionProbe && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ProbeMessage from XmlDecoder<ProbeMessage> =>
                var enu = endpoint Server over node;
                dispatch enu accepts m;
            default =>
                ThrowDecodingException("WSDiscovery", "ProbeMessage");
        }
    }
    
    process node issues soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionProbe && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ProbeMessage from XmlDecoder<ProbeMessage> =>
                var enu = endpoint Server over node;
                dispatch enu issues m;
            default =>
                ThrowDecodingException("WSDiscovery", "ProbeMessage");
        }
    }
    
    //Resolve message
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionResolve && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ResolveMessage from XmlDecoder<ResolveMessage> =>
                var enu = endpoint Server over node;
                dispatch enu accepts m;
            default =>
                ThrowDecodingException("WSDiscovery", "ResolveMessage");
        }
    }
    
    process node issues soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionResolve && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ResolveMessage from XmlDecoder<ResolveMessage> =>
                var enu = endpoint Server over node;
                dispatch enu issues m;
            default =>
                ThrowDecodingException("WSDiscovery", "ResolveMessage");
        }
    }
    
    //ResolveMatches message
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionResolveMatches && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ResolveMatchesMessage from XmlDecoder<ResolveMatchesMessage> =>
                var enu = endpoint Server over node;
                dispatch enu accepts m;
            default =>
                ThrowDecodingException("WSDiscovery", "ResolveMatchesMessage");
        }
    }
    
    process node issues soap:SOAP.SoapMessage where soap.Action == WSDiscoveryActionResolveMatches && soap.Body != null
    {
        switch (soap.Body)
        {
            case m:ResolveMatchesMessage from XmlDecoder<ResolveMatchesMessage> =>
                var enu = endpoint Server over node;
                dispatch enu issues m;
            default =>
                ThrowDecodingException("WSDiscovery", "ResolveMatchesMessage");
        }
    }
}


message HelloMessage
{
    HelloType HelloMsg with XmlEncoding{Name = "Hello", Namespace = WSDiscoveryNamespace};
   
    override string ToString()
    {
        return "Hello";
    }
}

message ByeMessage
{
    ByeType ByeMsg with XmlEncoding{Name = "Bye", Namespace = WSDiscoveryNamespace};
    
    override string ToString()
    {
        return "Bye";
    }
}

message ProbeMessage
{
    ProbeType ProbeMsg with XmlEncoding{Name = "Probe", Namespace = WSDiscoveryNamespace};
    
    override string ToString()
    {
        return "Probe";
    }
}

message ProbeMatchesMessage
{
    ProbeMatchesType ProbeMatchesMsg with XmlEncoding{Name = "ProbeMatches", Namespace = WSDiscoveryNamespace};
    
    override string ToString()
    {
        return "ProbeMatches";
    }
}

message ResolveMessage
{
    ResolveType ResolveMsg with XmlEncoding{Name = "Resolve", Namespace = WSDiscoveryNamespace};
    
    override string ToString()
    {
        return "Resolve";
    }
}

message ResolveMatchesMessage
{
    ResolveMatchesType ResolveMatchesMsg with XmlEncoding{Name = "ResolveMatches", Namespace = WSDiscoveryNamespace};

    override string ToString()
    {
        return "ResolveMatches";
    }
}

//Complex types
type HelloType
{
    EndpointReferenceType EndpointReference with XmlEncoding{Name = "EndpointReference", Namespace = WSAddressing2004Namespace};
    optional QNameListType Types with XmlEncoding{Name = "Types",Namespace = WSDiscoveryNamespace};
    optional ScopesType Scopes with XmlEncoding{Name = "Scopes",Namespace = WSDiscoveryNamespace};
    optional XAddrsType XAddrs with XmlEncoding{Name = "XAddrs",Namespace = WSDiscoveryNamespace};
    MetadataVersionType MetadataVersion with XmlEncoding{Name = "MetadataVersion",Namespace = WSDiscoveryNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ByeType
{
    EndpointReferenceType EndpointReference with XmlEncoding{Name = "EndpointReference", Namespace = WSAddressing2004Namespace};
    optional QNameListType Types with XmlEncoding{Name = "Types",Namespace = WSDiscoveryNamespace};
    optional ScopesType Scopes with XmlEncoding{Name = "Scopes",Namespace = WSDiscoveryNamespace};
    optional XAddrsType XAddrs with XmlEncoding{Name = "XAddrs",Namespace = WSDiscoveryNamespace};
    optional MetadataVersionType MetadataVersion with XmlEncoding{Name = "MetadataVersion",Namespace = WSDiscoveryNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ProbeType
{
    optional QNameListType Types with XmlEncoding{Name = "Types",Namespace = WSDiscoveryNamespace};
    optional ScopesType Scopes with XmlEncoding{Name = "Scopes",Namespace = WSDiscoveryNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ProbeMatchesType
{
    array<ProbeMatchType> ProbeMatches with XmlEncoding{Name = "ProbeMatch", Namespace = WSDiscoveryNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ProbeMatchType
{
    EndpointReferenceType EndpointReference with XmlEncoding{Name = "EndpointReference", Namespace = WSAddressing2004Namespace};
    optional QNameListType Types with XmlEncoding{Name = "Types",Namespace = WSDiscoveryNamespace};
    optional ScopesType Scopes with XmlEncoding{Name = "Scopes",Namespace = WSDiscoveryNamespace};
    optional XAddrsType XAddrs with XmlEncoding{Name = "XAddrs",Namespace = WSDiscoveryNamespace};
    MetadataVersionType MetadataVersion with XmlEncoding{Name = "MetadataVersion",Namespace = WSDiscoveryNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}with XmlEncoding{AnonymousType = true};

type ResolveType
{
    EndpointReferenceType EndpointReference with XmlEncoding{Name = "EndpointReference", Namespace = WSAddressing2004Namespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ResolveMatchesType
{
    optional ResolveMatchType ResolveMatch with XmlEncoding{Name = "ResolveMatch", Namespace = WSDiscoveryNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}

type ResolveMatchType
{
    EndpointReferenceType EndpointReference with XmlEncoding{Name = "EndpointReference", Namespace = WSAddressing2004Namespace};
    optional QNameListType Types with XmlEncoding{Name = "Types",Namespace = WSDiscoveryNamespace};
    optional ScopesType Scopes with XmlEncoding{Name = "Scopes",Namespace = WSDiscoveryNamespace};
    XAddrsType XAddrs with XmlEncoding{Name = "XAddrs",Namespace = WSDiscoveryNamespace};
    MetadataVersionType MetadataVersion with XmlEncoding{Name = "MetadataVersion",Namespace = WSDiscoveryNamespace};
    optional array<xml> AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
}with XmlEncoding{AnonymousType = true};

//Simple types
type QNameListType
{
    XSQName QName with XmlEncoding{Kind = XmlKind.Text};
}

type ScopesType
{
    optional XSAnyURI MatchBy with XmlEncoding{Kind = XmlKind.Attribute, Namespace = ""};
    XSAnyURI UriList with XmlEncoding{Kind = XmlKind.Text};
    optional array<xml> AnyAttribute with XmlEncoding{IsAny = true, Kind = XmlKind.Attribute, Namespace = XmlNamespaceIndicator.Other};
};

type XAddrsType
{
    XSAnyURI AnyURL with XmlEncoding{Kind = XmlKind.Text};
}

type MetadataVersionType
{
    uint Version with XmlEncoding{Kind = XmlKind.Text};
}


const string WSDiscoveryNamespace = "http://schemas.xmlsoap.org/ws/2005/04/discovery";
const string WSDiscoveryActionHello = WSDiscoveryNamespace + "/Hello";
const string WSDiscoveryActionBye = WSDiscoveryNamespace + "/Bye";
const string WSDiscoveryActionProbeMatches = WSDiscoveryNamespace + "/ProbeMatches";
const string WSDiscoveryActionProbe = WSDiscoveryNamespace + "/Probe";
const string WSDiscoveryActionResolveMatches = WSDiscoveryNamespace + "/ResolveMatches";
const string WSDiscoveryActionResolve =  WSDiscoveryNamespace + "/Resolve";
const string WSDiscoveryActionFault = WSDiscoveryNamespace + "/fault";
