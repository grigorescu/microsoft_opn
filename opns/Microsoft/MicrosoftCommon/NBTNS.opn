protocol NBTNS with
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation 
{ 
    ProtocolName = "NetBIOS Name Service Protocol", 
    ShortName = "NBTNS", 
    Description = "" 
}, 
OPNAuthoring 
{ 
    Copyright = "(c) Microsoft Corporation", 
    References = 
        [
            new Reference{Name = "RFC 1002"},
            new Reference{Name = "RFC 883"},
        ], 
    RevisionSummary = 
        [ 
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ] 
};

using Standard;
using IANA;
using UDP;
using TCP;
using IPv4;
using Utility;
using VirtualTransport;
using CommonResources;

endpoint Server over UDP.Host| over VirtualTransport.Server accepts NameService issues NameService
{
    observe this accepts m:NameService
    {
        QuestionSection question = null;
        ResourceRecord additionalResourceRecord = null;
        ResourceRecord authorityResourceRecord = null;
        ResourceRecord answerResourceRecord = null;
        if(m.Questions.Count > 0)
        {
            question = m.Questions[0];
        }
        if(m.AdditionalResourceRecord.Count > 0)
        {
            additionalResourceRecord = m.AdditionalResourceRecord[0];
        }
        if(m.AuthorityResourceRecord.Count > 0)
        {
            authorityResourceRecord = m.AuthorityResourceRecord[0];
        }
        if(m.AnswerResourceRecord.Count > 0)
        {
            answerResourceRecord = m.AnswerResourceRecord[0];
        }
        
        // 4.2.2.  NAME REGISTRATION REQUEST
        // 4.2.3.  NAME OVERWRITE REQUEST & DEMAND
        // 4.2.4.  NAME REFRESH REQUEST
        if(!m.Header.Flags.R && (m.Header.Flags.Opcode == 5 || m.Header.Flags.Opcode == 9))
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckValue(m.Header.AdditionalResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", 1, m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 32, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0020", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
            if(additionalResourceRecord != null)
            {
                ValidationCheckValue(additionalResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Type", "NameService", "0x0020", additionalResourceRecord.Type);
                ValidationCheckValue(additionalResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Class", "NameService", "0x0001", additionalResourceRecord.Class);
                ValidationCheckValue(additionalResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].RDLength", "NameService", 6, additionalResourceRecord.RDLength);
            }
        }
        
        // 4.2.5.  POSITIVE NAME REGISTRATION RESPONSE
        // 4.2.6.  NEGATIVE NAME REGISTRATION RESPONSE
        // 4.2.7.  END-NODE CHALLENGE REGISTRATION RESPONSE
        // 4.2.8.  NAME CONFLICT DEMAND
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 5)
        {
            ErrorCodeIf(m.Header.Flags.Rcode != 0, m, DiagnosisLevel.Warning, "NBTNS: The Rcode of the message is "+ RcodeToString(m.Header.Flags.Rcode) + "(" + m.Header.Flags.Rcode.ToString() + "). Please refer to " + RcodeToString(m.Header.Flags.Rcode) + " in Technical Document RFC 1002.");
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
                ValidationCheckValue(answerResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].RDLength", "NameService", 6, answerResourceRecord.RDLength);
            }
            if(m.Header.Flags.Rcode == 7)
            {
                if(answerResourceRecord != null)
                {
                    var data = answerResourceRecord.RData as NetBIOSGeneralNameServiceResourceRecord; 
                    if (data != null && data.AddrEnty.Count > 0) 
                    {
                        ValidationCheckZero(data.AddrEnty[0].NBAddress.Octets == $[0000], m, true, ReferenceType.Type, "NBTNS", "AddrEnty[0].NBAddress", "NetBIOSGeneralNameServiceResourceRecord", data.AddrEnty[0].NBAddress.Octets); 
                    }
                }
            }
        }
        
        // 4.2.9.  NAME RELEASE REQUEST & DEMAND
        if(!m.Header.Flags.R && m.Header.Flags.Opcode == 6)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckValue(m.Header.AdditionalResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", 1, m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 32, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0020", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
            if(additionalResourceRecord != null)
            {
                ValidationCheckValue(additionalResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Type", "NameService", "0x0020", additionalResourceRecord.Type);
                ValidationCheckValue(additionalResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Class", "NameService", "0x0001", additionalResourceRecord.Class);
                ValidationCheckValue(additionalResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].RDLength", "NameService", 6, additionalResourceRecord.RDLength);
            }
        }
        
        // 4.2.10.  POSITIVE NAME RELEASE RESPONSE
        // 4.2.11.  NEGATIVE NAME RELEASE RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 6)
        {
            ErrorCodeIf(m.Header.Flags.Rcode != 0, m, DiagnosisLevel.Warning, "NBTNS: The Rcode of the message is "+ RcodeToString(m.Header.Flags.Rcode) + "(" + m.Header.Flags.Rcode.ToString() + "). Please refer to " + RcodeToString(m.Header.Flags.Rcode) + " in Technical Document RFC 1002.");
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
                ValidationCheckValue(answerResourceRecord.RDLength == 6, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].RDLength", "NameService", 6, answerResourceRecord.RDLength);
            }
        }
        
        // 4.2.12.  NAME QUERY REQUEST
        if(!m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.RD)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 32, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0020", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
        }
        
        // 4.2.13.  POSITIVE NAME QUERY RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode == 0 && m.Header.Flags.AA && m.Header.Flags.RD)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
            }
        }
        
        // 4.2.14.  NEGATIVE NAME QUERY RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode != 0 && m.Header.Flags.AA )
        {
            ErrorCodeIf(m.Header.Flags.Rcode != 0, m, DiagnosisLevel.Warning, "NBTNS: The Rcode of the message is "+ RcodeToString(m.Header.Flags.Rcode) + "(" + m.Header.Flags.Rcode.ToString() + "). Please refer to " + RcodeToString(m.Header.Flags.Rcode) + " in Technical Document RFC 1002.");
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            var data = m.NegativeNameQueryResponse as ResourceRecord;
            ValidationCheckValue(data.Type == 10, m, true, ReferenceType.Type, "NBTNS", "Type", "ResourceRecord", "0x000A", data.Type);
            ValidationCheckValue(data.Class == 1, m, true, ReferenceType.Type, "NBTNS", "Class", "ResourceRecord", "0x0001", data.Class);
        }
        
        // 4.2.15.  REDIRECT NAME QUERY RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode != 0 && !m.Header.Flags.AA)
        {
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckValue(m.Header.AuthorityResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", 1, m.Header.AuthorityResourceRecordCount);
            ValidationCheckValue(m.Header.AdditionalResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", 1, m.Header.AuthorityResourceRecordCount);
            if(authorityResourceRecord != null)
            {
                ValidationCheckValue(authorityResourceRecord.Type == 2, m, true, ReferenceType.Message, "NBTNS", "AuthorityResourceRecord[0].Type", "NameService", "0x0002", authorityResourceRecord.Type);
                ValidationCheckValue(authorityResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AuthorityResourceRecord[0].Class", "NameService", "0x0001", authorityResourceRecord.Class);
            }
            if(additionalResourceRecord != null)
            {
                ValidationCheckValue(additionalResourceRecord.Type == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Type", "NameService", "0x0001", additionalResourceRecord.Type);
                ValidationCheckValue(additionalResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].Class", "NameService", "0x0001", additionalResourceRecord.Class);
                ValidationCheckValue(additionalResourceRecord.RDLength == 4, m, true, ReferenceType.Message, "NBTNS", "AdditionalResourceRecord[0].RDLength", "NameService", "0x0004", additionalResourceRecord.RDLength);
            }
        }
        
        // 4.2.16.  WAIT FOR ACKNOWLEDGEMENT (WACK) RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 7)
        {
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 32, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0020", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
                ValidationCheckValue(answerResourceRecord.RDLength == 2, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].RDLength", "NameService", "0x0002",  answerResourceRecord.RDLength);
            }
        }
        
        // 4.2.17.  NODE STATUS REQUEST
        if(m.Header.Flags.R == false && m.Header.Flags.Opcode == 0 && !m.Header.Flags.RD)
        {
            ValidationCheck(m.Header.Flags.Rcode == 0, m, DiagnosisLevel.Error, "NBTNS: The Rcode bit of the Header.Flags field in message NameService must be set to zero, not " + RcodeToString(m.Header.Flags.Rcode));
            ValidationCheckValue(m.Header.QuestionCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", 1, m.Header.QuestionCount);
            ValidationCheckZero(m.Header.AnswerResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(question != null)
            {
                ValidationCheckValue(question.QuestionType == 33, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionType", "NameService", "0x0021", question.QuestionType);
                ValidationCheckValue(question.QuestionClass == 1, m, true, ReferenceType.Message, "NBTNS", "Questions[0].QuestionClass", "NameService", "0x0001", question.QuestionClass);
            }
        }
        
        // 4.2.18.  NODE STATUS RESPONSE
        if(m.Header.Flags.R && m.Header.Flags.Opcode == 0 && m.Header.Flags.Rcode == 0 && m.Header.Flags.AA && !m.Header.Flags.RD)
        {         
            ValidationCheckZero(m.Header.QuestionCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.QuestionCount", "NameService", m.Header.QuestionCount);
            ValidationCheckValue(m.Header.AnswerResourceRecordCount == 1, m, true, ReferenceType.Message, "NBTNS", "Header.AnswerResourceRecordCount", "NameService", 1, m.Header.AnswerResourceRecordCount);
            ValidationCheckZero(m.Header.AuthorityResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AuthorityResourceRecordCount", "NameService", m.Header.AuthorityResourceRecordCount);
            ValidationCheckZero(m.Header.AdditionalResourceRecordCount == 0, m, true, ReferenceType.Message, "NBTNS", "Header.AdditionalResourceRecordCount", "NameService", m.Header.AdditionalResourceRecordCount);
            if(answerResourceRecord != null)
            {
                ValidationCheckValue(answerResourceRecord.Type == 33, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Type", "NameService", "0x0021", answerResourceRecord.Type);
                ValidationCheckValue(answerResourceRecord.Class == 1, m, true, ReferenceType.Message, "NBTNS", "AnswerResourceRecord[0].Class", "NameService", "0x0001", answerResourceRecord.Class);
            }
        }
    }
};

client endpoint Client connected to Server;

autostart actor NBTNSOverUDP(UDP.Host host)
{
    process host accepts d:UDP.Datagram{DestinationPort is Port.NBTNS}
    {
        switch (d.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                NbtNameToSring(ref m);
                dispatch (endpoint NBTNS.Server) accepts m;
            default =>
                ThrowDecodingException("NBTNS", "NameService");
        }
    }
    
    process host accepts d:UDP.Datagram{SourcePort is Port.NBTNS}
    {
        switch (d.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                NbtNameToSring(ref m);
                dispatch (endpoint NBTNS.Server) issues m;
            default =>
                ThrowDecodingException("NBTNS", "NameService");
        }
    }
}

autostart actor NBTNSOverTCP(VirtualTransport.Server server)
{
    process server accepts d:VirtualTransport.VirtualDataSegment{DestinationPort is Port.NBTNS}
    {
        switch (d.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                NbtNameToSring(ref m);
                dispatch (endpoint NBTNS.Server over server) accepts m;
            default =>
                ThrowDecodingExceptionForTCP("NBTNS", "NameService", d#IsIncomplete, d#SegmentLost);
        }
    }
    
    process server issues d:VirtualTransport.VirtualDataSegment{SourcePort is Port.NBTNS}
    {
        switch (d.Payload)
        {
            case m:NameService from BinaryDecoder<NameService> =>
                NbtNameToSring(ref m);
                dispatch (endpoint NBTNS.Server over server) issues m;
            default =>
                ThrowDecodingExceptionForTCP("NBTNS", "NameService", d#IsIncomplete, d#SegmentLost);
        }
    }
}

message NameService
{
    Header Header;

    array<QuestionSection> Questions with BinaryEncoding{Length = Header.QuestionCount as uint};
    array<ResourceRecord> AnswerResourceRecord with BinaryEncoding{Length = Header.AnswerResourceRecordCount as uint};
    array<ResourceRecord> AuthorityResourceRecord with BinaryEncoding{Length = Header.AuthorityResourceRecordCount as uint};
    array<ResourceRecord> AdditionalResourceRecord with BinaryEncoding{Length = Header.AdditionalResourceRecordCount as uint};
    // Future Reference: check 4.2.14  NEGATIVE NAME QUERY RESPONSE
    optional [|Header.Flags.R == true && Header.QuestionCount == 0 && Header.AnswerResourceRecordCount == 0 && Header.AuthorityResourceRecordCount == 0 && Header.AdditionalResourceRecordCount == 0|] ResourceRecord NegativeNameQueryResponse;
    
    override string ToString()
    {
        string summary = "";
        if (Header.Flags.R == true)
        {
            summary = OperationCodeToSting(Header.Flags.Opcode) + " Response, Rcode: " + RcodeToString(Header.Flags.Rcode);
            foreach(ResourceRecord arr in AnswerResourceRecord)
            {
                if (arr.RRName is NbtString)
                {
                    summary += ", RRName: " + (arr.RRName as NbtString).GetName();
                }
                if (arr.Type == ResourceRecordType.NB && arr.RDLength >= 6)
                {
                    summary += ", NBAddress: [" + arr.GetNBAddrString() + "]";
                }
            }
        }
        else if (Header.Flags.R == false)
        {
            if (Header.QuestionCount != 0)
            {
                summary += OperationCodeToSting(Header.Flags.Opcode) + " Request, QuestionName: ";
                foreach(QuestionSection qs in Questions)
                {
                    summary += qs.QuestionName.GetName();
                }
            }
            foreach(ResourceRecord rr in AdditionalResourceRecord)
            {
                if (rr.Type == ResourceRecordType.NB && rr.RDLength >= 6)
                {
                    summary += ", NBAddress: [" + rr.GetNBAddrString() + "]";
                }
            }
        }
        return summary;
    }
}

type Header
{
    ushort NameTransactionID;
    Flags Flags;
    ushort QuestionCount;
    ushort AnswerResourceRecordCount;
    ushort AuthorityResourceRecordCount;
    ushort AdditionalResourceRecordCount; 
}

type Flags
{
    bool R with BinaryEncoding{Width = 1};
    OperationCode Opcode where ValidationCheckEnumValue(InRange<OperationCode>(value), null, false, ReferenceType.Type, "NBTNS", "Opcode", "Flags", COMMON_STR_ZERO + ", 5, 6, 7, 8", value) with BinaryEncoding{Width = 4};
    bool AA with BinaryEncoding{Width = 1};
    bool TC with BinaryEncoding{Width = 1};
    bool RD with BinaryEncoding{Width = 1};
    bool RA with BinaryEncoding{Width = 1};
    byte Reserved with BinaryEncoding{Width = 2};
    bool B with BinaryEncoding{Width = 1};
    RCode Rcode with BinaryEncoding{Width = 4};
}

pattern OperationCode = enum byte
{
    Query           = 0,
    Registration    = 5,
    Release         = 6,
    WACK            = 7,
    Refresh         = 8,
	...
};

string OperationCodeToSting(byte Opcode)
{
    switch (Opcode)
    {
        case 0 => return "Query";
        case 5 => return "Registration";
        case 6 => return "Release";
        case 7 => return "WACK";
        case 8 => return  "Refresh";
        default => return "Unkown Operation Code";
    } 
}

pattern Ont = enum byte
{
    BNode = 0,
    PNode = 1,
    MNode = 2,
    Reserved = 3
};

pattern ResourceRecordType = enum ushort
{
    A      = 1,
    NS     = 2,
    NULL   = 10,
    NB     = 32,
    NBSTAT = 33
};

pattern ResourceRecordClass = enum ushort
{
    IN = 1
};

pattern RCode = enum byte
{
    Success = 0,
    FmtErr  = 1,
    SrvErr  = 2,
    NamErr  = 3,
    ImpErr  = 4,
    RfsErr  = 5,
    ActErr  = 6,
    CftErr  = 7
};

string RcodeToString(RCode rcode)
{
    switch (rcode)
    {
        case RCode.Success => return "Success";
        case RCode.FmtErr => return "Format Error";
        case RCode.SrvErr => return "Server failure";
        case RCode.NamErr => return "Name Error";
        case RCode.ImpErr => return "Unsupported request error";
        case RCode.RfsErr => return "Refused error";
        case RCode.ActErr => return "Active error";
        case RCode.CftErr => return "Name in conflict error";
        default => return "Unknown type error";
    }
}

pattern QuestionType = enum ushort
{
    NB = 32,
    NBSTAT = 33
};

pattern  QuestionClass = ResourceRecordClass;

type QuestionSection
{
    NbtString QuestionName;
    QuestionType QuestionType;
    QuestionClass QuestionClass;
}

type ResourceRecord
{
    NetBiosNameString RRName;
    ResourceRecordType Type;
    ResourceRecordClass Class;
    uint TTL;
    ushort RDLength;
    ([|Type == ResourceRecordType.A|] IPAddressResourceRecord                                                       |
     [|Type == ResourceRecordType.NS|] NameServerResourceRecord                                                     |
     [|Type == ResourceRecordType.NULL|] Empty                                                                      |
     [|Type == ResourceRecordType.NB && RDLength >= 6|] NetBIOSGeneralNameServiceResourceRecord[RDLength as uint]   |
     [|Type == ResourceRecordType.NB && RDLength == 2|] Flags                                                       |
     [|Type == ResourceRecordType.NBSTAT|] NetBIOSNodeStatusResourceRecord) RData;
     
     string GetNBAddrString()
     {
         if (Type == ResourceRecordType.NB && RDLength >= 6)
         {
             return (RData as NetBIOSGeneralNameServiceResourceRecord).ToString();
         }
         else 
         {
             return "";
         }
     }
}

type NBFlags
{
    bool G with BinaryEncoding{Width = 1};
    Ont ONT with BinaryEncoding{Width = 2};
    ushort reserved where ValidationCheckZero(value == 0, null, true, ReferenceType.Type, "NBTNS", "reserved", "NBFlags", value) with BinaryEncoding{Width = 13};
}

type IPAddressResourceRecord
{
      IPv4Address NSDIPAddr;
}

type NameServerResourceRecord
{
    NetBiosNameString NSDName;
}

type NetBIOSGeneralNameServiceResourceRecord[uint length]
{
    array<Addr> AddrEnty with BinaryEncoding{Length = length/6};
    override string ToString()
    {
        string ipAddrs = "";
        if (AddrEnty.Count > 0)
        {
            ipAddrs = AddrEnty[0].ToString();
        }
        if (AddrEnty.Count > 1)
        {
            ipAddrs += ", " + AddrEnty[1].ToString();
        }
        if (AddrEnty.Count > 2)
        {
            ipAddrs += " ...";
        }
        return ipAddrs;
    }
    
}

type Addr
{
    NBFlags Flags;
    IPv4Address NBAddress;
    
    override string ToString()
    {
        return NBAddress.ToString();
    }
}

type NetBIOSNodeStatusResourceRecord 
{
    byte NumName;
    array<NodeName> Name with BinaryEncoding{Length = NumName};
    Statistics Statistics;
}

type NodeName
{
    string name with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = 16};
    NameFlags NameFlags;
}

 type NameFlags
{
    bool G with BinaryEncoding{Width = 1};
    byte ONT with BinaryEncoding{Width = 2};
    bool DRG with BinaryEncoding{Width = 1};
    bool CNF with BinaryEncoding{Width = 1};
    bool ACT with BinaryEncoding{Width = 1};
    bool PRM with BinaryEncoding{Width = 1};
    ushort RESERVED with BinaryEncoding{Width = 9};
}

type Statistics
{
    ulong UnitId with BinaryEncoding{Width = 48};
    byte Jumpers;
    byte TestResult;
    ushort VersionNumber;
    ushort PeriodOfStatistics;
    ushort NumberOfCrcs;
    ushort NumberAlignmentErrors;
    ushort NumberOfCollisions;
    ushort NumberSendAborts;
    uint ErGoodSends;
    uint NumberGoodReceives;
    ushort NumberRetransmits;
    ushort NumberNoResourceConditions;
    ushort NumberFreeCommandBlocks;
    ushort TotalNumberCommandBlocks;
    ushort MaxTotalNumberCommandBlocks;
    ushort NumberPendingSessions;
    ushort MaxNumberPendingSessions;
    ushort MaxTotalSessionsPossible;
    ushort SessionDataPacketSize;
}

pattern NetBiosNameString = NetBiosNameCompressed | NbtString;

type NetBiosNameCompressed
{
    (byte where value == 3) FirstByte with BinaryEncoding{Width = 2};
    ushort point with BinaryEncoding{Width = 14};
}

type NbtString
{
    string Chars with BinaryEncoding{TextEncoding = TextEncoding.ASCII};
    
    // Each byte is divided into two nibbles (4 bits each, unsigned).
    // The ASCII value of the letter 'A' (65, or 0x41) is added to each nibble and the result is taken as a character.
    string GetName()
    {
        array<char> bytes = Chars as array<char>;
        string name;
        int data = 0;
    
        if (bytes[0] != 0x20)
        {
            return Chars;
        }
    
        for (int i=1; i<bytes.Count-1;)
        {        
            data = (bytes[i] - 0x41) << 4; 
            i++;
            data = data + bytes[i] - 0x41;
            i++;
        
            if (data != 0x20 && i<bytes.Count)
            {
                binary b = ConvertLongToBinary(data, 8);
                var NbtStr = BinaryDecoder<NbtString>(b) as NbtString;
                name = name + NbtStr.Chars;
            }
        }
    
        switch (data)
        {
            case 0x00 =>
                name = name + "   <0x00> Workstation Service";
            case 0x01 =>
                name = name + "   <0x01> Messenger Service/Master Browser";
            case 0x03 =>
                name = name + "   <0x03> Messenger Service";
            case 0x1B =>
                name = name + "   <0x1B> Domain Master Browser";
            case 0x1C =>
                name = name + "   <0x1C> Domain Controllers";
            case 0x1D =>
                name = name + "   <0x1D> Master Browser";
            case 0x1E =>
                name = name + "   <0x1E> Browser Service Elections";
            case 0x20 =>
                name = name + "   <0x20> File Server Service";
            default   =>
                ;
        }
    
        return name;
    }
}

void NbtNameToSring(ref NameService m)
{
    foreach(var q in m.Questions)
    {
        if(q.QuestionName is NbtString)
        {
            var s = q.QuestionName as NbtString;
            s.Chars = (q.QuestionName as NbtString).GetName();
        }
    }
    foreach(var q in m.AnswerResourceRecord)
    {
        if(q.RRName is NbtString)
        {
            var s = q.RRName as NbtString;
            s.Chars = (q.RRName as NbtString).GetName();
        }
    }
    foreach(var q in m.AuthorityResourceRecord)
    {
        if(q.RRName is NbtString)
        {
            var s = q.RRName as NbtString;
            s.Chars = (q.RRName as NbtString).GetName();
        }
    }
    foreach(var q in m.AdditionalResourceRecord)
    {
        if(q.RRName is NbtString)
        {
            var s = q.RRName as NbtString;
            s.Chars = (q.RRName as NbtString).GetName();
        }
    }
}
