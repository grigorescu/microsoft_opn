protocol ESP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "IP Encapsulating Security Payload",
    ShortName = "ESP",
    Description = "Encapsulating Security Payload (ESP) is a member of the IPsec protocol suite.In IPsec it provides origin authenticity, integrity, and confidentiality protection of packets."
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 4303"},
            new Reference{Name = "RFC 2403"},
            new Reference{Name = "RFC 2404"},
            new Reference{Name = "RFC 2104"},
            new Reference{Name = "RFC 2857"},
            new Reference{Name = "RFC 4543"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ]
};

using IPv4;
using IPv6;
using IANA;
using Standard;
using Utility;
using UDP;
using TCP;
using ICMP;

annotation binary ESP.Packet#SourceAddress;
annotation binary ESP.Packet#DestinationAddress;

// Endpoint: Node
// Description: This endpoint accepts or issues normal message.
endpoint Node
    over IPv4.Node | over IPv6.Node | over UDP.Host
    accepts ESP.Packet
    accepts ESP.EncryptedPacket;

// Same actor logic for ESP messages
autostart actor TCPOverESP(ESP.Node node)
{
    set<binary> clientSet = {};

    process node accepts p:ESP.Packet where p.Trailer.NextHeader == ProtocolType.TCP
    {
        TCP.DecodeAndDispatchSegment(ref clientSet, p#SourceAddress as binary, p#DestinationAddress as binary, p.Payload);
    }
}

autostart actor ICMPOverESP(ESP.Node node)
{
    process node accepts p:ESP.Packet where p.Trailer.NextHeader == IANA.ProtocolType.ICMP
    {
        //Esp to Icmp
        ICMP.DecodeDatagram(p#SourceAddress as binary, p#DestinationAddress as binary, p.Payload, false);
    }
}

autostart actor UDPOverESP(ESP.Node node)
{
    process node accepts e:ESP.Packet where e.Trailer.NextHeader == ProtocolType.UDP
    {
        DecodeDatagram(e#SourceAddress as binary, e#DestinationAddress as binary, e.Payload);
    }
}

autostart actor IPv4OverESP(ESP.Node node)
{
    process node accepts p:ESP.Packet where p.Trailer.NextHeader == IANA.ProtocolType.IPv4
    {
        switch (p.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder =>
                dispatch (endpoint IPv4.ReassemblyNode[d.DestinationAddress.FlatAddress < d.SourceAddress.FlatAddress ? d.DestinationAddress.FlatAddress : d.SourceAddress.FlatAddress]) accepts d;
            default => 
                ThrowDecodingException("IPv4");
        }
    }
}

autostart actor IPv6OverESP(ESP.Node node)
{
    process node accepts p:ESP.Packet where p.Trailer.NextHeader == IANA.ProtocolType.IPv6
    {
        switch (p.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                dispatch endpoint IPv6.ReassemblyNode[d.DestinationAddress.FlatAddress < d.SourceAddress.FlatAddress ? d.DestinationAddress.FlatAddress : d.SourceAddress.FlatAddress] accepts d;
            default =>
                ThrowDecodingException("IPv6");
        }
    }
}

// Actor: ESPOverIPv4
// Description: Listen to IPv4.Node process messages if match successfully. 
autostart actor ESPOverIPv4(IPv4.Node node)
{
    process node accepts p:IPv4.Datagram {Protocol is ProtocolType.ESP}
    {   
        DecodeAndDispatchPacket(p.Payload, node, p.SourceAddress.FlatAddress, p.DestinationAddress.FlatAddress);
    }
}
// Actor: ESPOverIPv6
// Description: Listen to IPv6.Node process messages if match successfully. 
autostart actor ESPOverIPv6(IPv6.Node node)
{
    process node accepts d:IPv6.Datagram where d.NextProtocol == ProtocolType.ESP
    {          
        DecodeAndDispatchPacket(d.Payload, node, d.SourceAddress.FlatAddress, d.DestinationAddress.FlatAddress);
    }
}

autostart actor ESPOverUDP(UDP.Host host)
{
    process host accepts d:UDP.Datagram where ((d.SourcePort == Port.NATT || d.DestinationPort == Port.NATT) && (d.Payload.Segment(0,4) != $[00000000]) && d.Length > 12)
    {   
        DecodeAndDispatchPacket(d.Payload, host, d#SourceAddress as binary, d#DestinationAddress as binary);
    }
}

void DecodeAndDispatchPacket(stream payload, (IPv4.Node | IPv6.Node | UDP.Host) e, binary sourAddr, binary destAddr)
{
    // ESPDecoder() return null if decoder failed.
    (ESP.EncryptedPacket | ESP.Packet) m = ESPDecoder(payload);
    if (m == null)
    {
        throw "Decode error";
    }
    ESP.Node node;
    if (e is IPv4.Node)
    {
        node = endpoint ESP.Node over (e as IPv4.Node);
    }
    else if (e is IPv6.Node)
    {
        node = endpoint ESP.Node over (e as IPv6.Node);
    }
    else if (e is UDP.Host)
    {
        node = endpoint ESP.Node over (e as UDP.Host);
    }
    else
    {
        node = endpoint ESP.Node;
    }
    
    if (m is ESP.EncryptedPacket)
    {
        ESP.EncryptedPacket msg = m as ESP.EncryptedPacket;
        dispatch node accepts msg;
    }        
    else if (m is ESP.Packet)
    {
        ESP.Packet msg = m as ESP.Packet;
        msg#SourceAddress = sourAddr as binary;
        msg#DestinationAddress = destAddr as binary;
        dispatch node accepts msg;
    }
    else 
    {
        ThrowDecodingException("ESP");
    }
}

(ESP.EncryptedPacket | ESP.Packet) ESPDecoder(stream payload)
{
    // Get Integrity Check Value-ICV length. RFC2104.
    // Known Algorithms and their ICV length:
        
    /////////////////////////////////////////////////
    // Authentication   ICV Length      Reference  //
    //  Algorithms        (bytes)                  //
    //---------------------------------------------//
    //  HMAC-MD5-96         12           RFC2403   //
    //  HMAC-SHA1-96        12           RFC2404   //
    //  HMAC-RIPEMD-160-96  16           RFC2857   //
    //  AES-GMAC            16           RRC4543   //
    /////////////////////////////////////////////////

    // There is no direct way to detect the ICV length or ICV presence. 
    // We use approximate algorithm as following:
    // Try ICVLength = 12
    // Try ICVLength = 16, ICV present
    // ICVLength = 16, ICV not present, skip the ICV.
    int totalLength = payload.ByteLength;
    byte ICVLength = 12;
    if (totalLength < 13)
    {
        return null;
    }
    var nextHeader = payload.PeekByte((totalLength - 13) * 8);
    // skip SecurityParametersIndex and SequenceNumber
    var firstByte = payload.PeekByte(8 * 8);
    // re-calculate ICVLength
    ICVLength = GetICVLength(nextHeader, firstByte);
    // retrieve nextHeader according to new ICV Length
    if (totalLength < ICVLength + 1)
    {
        return null;
    }
    nextHeader = payload.PeekByte((totalLength - (ICVLength + 1)) * 8);
    int packetPayloadLength = (totalLength - (10 + (ICVLength as int) + payload.PeekByte((totalLength - (ICVLength + 2)) * 8))) as int;
    
    if ((nextHeader ==  ProtocolType.ICMP && packetPayloadLength > 0 && (((payload.PeekByte(payload.BitPosition + 8 * 8) as uint) <= 41 && ((payload.PeekByte(payload.BitPosition + 9 * 8) as uint) <= 11 || payload.PeekByte(payload.BitPosition + 9 * 8) in {137, 138, 139})) || payload.PeekByte(payload.BitPosition + 8 * 8) >= 42))
        || (nextHeader ==  ProtocolType.UDP && (packetPayloadLength >= ((payload.PeekByte(payload.BitPosition + 12 * 8) << 8) + payload.PeekByte(payload.BitPosition + 13 * 8))))
        || (nextHeader ==  ProtocolType.IGMP && packetPayloadLength >= 16)
        || (nextHeader ==  ProtocolType.IPv4 && ((payload.PeekByte(payload.BitPosition + 8 * 8) >> 4) == 4) && (packetPayloadLength >= ((payload.PeekByte(payload.BitPosition + 10 * 8) << 8) + payload.PeekByte(payload.BitPosition + 11 * 8))))
        || (nextHeader ==  ProtocolType.TCP && (payload.PeekByte(payload.BitPosition + 20 * 8) & 0x0E) == 0)
        || (nextHeader ==  ProtocolType.IPv6 && ((payload.PeekByte(payload.BitPosition + 8 * 8) >> 4) == 6) && ((packetPayloadLength - 48) >= ((payload.PeekByte(payload.BitPosition + 12 * 8) << 8) + payload.PeekByte(payload.BitPosition + 13 * 8)))))
    {
        var padLength = payload.PeekByte((totalLength - (ICVLength + 2)) * 8);
        var contentLength = totalLength - (ICVLength + 2 + padLength);
        if (contentLength > 0 && contentLength < totalLength)
        {
            var content = payload.PeekBytes(0, contentLength);
            var pad = payload.PeekBytes((totalLength - (ICVLength + 2 + padLength)) * 8, padLength);
            var icv = payload.PeekBytes((totalLength - ICVLength) * 8);
            switch (content)
            {
                case p:Packet from BinaryDecoder<Packet> =>
                    var t = new Trailer{Pad = pad, PadLength = padLength, NextHeader = nextHeader, ICV = icv};
                    Packet packet = new Packet
                                    {
                                        SecurityParametersIndex = p.SecurityParametersIndex,
                                        SequenceNumber = p.SequenceNumber,
                                        Payload = p.Payload,
                                        Trailer = t
                                    };
                    packet.SourceData = payload;
                    packet.AssignFieldEncodingInfo("SecurityParametersIndex", 0, 32);
                    packet.AssignFieldEncodingInfo("SequenceNumber", 32, 32);
                    packet.AssignFieldEncodingInfo("Payload", 64, (content.Count - 8) * 8);
                    packet.AssignFieldEncodingInfo("Trailer", content.Count * 8, (totalLength - content.Count) * 8);
                    packet.Trailer.AssignFieldEncodingInfo("Pad", content.Count * 8, pad.Count * 8);
                    packet.Trailer.AssignFieldEncodingInfo("PadLength", (content.Count + pad.Count) * 8, 8);
                    packet.Trailer.AssignFieldEncodingInfo("NextHeader", (content.Count + pad.Count + 1) * 8, 8);
                    packet.Trailer.AssignFieldEncodingInfo("ICV", (content.Count + pad.Count + 2) * 8, icv.Count * 8);
                    return packet;
            }
        }
    }
    // ICV not present
    switch (payload)
    {
        case msg:EncryptedPacket from BinaryDecoder<EncryptedPacket> =>
            return msg;
    }
    
    ThrowDecodingException("ESP");
    return null;
}

// Message
message Packet
{
    uint SecurityParametersIndex where ValidationCheck(value > 255, this, "Value of SPI less than or equal to 255 is reversed.");
    uint SequenceNumber;
    // RFC 4543
    optional IVType[SequenceNumber] IV;
    binary Payload;
    Trailer Trailer with Encoding{Ignore = true};
    
    override string ToString()
    {
        string summary = this#IsTruncated != nothing && (this#IsTruncated as bool) ? "Truncated, " : "";
        summary += "Next Protocol = " + Trailer.NextHeader.Name + ", SPI = " + Utility.DecToHexFormat(SecurityParametersIndex) 
            + ", Seq = " + Utility.DecToHexFormat(SequenceNumber);
        return summary;
    }
}

type IVType[uint SequenceNumber]
{
    ulong IV where value == SequenceNumber with BinaryEncodingDefaults{Endian = Endian.Little};
}

message EncryptedPacket
{
    uint SecurityParametersIndex where ValidationCheck(value > 255, this, "Value of SPI less than or equal to 255 is reversed.");
    uint SequenceNumber;
    binary EncryptedData;
    
    override string ToString()
    {
        string summary = this#IsTruncated != nothing && (this#IsTruncated as bool) ? "Truncated, " : "";
        summary += "SPI = " + Utility.DecToHexFormat(SecurityParametersIndex) + ", Seq = " + Utility.DecToHexFormat(SequenceNumber);
        return summary;
    }
}

type Trailer
{
    binary Pad;
    byte PadLength;
    ProtocolType  NextHeader;
    binary ICV;
}

// According to NextHeader field, return ICVLength, default value is 16.
byte GetICVLength(byte nextHeader, byte firstByte)
{
    byte ICVLength;
    switch (nextHeader)
        {
            case ProtocolType.TCP =>
                ICVLength = 12;
            case ProtocolType.UDP =>
                ICVLength = 12;
            case ProtocolType.ICMP =>
                if (firstByte <= 40)
                {
                    ICVLength = 12;
                }
                else
                {
                    ICVLength = 16;
                }
            case ProtocolType.IGMP =>
                if (firstByte <= 0x42)
                {
                    ICVLength = 12;
                }
                else
                {
                    ICVLength = 16;
                }
            case ProtocolType.IPv4 =>
                if ((firstByte & 0xF0) == 0x40)
                {
                    ICVLength = 12;
                }
                else
                {
                    ICVLength = 16;
                }
            case ProtocolType.IPv6 =>
                if ((firstByte & 0xF0) == 0x60)
                {
                    ICVLength = 12;
                }
                else
                {
                    ICVLength = 16;
                }
            default =>
                ICVLength = 16;
        }
    return ICVLength;
}
