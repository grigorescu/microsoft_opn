protocol SWN with 
Documentation
{
    ProtocolName = "Service Witness Protocol",
    ProtocolType = "rpc",
    ShortName = "SWN",
    DocumentName = "MS-SWN",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "MS-SWN", Version = "5.0", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "08/12/2013"}
        ]
};

using Technologies.IDL;
using DTYP;
using MSRPCE;
using ERREF;
using Utility;

endpoint WitnessService over MSRPCE.Server provides Witness;

contract Witness
{
    accepts operation WitnessrGetInterfaceList
    {
        in optional handle_t Handle;
        out PWITNESS_INTERFACE_LIST InterfaceList with IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "WitnessrGetInterfaceList, ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 0};

    accepts operation WitnessrRegister
    {
        in optional handle_t Handle;
        out PPCONTEXT_HANDLE ppContext;
        in ULONG Version;
        in string NetName with IDL{BaseStringType = TypeOf<LPWSTR>(), PointerType = PointerKind.UniquePtr};
        in string IpAddress with IDL{BaseStringType = TypeOf<LPWSTR>(), PointerType = PointerKind.UniquePtr};
        in string ClientComputerName with IDL{BaseStringType = TypeOf<LPWSTR>(), PointerType = PointerKind.UniquePtr};
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "WitnessrRegister, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) + ", Version: " + ConvertVersionToString(Version) 
                + ", NetName: " + NetName + ", IpAddress: " + IpAddress;
        }
    }
    with IDL{Opnum = 1};
  
    accepts operation WitnessrUnRegister
    {
        in optional handle_t Handle;
        in PCONTEXT_HANDLE pContext;
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "WitnessrUnRegister, ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 2};
  
    accepts operation WitnessrAsyncNotify
    {
        in optional handle_t Handle;
        in PCONTEXT_HANDLE_SHARED pContext;
        out PRESP_ASYNC_NOTIFY pResp with IDL{IndirectionLevel = 1};
        result DWORD ReturnValue;
        
        override string ToString()
        {
            return "WitnessrAsyncNotify, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) + ", MsgType: " + ConvertMessageTypeToString(pResp.MessageType);
        }
    }
    with IDL{Opnum = 3};

    accepts operation WitnessrRegisterEx
    {
        in optional handle_t Handle;        
        out PCONTEXT_HANDLE ppContext;        
        in ULONG Version;
        in string NetName with IDL{BaseStringType = TypeOf<LPWSTR>(), PointerType = PointerKind.UniquePtr};
        in string ShareName with IDL{BaseStringType = TypeOf<LPWSTR>(), PointerType = PointerKind.UniquePtr};
        in string IpAddress with IDL{BaseStringType = TypeOf<LPWSTR>(), PointerType = PointerKind.UniquePtr};
        in string ClientComputerName with IDL{BaseStringType = TypeOf<LPWSTR>(), PointerType = PointerKind.UniquePtr};
        in ULONG Flags where ValidationCheck(value is WitnessRegisterExFlags, this, "SWN: The Flags field must be set to one of the values: 0x00000000, 0x00000001, not " + value.ToString() + ".");
        in ULONG KeepAliveTimeout;
        result DWORD ReturnValue;

        override string ToString()
        {
            return "WitnessrRegisterEx, ReturnValue: " + Win32ErrorCodesToText(ReturnValue) + ", Version: " + ConvertVersionToString(Version)
                + ", NetName: " + NetName + ", ShareName: " + (ShareName as string) + ", IpAddress: " + IpAddress;        
        }
    }
    with IDL{Opnum = 4};
} 
with IDL{
        Uuid = {ccd8c074-d0e5-4a40-92b4-d074faa6ba28},
        Version = "1.1",
        Pointer_default = PointerKind.UniquePtr
};

// 2.2.1.1   PCONTEXT_HANDLE
pattern PCONTEXT_HANDLE = ContextHandle with IDL{Context_handle = true};

// 2.2.1.2   PPCONTEXT_HANDLE
pattern PPCONTEXT_HANDLE = PCONTEXT_HANDLE with IDL{IndirectionLevel = 1, PointerType = PointerKind.RefPtr};

// 2.2.1.3   PCONTEXT_HANDLE_SHARED
pattern PCONTEXT_HANDLE_SHARED = PCONTEXT_HANDLE with IDL{Context_handle = true, AliasOf = "PCONTEXT_HANDLE"};


// These three structures IPADDR_INFO, IPADDR_INFO_LIST and RESOURCE_CHANGE are block structures and need to be documented as tabular format and parsed as cumstom binary unmarshalling.
// Future Reference: TDI 67500 in ProtoDoc
// Future Reference: Bug 50404 in PEFManage
/*
// 2.2.2.3 RESOURCE_CHANGE
type _RESOURCE_CHANGE 
{
    UINT Length;
    UINT32 ChangeType where ValidationCheck(value in {0x00000001, 0x00000002, 0x000000FF}, null, "SWN: The ChangeType field in type RESOURCE_CHANGE must be set to one of the values: 0x00000001, 0x00000002, 0x000000FF, not " + DecToHexFormat(value) + ".");
    array<WCHAR> ResourceName with IDL{Dimensions = [null]};
}
typedef RESOURCE_CHANGE = _RESOURCE_CHANGE; 
typedef PRESOURCE_CHANGE = _RESOURCE_CHANGE with IDL{IndirectionLevel = 1};

// 2.2.2.1 IPADDR_INFO
type _IPADDR_INFO 
{
    UINT Flags where ValidationCheck(value is IpaddrInfoFlags, null, "SWN: The Flags field in type IPADDR_INFO must be set to a combination of one or more of the values: 0x00000001, 0x00000002, 0x00000008, 0x00000010, not " + value.ToString() + ".");
    ULONG IPV4 with DisplayInfo{ToText = UlongToIPV4};
    array<USHORT> IPV6 with IDL{Dimensions = [8]};
}

typedef IPADDR_INFO = _IPADDR_INFO;
typedef PIPADDR_INFO = _IPADDR_INFO with IDL{IndirectionLevel = 1};

pattern IpaddrInfoFlags = flags UINT
{
    IPADDR_V4 = 0x00000001, 
    IPADDR_V6 = 0x00000002,
    IPADDR_ONLINE = 0x00000008, 
    IPADDR_OFFLINE = 0x00000010
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

// 2.2.2.2 IPADDR_INFO_LIST
type _IPADDR_INFO_LIST 
{
    UINT Length;
    ULONG Reserved where ValidationCheck(value == 0, null, "SWN: The Reserved field in type IPADDR_INFO_LIST must be set to zero, not " + DecToHexFormat(value) + ".");
    ULONG IPAddrInstances;
    array<IPADDR_INFO> IPAddrInfo with IDL{Dimensions = [null]};
}
typedef IPADDR_INFO_LIST = _IPADDR_INFO_LIST; 
typedef PIPADDR_INFO_LIST = _IPADDR_INFO_LIST with IDL{IndirectionLevel = 1};
*/

// 2.2.2.4 RESP_ASYNC_NOTIFY
type _RESP_ASYNC_NOTIFY
{
    UINT MessageType where ValidationCheck(value in {1, 2, 3, 4}, null, 
        () => "SWN: The MessageType field in type RESP_ASYNC_NOTIFY must contain one of these values: 1, 2, 3, 4, not " + DecToHexFormat(value) + ".");
    UINT Length;
    UINT NumberOfMessages;
    array<PBYTE> MessageBuffer with IDL{PointerType = PointerKind.UniquePtr, Size_is = [Length]};
}

typedef RESP_ASYNC_NOTIFY = _RESP_ASYNC_NOTIFY;
typedef PRESP_ASYNC_NOTIFY = _RESP_ASYNC_NOTIFY with IDL{IndirectionLevel = 1};

// 2.2.2.5 WITNESS_INTERFACE_INFO
type _WITNESS_INTERFACE_INFO 
{
    array<WCHAR> InterfaceGroupName with IDL{Dimensions = [260]};
    ULONG Version;
    USHORT State where ValidationCheck(value is WitnessInterfaceInfoState, null, "SWN: The State field in type WITNESS_INTERFACE_INFO must be set to one of these values: 0x0000, 0x0001, 0x00FF, not " + value.ToString() + ".");
    ULONG IPV4 with DisplayInfo{ToText = UlongToIPV4};
    array<USHORT> IPV6 with IDL{Dimensions = [8]};
    UINT Flags where ValidationCheck(value is WitnessInterfaceInfoFlags, null, "SWN: The Flags field in type WITNESS_INTERFACE_INFO must be set to combination of zero or more of the values: 0x00000001, 0x00000002, 0x00000004, not " + value.ToString() + ".");
}

typedef WITNESS_INTERFACE_INFO = _WITNESS_INTERFACE_INFO;
typedef PWITNESS_INTERFACE_INFO = _WITNESS_INTERFACE_INFO with IDL{IndirectionLevel = 1};

pattern WitnessInterfaceInfoState = enum USHORT
{
    UNKNOWN = 0x0000, 
    AVAILABLE = 0x0001, 
    UNAVAILABLE = 0x00FF
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

pattern WitnessInterfaceInfoFlags = flags UINT
{
    IPv4 = 0x00000001, 
    IPv6 = 0x00000002, 
    INTERFACE_WITNESS = 0x00000004
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

string UlongToIPV4(any input)
{
    uint temp = input as uint;
    return ((temp & 0xFF) as string) + "." +
            (((temp >> 8) & 0xFF) as string) + "." +
            (((temp >> 16) & 0xFF) as string) + "." +
            (((temp >> 24) & 0xFF) as string);
}

// 2.2.2.6 WITNESS_INTERFACE_LIST
type _WITNESS_INTERFACE_LIST
{
    UINT NumberOfInterfaces;
    array<PWITNESS_INTERFACE_INFO> InterfaceInfo
        with IDL{PointerType = PointerKind.UniquePtr, Size_is = [NumberOfInterfaces]};
}

typedef WITNESS_INTERFACE_LIST = _WITNESS_INTERFACE_LIST;
typedef PWITNESS_INTERFACE_LIST = _WITNESS_INTERFACE_LIST with IDL{IndirectionLevel = 1};

pattern WitnessRegisterExFlags = flags ULONG
{
    WITNESS_REGISTER_NONE = 0x00000000, 
    WITNESS_REGISTER_IP_NOTIFICATION = 0x00000001
} with IDL{DoNotGenerate = true}, Documentation{Ignore = true};

string ConvertVersionToString(ULONG version)
{
    string strVersion;
    switch(version)
    {
        case 0x00010001 => strVersion = "Witness protocol version 1";
        case 0x00020000 => strVersion = "Witness protocol version 2";
        default => strVersion = "Unknown (" + DecToHexFormat(version) + ")";
    }
    return strVersion;
}

string ConvertMessageTypeToString(UINT msgType)
{
    string strMsgType;
    switch(msgType)
    {
        case 1 => strMsgType = "RESOURCE_CHANGE_NOTIFICATION";
        case 2 => strMsgType = "CLIENT_MOVE_NOTIFICATION";
        case 3 => strMsgType = "SHARE_MOVE_NOTIFICATION";
        case 4 => strMsgType = "IP_CHANGE_NOTIFICATION";
        default => strMsgType = "Unknown (" + msgType.ToString() + ")";
    }
    return strMsgType;
}
