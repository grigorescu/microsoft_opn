protocol PCCRD with 
XmlEncodingDefaults{Namespace = PCCRDNamespace},
Documentation
{
    ProtocolName = "Peer Content Caching and Retrieval Discovery Protocol",
    ShortName = "PCCRD",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "MS-PCCRD", Version = "8.0", ProgramName = ProgramName.MCPP},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "11/21/2012"}
        ]
};

using Standard;
using Utility;
using Technologies.WSDL;
using Technologies.SOAP;
using WSDiscovery;

// Actor
autostart actor PCCRDOverWSDiscovery(WSDiscovery.Server server)
{
    // SOAP over UDP, no need to consider issues direction.
    observe server accepts probeMatch:ProbeMatchesMessage 
        where probeMatch.ProbeMatchesMsg.ProbeMatches.Count > 0
    {
        // Cache for all extended elements.
        array<any> extendElements = [];
        
        foreach (var match in probeMatch.ProbeMatchesMsg.ProbeMatches)
        {
            if (match.AnyElement != nothing)
            {
                array<xml> anyElement = match.AnyElement as array<xml>;
                foreach (xml curXml in anyElement)
                {
                    if (curXml.NamespaceUri != nothing && curXml.NamespaceUri == PCCRDNamespace 
                        && curXml.Name != nothing)
                    {
                        XmlName name = curXml.Name as XmlName;
                        switch (name.LocalName) 
                        {
                            case ("PeerDistData") =>
                                switch (curXml)
                                {
                                    case peerDistData:PeerDistDataV1 from XmlDecoder<PeerDistDataV1> =>
                                        extendElements += [peerDistData];
                                    default =>
                                        ThrowDecodingException("PCCRD", "PeerDistData");
                                }
                            case ("PeerDistDataV2") =>
                                switch (curXml)
                                {
                                    case peerDistDatav2:PeerDistDataV2 from XmlDecoder<PeerDistDataV2> =>
                                        extendElements += [peerDistDatav2];
                                    default =>
                                        ThrowDecodingException("PCCRD", "PeerDistDataV2");
                                }
                        }
                    }
                } 
            }
        }
        
        if (extendElements.Count > 0)
        {
            SetEmbedded<array<any>>(probeMatch, "PCCRDOnWSDiscovery", extendElements);
            probeMatch.AppendExtendingSummary("[ProbeMatch Extended by PCCRD] ");
        }
    }
}

// Type
type PeerDistDataV1
{
    BlockCountType BlockCount;
}
type BlockCountType
{
    string Count with XmlEncoding{Kind = XmlKind.Text};
}

type PeerDistDataV2
{
    SegmentAgesType SegmentAges;
}
type SegmentAgesType
{
    string Ages with XmlEncoding{Kind = XmlKind.Text};
}

const string PCCRDNamespace = "http://schemas.microsoft.com/p2p/2007/09/PeerDistributionDiscovery";
