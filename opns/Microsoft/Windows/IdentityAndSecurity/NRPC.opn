protocol NRPC with 
Documentation
{
    ProtocolName = "Netlogon Remote Protocol",
    ProtocolType = "rpc",
    ShortName = "NRPC",
    DocumentName = "MS-NRPC",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
    [
    new Reference{Name = "MS-NRPC", Version = "28.0", ProgramName = ProgramName.WSPP}
    ],
    RevisionSummary = 
    [
    new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "10/24/2012"}
    ]
};

using Technologies.IDL;
using DTYP;
using ERREF;
using MSRPCE;
using Utility;
// WORKAROUND: Bug#49374: Copy all needed type in DTYP.opn to NRPC.opn, Begin
using Technologies.Block;
// WORKAROUND: Bug#49374: Copy all needed type in DTYP.opn to NRPC.opn, End

endpoint LogonService over MSRPCE.Server provides logon;

contract logon
{
    accepts operation NetrLogonUasLogon
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string UserName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in string Workstation
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        out PNETLOGON_VALIDATION_UAS_INFO ValidationInformation
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonUasLogon, ServerName: " + (ServerName as string) +
            ", UserName: " + (UserName as string) +
            ", Workstation: " + (Workstation as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 0};
    
    accepts operation NetrLogonUasLogoff
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string UserName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in string Workstation
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        out PNETLOGON_LOGOFF_UAS_INFO LogoffInformation;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonUasLogoff, ServerName: " + (ServerName as string) +
            ", UserName: " + (UserName as string) +
            ", Workstation: " + (Workstation as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 1};
    
    accepts operation NetrLogonSamLogon
    {
        in string LogonServer
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        in NETLOGON_VALIDATION_INFO_CLASS ValidationLevel;
        out PNETLOGON_VALIDATION[ValidationLevel] ValidationInformation
        with IDL{Switch_Is = ValidationLevel};
        out UCHAR Authoritative with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogon, LogonServer: " + (LogonServer as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
            ", ValidationLevel: " + EnumToString(ValidationLevel, "NRPC.NETLOGON_VALIDATION_INFO_CLASS") +
            ", Authoritative: " + ((Authoritative as bool)? "TRUE" : "FALSE") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 2};
    
    accepts operation NetrLogonSamLogoff
    {
        in string LogonServer
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogoff, LogonServer: " + (LogonServer as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 3};
    
    accepts operation NetrServerReqChallenge
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientChallenge;
        out PNETLOGON_CREDENTIAL ServerChallenge;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerReqChallenge, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 4};
    
    accepts operation NetrServerAuthenticate
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientCredential;
        out PNETLOGON_CREDENTIAL ServerCredential;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAuthenticate, PrimaryName: " + (PrimaryName as string) +
            ", AccountName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", SecureChannelType: " + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 5};
    
    accepts operation NetrServerPasswordSet
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in PENCRYPTED_NT_OWF_PASSWORD UasNewPassword;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerPasswordSet, PrimaryName: " + (PrimaryName as string) +
            ", AccountName: " + (AccountName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 6};
    
    accepts operation NetrDatabaseDeltas
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD DatabaseID where ValidationCheck(value is NetrDatabaseDeltas_DatabaseID, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the DatabaseID in message NetrDatabaseDeltas.");
        in out PNLPR_MODIFIED_COUNT DomainModifiedCount;
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        in DWORD PreferredMaximumLength;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseDeltas, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", DatabaseID: " + EnumToString(DatabaseID as NetrDatabaseDeltas_DatabaseID, "NetrDatabaseDeltas_DatabaseID") +
            ", DomainModifiedCount: " + (DomainModifiedCount as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 7};
    
    accepts operation NetrDatabaseSync
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD DatabaseID where ValidationCheck(value is NetrDatabaseSync_DatabaseID, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the DatabaseID in message NetrDatabaseSync.");
        in out ULONG SyncContext with IDL{IndirectionLevel = 1};
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        in DWORD PreferredMaximumLength;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseSync, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", DatabaseID: " + EnumToString(DatabaseID as NetrDatabaseSync_DatabaseID, "NetrDatabaseSync_DatabaseID") +
            ", SyncContext: " + (SyncContext as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 8};
    
    accepts operation NetrAccountDeltas
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in PUAS_INFO_0 RecordId;
        in DWORD Count;
        in DWORD Level;
        out array<UCHAR> Buffer 
        with IDL{Size_is = [BufferSize], IndirectionLevel = 1};
        in DWORD BufferSize;
        out ULONG CountReturned with IDL{IndirectionLevel = 1};
        out ULONG TotalEntries with IDL{IndirectionLevel = 1};
        out PUAS_INFO_0 NextRecordId;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrAccountDeltas, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", Count: " + (Count as string) + 
            ", Level: " + (Level as string) +
            ", BufferSize: " + (BufferSize as string) +
            ", CountReturned: " + (CountReturned as string) +
            ", TotalEntries: " + (TotalEntries as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 9};
    
    accepts operation NetrAccountSync
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD Reference;
        in DWORD Level;
        out array<UCHAR> Buffer with IDL{Size_is = [BufferSize], IndirectionLevel = 1};
        in DWORD BufferSize;
        out ULONG CountReturned with IDL{IndirectionLevel = 1};
        out ULONG TotalEntries with IDL{IndirectionLevel = 1};
        out ULONG NextReference with IDL{IndirectionLevel = 1};
        out PUAS_INFO_0 LastRecordId;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrAccountSync, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", Reference: " + (Reference as string) + 
            ", Level: " + (Level as string) +
            ", BufferSize: " + (BufferSize as string) +
            ", CountReturned: " + (CountReturned as string) +
            ", TotalEntries: " + (TotalEntries as string) +
            ", NextReference: " + (NextReference as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 10};
    
    accepts operation NetrGetDCName
    {
        in string ServerName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName 
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        out string Buffer
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrGetDCName, ServerName: " + (ServerName as string) +
            ", DomainName: " + (DomainName as string) +
            ", Buffer: " + (Buffer as string) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 11};
    
    accepts operation NetrLogonControl
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD FunctionCode where ValidationCheck(value is NetrLogonControl_FunctionCode, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the FunctionCode in message NetrLogonControl.");
        in DWORD QueryLevel where ValidationCheck(value is NetrLogonControl_QueryLevel, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the QueryLevel in message NetrLogonControl.");
        out PNETLOGON_CONTROL_QUERY_INFORMATION[QueryLevel] Buffer
        with IDL{Switch_Is = QueryLevel};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonControl, ServerName: " + (ServerName as string) +
            ", FunctionCode: " + EnumToString(FunctionCode as NetrLogonControl_FunctionCode, "NetrLogonControl_FunctionCode") +
            ", QueryLevel: " + EnumToString(QueryLevel as NetrLogonControl_QueryLevel, "NetrLogonControl_QueryLevel") +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 12};
    
    accepts operation NetrGetAnyDCName
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        out string Buffer
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrGetAnyDCName, ServerName: " + (ServerName as string) +
            ", DomainName: " + (DomainName as string) +
            ", Buffer: " + (Buffer as string) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 13};
    
    accepts operation NetrLogonControl2
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD FunctionCode where ValidationCheck(value is NetrLogonControl2_FunctionCode, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the FunctionCode in message NetrLogonControl2.");
        in DWORD QueryLevel where ValidationCheck(value is NetrLogonControl2_QueryLevel, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the QueryLevel in message NetrLogonControl2.");
        in PNETLOGON_CONTROL_DATA_INFORMATION[FunctionCode] Data
        with IDL{Switch_Is = FunctionCode};
        out PNETLOGON_CONTROL_QUERY_INFORMATION[QueryLevel] Buffer
        with IDL{Switch_Is = QueryLevel};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonControl2, ServerName: " + (ServerName as string) +
            ", FunctionCode: " + EnumToString(FunctionCode as NetrLogonControl2_FunctionCode, "NetrLogonControl2_FunctionCode") +
            ", QueryLevel: " + EnumToString(QueryLevel as NetrLogonControl2_QueryLevel, "NetrLogonControl2_QueryLevel") + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 14};
    
    accepts operation NetrServerAuthenticate2
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientCredential;
        out PNETLOGON_CREDENTIAL ServerCredential;
        in out ULONG NegotiateFlags where ValidationCheck(value is NetlogonNegotiableOptions, this, DiagnosisLevel.Error,
        "NRPC: the NegotiateFlags in message NetrServerAuthenticate2 must be constructed from NetlogonNegotiableOptions, all other bits must be set to zero.")
        with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAuthenticate2, PrimaryName: " + (PrimaryName as string) +
            ", AccountName: " + (AccountName as string) +
            ", ComputerName: " + (ComputerName as string) + 
            ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", NegotiateFlags: " + Utility.DecToHexFormat(8, NegotiateFlags) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 15};
    
    accepts operation NetrDatabaseSync2
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD DatabaseID where ValidationCheck(value is NetrDatabaseSync2_DatabaseID, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the DatabaseID in message NetrDatabaseSync2.");
        in SYNC_STATE RestartState;
        in out ULONG SyncContext with IDL{IndirectionLevel = 1};
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        in DWORD PreferredMaximumLength;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseSync2, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", DatabaseID: " + EnumToString(DatabaseID as NetrDatabaseSync2_DatabaseID, "NetrDatabaseSync2_DatabaseID") +
            ", RestartState: " + EnumToString(RestartState, "NRPC.SYNC_STATE") + 
            ", SyncContext: " + (SyncContext as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 16};
    
    accepts operation NetrDatabaseRedo
    {
        in string PrimaryName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in array<UCHAR> ChangeLogEntry
        with IDL{Size_is = [ChangeLogEntrySize], IndirectionLevel = 1};
        in DWORD ChangeLogEntrySize;
        out PNETLOGON_DELTA_ENUM_ARRAY DeltaArray with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrDatabaseRedo, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", ChangeLogEntrySize: " + (ChangeLogEntrySize as string) + 
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 17};
    
    accepts operation NetrLogonControl2Ex
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD FunctionCode where ValidationCheck(value is NetrLogonControl2Ex_FunctionCode, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the FunctionCode in message NetrLogonControl2Ex.");
        in DWORD QueryLevel where ValidationCheck(value is NetrLogonControl2Ex_QueryLevel, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the QueryLevel in message NetrLogonControl2Ex.");
        in NETLOGON_CONTROL_DATA_INFORMATION[FunctionCode] Data
        with IDL{Switch_Is = FunctionCode, IndirectionLevel = 1};
        out PNETLOGON_CONTROL_QUERY_INFORMATION[QueryLevel] Buffer
        with IDL{Switch_Is = QueryLevel};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonControl2Ex, ServerName: " + (ServerName) +
            ", FunctionCode: " + EnumToString(FunctionCode as NetrLogonControl2Ex_FunctionCode, "NetrLogonControl2Ex_FunctionCode") +
            ", QueryLevel: " + EnumToString(QueryLevel as NetrLogonControl2Ex_QueryLevel, "NetrLogonControl2Ex_QueryLevel") +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 18};
    
    accepts operation NetrEnumerateTrustedDomains
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out PDOMAIN_NAME_BUFFER DomainNameBuffer;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrEnumerateTrustedDomains, ServerName: " + (ServerName as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 19};
    
    accepts operation DsrGetDcName
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in GUID SiteGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in ULONG Flags where ValidationCheck(value is DsrGetDcName_Flags, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Flags in message DsrGetDcName.");
        out PDOMAIN_CONTROLLER_INFOW DomainControllerInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcName, ComputerName: " + (ComputerName as string) +
            ", DomainName: " + (DomainName as string) +
            ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 20};
    
    accepts operation NetrLogonGetCapabilities
    {
        in string ServerName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName 
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD QueryLevel where ValidationCheck(value == 1, this, DiagnosisLevel.Error,
        "NRPC: the QueryLevel in message NetrLogonGetCapabilities must to zero, not " + value.ToString() + ".");
        out PNETLOGON_CAPABILITIES[QueryLevel] ServerCapabilities
        with IDL{Switch_Is = QueryLevel};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetCapabilities, ServerName: " + (ServerName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", QueryLevel: " + (QueryLevel as string) + 
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 21};
    
    accepts operation NetrLogonSetServiceBits
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD ServiceBitsOfInterest where ValidationCheck(value is NetrLogonSetServiceBits_ServiceBitsOfInterest, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the ServiceBitsOfInterest in message NetrLogonSetServiceBits.");
        in DWORD ServiceBits where ValidationCheck(value is NetrLogonSetServiceBits_ServiceBits, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the ServiceBits in message NetrLogonSetServiceBits.");
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSetServiceBits, ServerName: " + (ServerName as string) +
            ", ServiceBitsOfInterest: " + Utility.DecToHexFormat(8, ServiceBitsOfInterest) + 
            ", ServiceBits: " + Utility.DecToHexFormat(8, ServiceBits) + 
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 22};
    
    accepts operation NetrLogonGetTrustRid
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        out ULONG Rid with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetTrustRid, ServerName: " + (ServerName as string) +
            ", DomainName: " + (DomainName as string) +
            ", Rid: " + (Rid as string) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 23};
    
    accepts operation NetrLogonComputeServerDigest
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in ULONG Rid;
        in array<UCHAR> Message with IDL{Size_is = [MessageSize], IndirectionLevel = 1};
        in ULONG MessageSize;
        out array<CHAR> NewMessageDigest with IDL{Dimensions = [16]};
        out array<CHAR> OldMessageDigest with IDL{Dimensions = [16]};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonComputeServerDigest, ServerName: " + (ServerName as string) +
            ", Rid: " + (Rid as string) +
            ", MessageSize: " + (MessageSize as string) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 24};
    
    accepts operation NetrLogonComputeClientDigest
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in array<UCHAR> Message with IDL{Size_is = [MessageSize], IndirectionLevel = 1};
        in ULONG MessageSize;
        out array<CHAR> NewMessageDigest with IDL{Dimensions = [16]};
        out array<CHAR> OldMessageDigest with IDL{Dimensions = [16]};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonComputeClientDigest, ServerName: " + (ServerName as string) +
            ", DomainName: " + (DomainName as string) +
            ", MessageSize: " + (MessageSize as string) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 25};
    
    accepts operation NetrServerAuthenticate3
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_CREDENTIAL ClientCredential;
        out PNETLOGON_CREDENTIAL ServerCredential;
        in out ULONG NegotiateFlags where ValidationCheck(value is NetlogonNegotiableOptions, this, DiagnosisLevel.Error,
        "NRPC: the NegotiateFlags in message NetrServerAuthenticate3 must be constructed from Netlogon Negotiable Options, all other bits must be set to zero.")
        with IDL{IndirectionLevel = 1};
        out ULONG AccountRid with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerAuthenticate3, PrimaryName: " + (PrimaryName as string) +
            ", AccountName: " + (AccountName as string) +
            ", ComputerName: " + (ComputerName as string) + 
            ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", NegotiateFlags: " + Utility.DecToHexFormat(8, NegotiateFlags) +
            ", AccountRid: " + (AccountRid as string) + 
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 26};
    
    accepts operation DsrGetDcNameEx
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in string SiteName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in ULONG Flags where ValidationCheck(value is DsrGetDcNameEx_Flags, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Flags in message DsrGetDcNameEx.");
        out PDOMAIN_CONTROLLER_INFOW DomainControllerInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcNameEx, ComputerName: " + (ComputerName as string) +
            ", DomainName: " + (DomainName as string) +
            ", SiteName: " + (SiteName as string) + 
            ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 27};
    
    accepts operation DsrGetSiteName
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out string SiteName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetSiteName, ComputerName: " + (ComputerName as string) +
            ", SiteName: " + (SiteName as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 28};
    
    accepts operation NetrLogonGetDomainInfo
    {
        in string ServerName
        with IDL{BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD Level where ValidationCheck(value is NetrLogonGetDomainInfo_Level, null, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Level in message NetrLogonGetDomainInfo.");
        in PNETLOGON_WORKSTATION_INFORMATION[Level] WkstaBuffer
        with IDL{Switch_Is = Level};
        out PNETLOGON_DOMAIN_INFORMATION[Level] DomBuffer
        with IDL{Switch_Is = Level};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetDomainInfo, ServerName: " + (ServerName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", Level: " + EnumToString(Level as NetrLogonGetDomainInfo_Level, "NetrLogonGetDomainInfo_Level") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 29};
    
    accepts operation NetrServerPasswordSet2
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in PNL_TRUST_PASSWORD ClearNewPassword;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerPasswordSet2, PrimaryName: " + (PrimaryName as string) +
            ", AccountName: " + (AccountName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", SecureChannelType: "  + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 30};
    
    accepts operation NetrServerPasswordGet
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE AccountType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedNtOwfPassword;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerPasswordGet, PrimaryName: " + (PrimaryName as string) +
            ", AccountName: " + (AccountName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", AccountType: "  + EnumToString(AccountType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 31};
    
    accepts operation NetrLogonSendToSam
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in array<UCHAR> OpaqueBuffer
        with IDL{Size_is = [OpaqueBufferSize], IndirectionLevel = 1};
        in ULONG OpaqueBufferSize;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSendToSam, PrimaryName: " + (PrimaryName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", OpaqueBufferSize: " + (OpaqueBufferSize as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 32};
    
    accepts operation DsrAddressToSiteNamesW
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD EntryCount
        with IDL{Range = new RangePattern {Low = 0, High = 32000}};
        in array<PNL_SOCKET_ADDRESS> SocketAddresses
        with IDL{Size_is = [EntryCount]};
        out PNL_SITE_NAME_ARRAY SiteNames with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrAddressToSiteNamesW, ComputerName: " + (ComputerName as string) +
            ", EntryCount: " + (EntryCount as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 33};
    
    accepts operation DsrGetDcNameEx2
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in ULONG AllowableAccountControlBits where ValidationCheck(value is DsrGetDcNameEx2_AllowableAccountControlBits, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the AllowableAccountControlBits in message DsrGetDcNameEx2.");
        in string DomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in string SiteName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in ULONG Flags where ValidationCheck(value is DsrGetDcNameEx2_Flags, this, DiagnosisLevel.Error,
            () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Flags in message DsrGetDcNameEx2.");
        out PDOMAIN_CONTROLLER_INFOW DomainControllerInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcNameEx2, ComputerName: " + (ComputerName as string) +
            ", AccountName: " + (AccountName as string) +
            ", DomainName: " + (DomainName as string) +
            ", SiteName: " + (SiteName as string) +
            ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 34};
    
    accepts operation NetrLogonGetTimeServiceParentDomain
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out string DomainName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 2};
        out int PdcSameSite with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonGetTimeServiceParentDomain, ServerName: " + (ServerName as string) +
            ", DomainName: " + (DomainName as string) +
            ", PdcSameSite: " + ((PdcSameSite as bool)? "TRUE" : "FALSE") +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 35};
    
    accepts operation NetrEnumerateTrustedDomainsEx
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out PNETLOGON_TRUSTED_DOMAIN_ARRAY Domains;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrEnumerateTrustedDomainsEx, ServerName: " + (ServerName as string) +
            ", DomainCount: " + (Domains.DomainCount as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 36};
    
    accepts operation DsrAddressToSiteNamesExW
    {
        in string ComputerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in DWORD EntryCount
        with IDL{Range = new RangePattern {Low = 0, High = 32000}};
        in array<PNL_SOCKET_ADDRESS> SocketAddresses
        with IDL{Size_is = [EntryCount]};
        out PNL_SITE_NAME_EX_ARRAY SiteNames with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;

        override string ToString()
        {
            return "DsrAddressToSiteNamesExW, ComputerName: " + (ComputerName as string) +
            ", EntryCount: " + (EntryCount as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 37};
    
    accepts operation DsrGetDcSiteCoverageW
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        out PNL_SITE_NAME_ARRAY SiteNames with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetDcSiteCoverageW, ServerName: " + (ServerName as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 38};
    
    accepts operation NetrLogonSamLogonEx
    {
        in (optional  handle_t) ContextHandle;
        in string LogonServer with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        in NETLOGON_VALIDATION_INFO_CLASS ValidationLevel;
        out PNETLOGON_VALIDATION[ValidationLevel] ValidationInformation
        with IDL{Switch_Is = ValidationLevel};
        out UCHAR Authoritative with IDL{IndirectionLevel = 1};
        in out ULONG ExtraFlags with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogonEx, LogonServer: " + (LogonServer as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
            ", ExtraFlags: " + Utility.DecToHexFormat(8, ExtraFlags) +
            ", Authoritative: " + ((Authoritative as bool)? "TRUE" : "FALSE") +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 39};
    
    accepts operation DsrEnumerateDomainTrusts
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in ULONG Flags where ValidationCheck(value is DsrEnumerateDomainTrusts_Flags, this, DiagnosisLevel.Error,
        "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Flags in message DsrEnumerateDomainTrusts.");
        out PNETLOGON_TRUSTED_DOMAIN_ARRAY Domains;
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrEnumerateDomainTrusts, ServerName: " + (ServerName as string) +
            ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
            ", DomainCount: " + (Domains.DomainCount as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 40};
    
    accepts operation DsrDeregisterDnsHostRecords
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string DnsDomainName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in GUID DomainGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in GUID DsaGuid
        with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
        in string DnsHostName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrDeregisterDnsHostRecords, ServerName: " + (ServerName as string) +
            ", DnsDomainName: " + (DnsDomainName as string) +
            ", DnsHostName: " + (DnsHostName as string) +
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 41};
    
    accepts operation NetrServerTrustPasswordsGet
    {
        in string TrustedDcName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedNewOwfPassword;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedOldOwfPassword;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerTrustPasswordsGet, TrustedDcName: " + (TrustedDcName as string) +
            ", AccountName: " + (AccountName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", SecureChannelType: " + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 42};
    
    accepts operation DsrGetForestTrustInformation
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string TrustedDomainName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in DWORD Flags where ValidationCheck(value is DsrGetForestTrustInformation_Flags, this, DiagnosisLevel.Error,
        "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Flags in message DsrGetForestTrustInformation.");
        // Bug 50585: Pointer Deffered part is ignored for DsrGetForestTrustInformation.ForestTrustInfo.Entries.ForestTrustRecord.ForestTrustData.TopLevelName
        out PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo
        with IDL{IndirectionLevel = 1};
        result NET_API_STATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrGetForestTrustInformation, ServerName: " + (ServerName as string) +
            ", TrustedDomainName: " + (TrustedDomainName as string) +
            ", Flags: " + Utility.DecToHexFormat(8, Flags) + 
            ", ReturnValue: " + Win32ErrorCodesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 43};
    
    accepts operation NetrGetForestTrustInformation
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in DWORD Flags where ValidationCheck(Flags == 0, this, DiagnosisLevel.Error, 
        "NRPC: the Flags in message NetrGetForestTrustInformation must be set to zero, not " + value.ToString() + ".");
        out PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo
        with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrGetForestTrustInformation, ServerName: " + (ServerName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 44};
    
    accepts operation NetrLogonSamLogonWithFlags
    {
        in string LogonServer
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.UniquePtr};
        in NETLOGON_LOGON_INFO_CLASS LogonLevel;
        in PNETLOGON_LEVEL[LogonLevel] LogonInformation
        with IDL{Switch_Is = LogonLevel};
        in NETLOGON_VALIDATION_INFO_CLASS ValidationLevel;
        out PNETLOGON_VALIDATION[ValidationLevel] ValidationInformation
        with IDL{Switch_Is = ValidationLevel};
        out UCHAR Authoritative with IDL{IndirectionLevel = 1};
        in out ULONG ExtraFlags with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrLogonSamLogonWithFlags, LogonServer: " + (LogonServer as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", LogonLevel: " + EnumToString(LogonLevel, "NRPC.NETLOGON_LOGON_INFO_CLASS") +
            ", ValidationLevel: " + EnumToString(ValidationLevel, "NRPC.NETLOGON_VALIDATION_INFO_CLASS") +
            ", Authoritative: " + ((Authoritative as bool)? "TRUE": "FALSE") +
            ", ExtraFlags: " + Utility.DecToHexFormat(8, ExtraFlags) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 45};
    
    accepts operation NetrServerGetTrustInfo
    {
        in string TrustedDcName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string AccountName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType;
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedNewOwfPassword;
        out PENCRYPTED_NT_OWF_PASSWORD EncryptedOldOwfPassword;
        out PNL_GENERIC_RPC_DATA TrustInfo with IDL{IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrServerGetTrustInfo, TrustedDcName: " + (TrustedDcName as string) +
            ", AccountName: " + (AccountName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", SecureChannelType: " + EnumToString(SecureChannelType, "NRPC.NETLOGON_SECURE_CHANNEL_TYPE") +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 46};
    
    accepts operation OpnumUnused47{} with IDL{Opnum = 47};
    
    accepts operation DsrUpdateReadOnlyServerDnsRecords
    {
        in string ServerName
        with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ComputerName
        with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator;
        out PNETLOGON_AUTHENTICATOR ReturnAuthenticator;
        in string SiteName with IDL{PointerType = PointerKind.UniquePtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in ULONG DnsTtl;
        in out PNL_DNS_NAME_INFO_ARRAY DnsNames;
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "DsrUpdateReadOnlyServerDnsRecords, ServerName: " + (ServerName as string) +
            ", ComputerName: " + (ComputerName as string) +
            ", SiteName: " + (SiteName as string) +
            ", DnsTtl: " + (DnsTtl as string) + "seconds" +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 48};
    
    accepts operation NetrChainSetClientAttributes
    {
        in string PrimaryName
        with IDL{PointerType = PointerKind.RefPtr,
        BaseStringType = TypeOf<LOGONSRV_HANDLE>()};
        in string ChainedFromServerName
        with IDL{PointerType = PointerKind.RefPtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in string ChainedForClientName
        with IDL{PointerType = PointerKind.RefPtr,
        BaseStringType = TypeOf<wchar_t>(),
        IndirectionLevel = 1};
        in PNETLOGON_AUTHENTICATOR Authenticator
        with IDL{PointerType = PointerKind.RefPtr};
        in out PNETLOGON_AUTHENTICATOR ReturnAuthenticator
        with IDL{PointerType = PointerKind.RefPtr};
        in DWORD dwInVersion;
        in NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES[dwInVersion] pmsgIn
        with IDL{Switch_Is = dwInVersion,
        PointerType = PointerKind.RefPtr,
        IndirectionLevel = 1};
        in out DWORD pdwOutVersion
        with IDL{PointerType = PointerKind.RefPtr, IndirectionLevel = 1};
        in out NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES[pdwOutVersion] pmsgOut
        with IDL{Switch_Is = pdwOutVersion,
        PointerType = PointerKind.RefPtr,
        IndirectionLevel = 1};
        result NTSTATUS ReturnValue;
        
        override string ToString()
        {
            return "NetrChainSetClientAttributes, PrimaryName: " + (PrimaryName as string) +
            ", ChainedFromServerName: " + (ChainedFromServerName as string) +
            ", ChainedForClientName: " + (ChainedForClientName as string) +
            ", InVersion: " + (dwInVersion as string) +
            ", OutVersion: " + (pdwOutVersion as string) +
            ", ReturnValue: " + NtStatusValuesToText(ReturnValue);
        }
    }
    with IDL{Opnum = 49};
}
with IDL{Uuid = {12345678-1234-ABCD-EF00-01234567CFFB},
Version = "1.0",
Pointer_default = PointerKind.UniquePtr,
Ms_union = true};

typedef LOGONSRV_HANDLE = wchar_t with IDL{Handle = true, IndirectionLevel = 1};

type NETLOGON_VALIDATION_UAS_INFO
{
    string usrlog1_eff_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD usrlog1_priv;
    DWORD usrlog1_auth_flags;
    DWORD usrlog1_num_logons;
    DWORD usrlog1_bad_pw_count;
    DWORD usrlog1_last_logon;
    DWORD usrlog1_last_logoff;
    DWORD usrlog1_logoff_time;
    DWORD usrlog1_kickoff_time;
    DWORD usrlog1_password_age;
    DWORD usrlog1_pw_can_change;
    DWORD usrlog1_pw_must_change;
    string usrlog1_computer
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string usrlog1_domain
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string usrlog1_script_path
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    DWORD usrlog1_reserved1;
}

typedef PNETLOGON_VALIDATION_UAS_INFO = NETLOGON_VALIDATION_UAS_INFO with IDL{IndirectionLevel = 1};

typedef NET_API_STATUS = DWORD ;

type NETLOGON_LOGOFF_UAS_INFO
{
    DWORD Duration;
    USHORT LogonCount;
}

typedef PNETLOGON_LOGOFF_UAS_INFO = NETLOGON_LOGOFF_UAS_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_AUTHENTICATOR
{
    NETLOGON_CREDENTIAL Credential;
    DWORD Timestamp;
}

typedef PNETLOGON_AUTHENTICATOR = NETLOGON_AUTHENTICATOR with IDL{IndirectionLevel = 1};

type NETLOGON_CREDENTIAL
{
    array<CHAR> data with IDL{Dimensions = [8]};
}
typedef PNETLOGON_CREDENTIAL = NETLOGON_CREDENTIAL with IDL{ IndirectionLevel = 1};

pattern NETLOGON_LOGON_INFO_CLASS =
enum 
{
    NetlogonInteractiveInformation = 1,
    NetlogonNetworkInformation = 2,
    NetlogonServiceInformation = 3,
    NetlogonGenericInformation = 4,
    NetlogonInteractiveTransitiveInformation = 5,
    NetlogonNetworkTransitiveInformation = 6,
    NetlogonServiceTransitiveInformation = 7
};

type NETLOGON_LEVEL[NETLOGON_LOGON_INFO_CLASS tag]
{
    optional [|tag in {1}|] PNETLOGON_INTERACTIVE_INFO LogonInteractive
    with IDL{Case = [1]};
    optional [|tag in {5}|] PNETLOGON_INTERACTIVE_INFO LogonInteractiveTransitive
    with IDL{Case = [5]};
    optional [|tag in {3}|] PNETLOGON_SERVICE_INFO LogonService
    with IDL{Case = [3]};
    optional [|tag in {7}|] PNETLOGON_SERVICE_INFO LogonServiceTransitive
    with IDL{Case = [7]};
    optional [|tag in {2}|] PNETLOGON_NETWORK_INFO LogonNetwork
    with IDL{Case = [2]};
    optional [|tag in {6}|] PNETLOGON_NETWORK_INFO LogonNetworkTransitive
    with IDL{Case = [6]};
    optional [|tag in {4}|] PNETLOGON_GENERIC_INFO LogonGeneric
    with IDL{Case = [4]};
}
with IDL{EmptyDefault = true,
Switch_Type = TypeOf<NETLOGON_LOGON_INFO_CLASS>(),
UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_LEVEL = NETLOGON_LEVEL with IDL{IndirectionLevel = 1};

type NETLOGON_INTERACTIVE_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    ENCRYPTED_LM_OWF_PASSWORD LmOwfPassword;
    ENCRYPTED_NT_OWF_PASSWORD NtOwfPassword;
}

typedef PNETLOGON_INTERACTIVE_INFO = NETLOGON_INTERACTIVE_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_LOGON_IDENTITY_INFO
{
    RPC_UNICODE_STRING LogonDomainName;
    ULONG ParameterControl where ValidationCheck(value is NETLOGON_LOGON_IDENTITY_INFO_ParameterControl, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the ParameterControl in type NETLOGON_LOGON_IDENTITY_INFO.");
    OLD_LARGE_INTEGER Reserved where ValidationCheck((value.LowPart == 0) && (value.HighPart == 0), null, DiagnosisLevel.Error,
        "NRPC: The Reserved in type NETLOGON_LOGON_IDENTITY_INFO must be set to zero.");
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING Workstation;
}

typedef PNETLOGON_LOGON_IDENTITY_INFO = NETLOGON_LOGON_IDENTITY_INFO with IDL{IndirectionLevel = 1};

type OLD_LARGE_INTEGER
{
    ULONG LowPart;
    LONG HighPart;
}

typedef POLD_LARGE_INTEGER = OLD_LARGE_INTEGER with IDL{IndirectionLevel = 1};

type LM_OWF_PASSWORD
{
    array<CYPHER_BLOCK> data with IDL{Dimensions = [2]};
}

typedef PLM_OWF_PASSWORD = LM_OWF_PASSWORD with IDL{IndirectionLevel = 1};

typedef ENCRYPTED_LM_OWF_PASSWORD = LM_OWF_PASSWORD ;

typedef PENCRYPTED_LM_OWF_PASSWORD = ENCRYPTED_LM_OWF_PASSWORD with IDL{IndirectionLevel = 1};

type CYPHER_BLOCK
{
    array<CHAR> data with IDL{Dimensions = [8]};
}

typedef PCYPHER_BLOCK = CYPHER_BLOCK with IDL{IndirectionLevel = 1};

type NT_OWF_PASSWORD
{
    array<CYPHER_BLOCK> data with IDL{Dimensions = [2]};
}

typedef PNT_OWF_PASSWORD = NT_OWF_PASSWORD with IDL{IndirectionLevel = 1};

typedef ENCRYPTED_NT_OWF_PASSWORD = NT_OWF_PASSWORD ;

typedef PENCRYPTED_NT_OWF_PASSWORD = ENCRYPTED_NT_OWF_PASSWORD with IDL{IndirectionLevel = 1};

type NETLOGON_SERVICE_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    ENCRYPTED_LM_OWF_PASSWORD LmOwfPassword;
    ENCRYPTED_NT_OWF_PASSWORD NtOwfPassword;
}

typedef PNETLOGON_SERVICE_INFO = NETLOGON_SERVICE_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_NETWORK_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    LM_CHALLENGE LmChallenge;
    STRING NtChallengeResponse;
    STRING LmChallengeResponse;
}

typedef PNETLOGON_NETWORK_INFO = NETLOGON_NETWORK_INFO with IDL{IndirectionLevel = 1};

type LM_CHALLENGE
{
    array<CHAR> data with IDL{Dimensions = [8]};
}

type STRING
{
    USHORT Length;
    USHORT MaximumLength;
    array<CHAR> Buffer with IDL{Size_is = [MaximumLength],
    Length_is = [Length],
    IndirectionLevel = 1};
}

typedef PSTRING = STRING with IDL{IndirectionLevel = 1};

type NETLOGON_GENERIC_INFO
{
    NETLOGON_LOGON_IDENTITY_INFO Identity;
    RPC_UNICODE_STRING PackageName;
    ULONG DataLength;
    array<UCHAR> LogonData
    with IDL{Size_is = [DataLength], IndirectionLevel = 1};
}

typedef PNETLOGON_GENERIC_INFO = NETLOGON_GENERIC_INFO with IDL{IndirectionLevel = 1};

pattern NETLOGON_VALIDATION_INFO_CLASS = enum 
{
    NetlogonValidationUasInfo = 1,
    NetlogonValidationSamInfo = 2,
    NetlogonValidationSamInfo2 = 3,
    NetlogonValidationGenericInfo = 4,
    NetlogonValidationGenericInfo2 = 5,
    NetlogonValidationSamInfo4 = 6
};

type NETLOGON_VALIDATION[NETLOGON_VALIDATION_INFO_CLASS tag]
{
    optional [|tag in {2}|] PNETLOGON_VALIDATION_SAM_INFO ValidationSam
    with IDL{Case = [2]};
    optional [|tag in {3}|] PNETLOGON_VALIDATION_SAM_INFO2 ValidationSam2
    with IDL{Case = [3]};
    optional [|tag in {5}|] PNETLOGON_VALIDATION_GENERIC_INFO2 ValidationGeneric2
    with IDL{Case = [5]};
    optional [|tag in {6}|] PNETLOGON_VALIDATION_SAM_INFO4 ValidationSam4
    with IDL{Case = [6]};
}
with IDL{EmptyDefault = true,
Switch_Type = TypeOf<NETLOGON_VALIDATION_INFO_CLASS>(),
UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_VALIDATION = NETLOGON_VALIDATION with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_SAM_INFO
{
    OLD_LARGE_INTEGER LogonTime;
    OLD_LARGE_INTEGER LogoffTime;
    OLD_LARGE_INTEGER KickOffTime;
    OLD_LARGE_INTEGER PasswordLastSet;
    OLD_LARGE_INTEGER PasswordCanChange;
    OLD_LARGE_INTEGER PasswordMustChange;
    RPC_UNICODE_STRING EffectiveName;
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING LogonScript;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    USHORT LogonCount;
    USHORT BadPasswordCount;
    ULONG UserId;
    ULONG PrimaryGroupId;
    ULONG GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds
    with IDL{Size_is = [GroupCount]};
    ULONG UserFlags;
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    RPC_SID LogonDomainId with IDL{IndirectionLevel = 1};
    array<ULONG> ExpansionRoom where ValidationCheck(all (ULONG x in value) x == 0, null, DiagnosisLevel.Error,
    "NRPC: Each element of the ExpansionRoom in type NETLOGON_VALIDATION_SAM_INFO must be zero.")
    with IDL{Dimensions = [10]};
}

typedef PNETLOGON_VALIDATION_SAM_INFO = NETLOGON_VALIDATION_SAM_INFO with IDL{IndirectionLevel = 1};

type GROUP_MEMBERSHIP
{
    ULONG RelativeId;
    ULONG Attributes where ValidationCheck(value is GROUP_MEMBERSHIP_Attributes, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Attributes in type GROUP_MEMBERSHIP.");
}

typedef PGROUP_MEMBERSHIP = GROUP_MEMBERSHIP with IDL{IndirectionLevel = 1};

type USER_SESSION_KEY
{
    array<CYPHER_BLOCK> data with IDL{Dimensions = [2]};
}

typedef PUSER_SESSION_KEY = USER_SESSION_KEY with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_SAM_INFO2
{
    OLD_LARGE_INTEGER LogonTime;
    OLD_LARGE_INTEGER LogoffTime;
    OLD_LARGE_INTEGER KickOffTime;
    OLD_LARGE_INTEGER PasswordLastSet;
    OLD_LARGE_INTEGER PasswordCanChange;
    OLD_LARGE_INTEGER PasswordMustChange;
    RPC_UNICODE_STRING EffectiveName;
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING LogonScript;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    USHORT LogonCount;
    USHORT BadPasswordCount;
    ULONG UserId;
    ULONG PrimaryGroupId;
    ULONG GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds
    with IDL{Size_is = [GroupCount]};
    ULONG UserFlags;
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    RPC_SID LogonDomainId with IDL{IndirectionLevel = 1};
    array<ULONG> ExpansionRoom where ValidationCheck(value == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], null, DiagnosisLevel.Error,
    "NRPC: Each element of the ExpansionRoom in type NETLOGON_VALIDATION_SAM_INFO2 must be zero.")
    with IDL{Dimensions = [10]};
    ULONG SidCount;
    array<PNETLOGON_SID_AND_ATTRIBUTES> ExtraSids with IDL{Size_is = [SidCount]};
}

typedef PNETLOGON_VALIDATION_SAM_INFO2 = NETLOGON_VALIDATION_SAM_INFO2 with IDL{IndirectionLevel = 1};

type NETLOGON_SID_AND_ATTRIBUTES
{
    RPC_SID Sid with IDL{IndirectionLevel = 1};
    ULONG Attributes where ValidationCheck(value is NETLOGON_SID_AND_ATTRIBUTES_Attributes, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Attributes in type NETLOGON_SID_AND_ATTRIBUTES.");
}

typedef PNETLOGON_SID_AND_ATTRIBUTES = NETLOGON_SID_AND_ATTRIBUTES with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_GENERIC_INFO2
{
    ULONG DataLength;
    array<UCHAR> ValidationData
    with IDL{Size_is = [DataLength], IndirectionLevel = 1};
}

typedef PNETLOGON_VALIDATION_GENERIC_INFO2 = NETLOGON_VALIDATION_GENERIC_INFO2 with IDL{IndirectionLevel = 1};

type NETLOGON_VALIDATION_SAM_INFO4
{
    OLD_LARGE_INTEGER LogonTime;
    OLD_LARGE_INTEGER LogoffTime;
    OLD_LARGE_INTEGER KickOffTime;
    OLD_LARGE_INTEGER PasswordLastSet;
    OLD_LARGE_INTEGER PasswordCanChange;
    OLD_LARGE_INTEGER PasswordMustChange;
    RPC_UNICODE_STRING EffectiveName;
    RPC_UNICODE_STRING FullName;
    RPC_UNICODE_STRING LogonScript;
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    ushort LogonCount;
    ushort BadPasswordCount;
    IDLUlong UserId;
    IDLUlong PrimaryGroupId;
    IDLUlong GroupCount;
    array<PGROUP_MEMBERSHIP> GroupIds
    with IDL{Size_is = [GroupCount]};
    IDLUlong UserFlags;
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    RPC_SID LogonDomainId with IDL{IndirectionLevel = 1};
    array<char> LMKey with IDL{Dimensions = [8]};
    ULONG UserAccountControl;
    ULONG SubAuthStatus;
    OLD_LARGE_INTEGER LastSuccessfulILogon;
    OLD_LARGE_INTEGER LastFailedILogon;
    ULONG FailedILogonCount;
    array<ULONG> Reserved4 where ValidationCheck(value == [0], null, DiagnosisLevel.Error,
    "NRPC: The Reserved4 in type NETLOGON_VALIDATION_SAM_INFO4 must be zero.")
    with IDL{Dimensions = [1]};
    IDLUlong SidCount;
    array<PNETLOGON_SID_AND_ATTRIBUTES> ExtraSids
    with IDL{Size_is = [SidCount]};
    RPC_UNICODE_STRING DnsLogonDomainName;
    RPC_UNICODE_STRING Upn;
    RPC_UNICODE_STRING ExpansionString1 where RPCUnicodeStringValidationCheck(value, "ExpansionString1", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString2 where RPCUnicodeStringValidationCheck(value, "ExpansionString2", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString3 where RPCUnicodeStringValidationCheck(value, "ExpansionString3", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString4 where RPCUnicodeStringValidationCheck(value, "ExpansionString4", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString5 where RPCUnicodeStringValidationCheck(value, "ExpansionString5", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString6 where RPCUnicodeStringValidationCheck(value, "ExpansionString6", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString7 where RPCUnicodeStringValidationCheck(value, "ExpansionString7", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString8 where RPCUnicodeStringValidationCheck(value, "ExpansionString8", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString9 where RPCUnicodeStringValidationCheck(value, "ExpansionString9", "NETLOGON_VALIDATION_SAM_INFO4");
    RPC_UNICODE_STRING ExpansionString10 where RPCUnicodeStringValidationCheck(value, "ExpansionString10", "NETLOGON_VALIDATION_SAM_INFO4");
}

typedef PNETLOGON_VALIDATION_SAM_INFO4 = NETLOGON_VALIDATION_SAM_INFO4 with IDL{IndirectionLevel = 1};

pattern NETLOGON_SECURE_CHANNEL_TYPE = enum 
{
    NullSecureChannel = 0,
    MsvApSecureChannel = 1,
    WorkstationSecureChannel = 2,
    TrustedDnsDomainSecureChannel = 3,
    TrustedDomainSecureChannel = 4,
    UasServerSecureChannel = 5,
    ServerSecureChannel = 6,
    CdcServerSecureChannel = 7
};

type NLPR_MODIFIED_COUNT
{
    OLD_LARGE_INTEGER ModifiedCount;
}

typedef PNLPR_MODIFIED_COUNT = NLPR_MODIFIED_COUNT with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ENUM_ARRAY
{
    DWORD CountReturned;
    array<PNETLOGON_DELTA_ENUM> Deltas
    with IDL{Size_is = [CountReturned]};
}

typedef PNETLOGON_DELTA_ENUM_ARRAY = NETLOGON_DELTA_ENUM_ARRAY with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ENUM
{
    NETLOGON_DELTA_TYPE DeltaType;
    NETLOGON_DELTA_ID_UNION[DeltaType] DeltaID with IDL{Switch_Is = DeltaType};
    NETLOGON_DELTA_UNION[DeltaType] DeltaUnion with IDL{Switch_Is = DeltaType};
}

typedef PNETLOGON_DELTA_ENUM = NETLOGON_DELTA_ENUM with IDL{IndirectionLevel = 1};

pattern NETLOGON_DELTA_TYPE = enum 
{
    AddOrChangeDomain = 1,
    AddOrChangeGroup = 2,
    DeleteGroup = 3,
    RenameGroup = 4,
    AddOrChangeUser = 5,
    DeleteUser = 6,
    RenameUser = 7,
    ChangeGroupMembership = 8,
    AddOrChangeAlias = 9,
    DeleteAlias = 10,
    RenameAlias = 11,
    ChangeAliasMembership = 12,
    AddOrChangeLsaPolicy = 13,
    AddOrChangeLsaTDomain = 14,
    DeleteLsaTDomain = 15,
    AddOrChangeLsaAccount = 16,
    DeleteLsaAccount = 17,
    AddOrChangeLsaSecret = 18,
    DeleteLsaSecret = 19,
    DeleteGroupByName = 20,
    DeleteUserByName = 21,
    SerialNumberSkip = 22
};
// WORKAROUND: Bug#49810: Use array instead of directly using in union
set<NETLOGON_DELTA_TYPE> tagArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21};
type NETLOGON_DELTA_ID_UNION[NETLOGON_DELTA_TYPE tag]
{
    optional [|tag in tagArray|] ULONG
    Rid with IDL{Case = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20, 21]};
    optional [|tag in {13, 14, 15, 16, 17}|] RPC_SID Sid
    with IDL{Case = [13, 14, 15, 16, 17], IndirectionLevel = 1};
    optional [|tag in {18, 19}|] string Name
    with IDL{Case = [18, 19],
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
}
with IDL{EmptyDefault = true,
Switch_Type = TypeOf<NETLOGON_DELTA_TYPE>(),
UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_DELTA_ID_UNION = NETLOGON_DELTA_ID_UNION with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_UNION[NETLOGON_DELTA_TYPE tag]
{
    optional [|tag in {1}|] PNETLOGON_DELTA_DOMAIN DeltaDomain
    with IDL{Case = [1]};
    optional [|tag in {2}|] PNETLOGON_DELTA_GROUP DeltaGroup
    with IDL{Case = [2]};
    optional [|tag in {4}|] PNETLOGON_DELTA_RENAME_GROUP DeltaRenameGroup
    with IDL{Case = [4]};
    optional [|tag in {5}|] PNETLOGON_DELTA_USER DeltaUser
    with IDL{Case = [5]};
    optional [|tag in {7}|] PNETLOGON_DELTA_RENAME_USER DeltaRenameUser
    with IDL{Case = [7]};
    optional [|tag in {8}|] PNETLOGON_DELTA_GROUP_MEMBER DeltaGroupMember
    with IDL{Case = [8]};
    optional [|tag in {9}|] PNETLOGON_DELTA_ALIAS DeltaAlias
    with IDL{Case = [9]};
    optional [|tag in {11}|] PNETLOGON_DELTA_RENAME_ALIAS DeltaRenameAlias
    with IDL{Case = [11]};
    optional [|tag in {12}|] PNETLOGON_DELTA_ALIAS_MEMBER DeltaAliasMember
    with IDL{Case = [12]};
    optional [|tag in {13}|] PNETLOGON_DELTA_POLICY DeltaPolicy
    with IDL{Case = [13]};
    optional [|tag in {14}|] PNETLOGON_DELTA_TRUSTED_DOMAINS DeltaTDomains
    with IDL{Case = [14]};
    optional [|tag in {16}|] PNETLOGON_DELTA_ACCOUNTS DeltaAccounts
    with IDL{Case = [16]};
    optional [|tag in {18}|] PNETLOGON_DELTA_SECRET DeltaSecret
    with IDL{Case = [18]};
    optional [|tag in {20}|] PNETLOGON_DELTA_DELETE_GROUP DeltaDeleteGroup
    with IDL{Case = [20]};
    optional [|tag in {21}|] PNETLOGON_DELTA_DELETE_USER DeltaDeleteUser
    with IDL{Case = [21]};
    optional [|tag in {22}|] PNLPR_MODIFIED_COUNT DeltaSerialNumberSkip
    with IDL{Case = [22]};
}
with IDL{EmptyDefault = true,
Switch_Type = TypeOf<NETLOGON_DELTA_TYPE>(),
UnionKind = UnionKind.NonEncapsulated};
         
typedef PNETLOGON_DELTA_UNION = NETLOGON_DELTA_UNION with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_DOMAIN
{
    RPC_UNICODE_STRING DomainName;
    RPC_UNICODE_STRING OemInformation;
    OLD_LARGE_INTEGER ForceLogoff;
    USHORT MinPasswordLength;
    USHORT PasswordHistoryLength;
    OLD_LARGE_INTEGER MaxPasswordAge;
    OLD_LARGE_INTEGER MinPasswordAge;
    OLD_LARGE_INTEGER DomainModifiedCount;
    OLD_LARGE_INTEGER DomainCreationTime;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DomainLockoutInformation;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_DOMAIN");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_DOMAIN");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_DOMAIN");
    ULONG PasswordProperties;
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_DOMAIN must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_DOMAIN must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_DOMAIN must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_DOMAIN = NETLOGON_DELTA_DOMAIN with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_GROUP
{
    RPC_UNICODE_STRING Name;
    ULONG RelativeId;
    ULONG Attributes where ValidationCheck(value is NETLOGON_DELTA_GROUP_Attributes, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Attributes in type NETLOGON_DELTA_GROUP.");
    RPC_UNICODE_STRING AdminComment;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_GROUP");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_GROUP");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_GROUP");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_GROUP");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong1 in type NETLOGON_DELTA_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong2 in type NETLOGON_DELTA_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong3 in type NETLOGON_DELTA_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong4 in type NETLOGON_DELTA_GROUP must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_GROUP = NETLOGON_DELTA_GROUP with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_RENAME_GROUP
{
    RPC_UNICODE_STRING OldName;
    RPC_UNICODE_STRING NewName;
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_RENAME_GROUP");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_RENAME_GROUP");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_RENAME_GROUP");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_RENAME_GROUP");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_RENAME_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_RENAME_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_RENAME_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_RENAME_GROUP must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_RENAME_GROUP = NETLOGON_DELTA_RENAME_GROUP with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_USER
{
    RPC_UNICODE_STRING UserName;
    RPC_UNICODE_STRING FullName;
    ULONG UserId;
    ULONG PrimaryGroupId;
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive;
    RPC_UNICODE_STRING ScriptPath;
    RPC_UNICODE_STRING AdminComment;
    RPC_UNICODE_STRING WorkStations;
    OLD_LARGE_INTEGER LastLogon;
    OLD_LARGE_INTEGER LastLogoff;
    NLPR_LOGON_HOURS LogonHours;
    USHORT BadPasswordCount;
    USHORT LogonCount;
    OLD_LARGE_INTEGER PasswordLastSet;
    OLD_LARGE_INTEGER AccountExpires;
    ULONG UserAccountControl;
    ENCRYPTED_NT_OWF_PASSWORD EncryptedNtOwfPassword;
    ENCRYPTED_LM_OWF_PASSWORD EncryptedLmOwfPassword;
    UCHAR NtPasswordPresent;
    UCHAR LmPasswordPresent;
    UCHAR PasswordExpired;
    RPC_UNICODE_STRING UserComment;
    RPC_UNICODE_STRING Parameters;
    USHORT CountryCode;
    USHORT CodePage;
    NLPR_USER_PRIVATE_INFO PrivateData;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING ProfilePath;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_USER");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_USER");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_USER");
    ULONG DummyLong1;
    ULONG DummyLong2;
    ULONG DummyLong3;
    ULONG DummyLong4;
}

typedef PNETLOGON_DELTA_USER = NETLOGON_DELTA_USER with IDL{IndirectionLevel = 1};

type NLPR_LOGON_HOURS
{
    USHORT UnitsPerWeek;
    array<UCHAR> LogonHours with IDL{Size_is = [1260],
    Length_is = [(UnitsPerWeek+7)/8],
    IndirectionLevel = 1};
}

typedef PNLPR_LOGON_HOURS = NLPR_LOGON_HOURS with IDL{IndirectionLevel = 1};

type NLPR_USER_PRIVATE_INFO
{
    UCHAR SensitiveData;
    ULONG DataLength;
    array<UCHAR> Data with IDL{Size_is = [DataLength], IndirectionLevel = 1};
}

typedef PNLPR_USER_PRIVATE_INFO = NLPR_USER_PRIVATE_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_RENAME_USER
{
    RPC_UNICODE_STRING OldName;
    RPC_UNICODE_STRING NewName;
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_RENAME_USER");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_RENAME_USER");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_RENAME_USER");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_RENAME_USER");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_RENAME_USER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_RENAME_USER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_RENAME_USER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_RENAME_USER must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_RENAME_USER = NETLOGON_DELTA_RENAME_USER with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_GROUP_MEMBER
{
    array<ULONG> Members with IDL{Size_is = [MemberCount], IndirectionLevel = 1};
    array<ULONG> Attributes
    with IDL{Size_is = [MemberCount], IndirectionLevel = 1};
    ULONG MemberCount;
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_GROUP_MEMBER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_GROUP_MEMBER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_GROUP_MEMBER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_GROUP_MEMBER must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_GROUP_MEMBER = NETLOGON_DELTA_GROUP_MEMBER with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ALIAS
{
    RPC_UNICODE_STRING Name;
    ULONG RelativeId;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING Comment;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_ALIAS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_ALIAS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_ALIAS");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_ALIAS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_ALIAS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_ALIAS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_ALIAS must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_ALIAS = NETLOGON_DELTA_ALIAS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_RENAME_ALIAS
{
    RPC_UNICODE_STRING OldName;
    RPC_UNICODE_STRING NewName;
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_RENAME_ALIAS");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_RENAME_ALIAS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_RENAME_ALIAS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_RENAME_ALIAS");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_RENAME_ALIAS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_RENAME_ALIAS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_RENAME_ALIAS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_RENAME_ALIAS must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_RENAME_ALIAS = NETLOGON_DELTA_RENAME_ALIAS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ALIAS_MEMBER
{
    NLPR_SID_ARRAY Members;
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_ALIAS_MEMBER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_ALIAS_MEMBER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_ALIAS_MEMBER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_ALIAS_MEMBER must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_ALIAS_MEMBER = NETLOGON_DELTA_ALIAS_MEMBER with IDL{IndirectionLevel = 1};

type NLPR_SID_ARRAY
{
    ULONG Count;
    array<PNLPR_SID_INFORMATION> Sids
    with IDL{Size_is = [Count]};
}

typedef PNLPR_SID_ARRAY = NLPR_SID_ARRAY with IDL{IndirectionLevel = 1};

type NLPR_SID_INFORMATION
{
    RPC_SID SidPointer with IDL{IndirectionLevel = 1};
}

typedef PNLPR_SID_INFORMATION = NLPR_SID_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_POLICY
{
    ULONG MaximumLogSize;
    OLD_LARGE_INTEGER AuditRetentionPeriod;
    UCHAR AuditingMode;
    ULONG MaximumAuditEventCount;
    array<ULONG> EventAuditingOptions
    with IDL{Size_is = [MaximumAuditEventCount+1], IndirectionLevel = 1};
    RPC_UNICODE_STRING PrimaryDomainName;
    RPC_SID PrimaryDomainSid with IDL{IndirectionLevel = 1};
    NLPR_QUOTA_LIMITS QuotaLimits;
    OLD_LARGE_INTEGER ModifiedId;
    OLD_LARGE_INTEGER DatabaseCreationTime;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_POLICY");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_POLICY");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_POLICY");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_POLICY");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_POLICY must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_POLICY must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_POLICY must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_POLICY must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_POLICY = NETLOGON_DELTA_POLICY with IDL{IndirectionLevel = 1};

type NLPR_QUOTA_LIMITS
{
    ULONG PagedPoolLimit;
    ULONG NonPagedPoolLimit;
    ULONG MinimumWorkingSetSize;
    ULONG MaximumWorkingSetSize;
    ULONG PagefileLimit;
    OLD_LARGE_INTEGER Reserved where ValidationCheck((value.LowPart == 0) && (value.HighPart == 0), null, DiagnosisLevel.Error,
    "NRPC: The Reserved in type NLPR_QUOTA_LIMITS must be set to zero.");
}

typedef PNLPR_QUOTA_LIMITS = NLPR_QUOTA_LIMITS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_TRUSTED_DOMAINS
{
    RPC_UNICODE_STRING DomainName;
    ULONG NumControllerEntries;
    array<PRPC_UNICODE_STRING> ControllerNames
    with IDL{Size_is = [NumControllerEntries]};
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_TRUSTED_DOMAINS");
    ULONG TrustedPosixOffset;
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_TRUSTED_DOMAINS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_TRUSTED_DOMAINS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_TRUSTED_DOMAINS must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_TRUSTED_DOMAINS = NETLOGON_DELTA_TRUSTED_DOMAINS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_ACCOUNTS
{
    ULONG PrivilegeEntries;
    ULONG PrivilegeControl where ValidationCheck(value is NETLOGON_DELTA_ACCOUNTS_PrivilegeControl, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the PrivilegeControl in type NETLOGON_DELTA_ACCOUNTS.");
    array<ULONG> PrivilegeAttributes
    with IDL{Size_is = [PrivilegeEntries], IndirectionLevel = 1};
    array<PRPC_UNICODE_STRING> PrivilegeNames
    with IDL{Size_is = [PrivilegeEntries]};
    NLPR_QUOTA_LIMITS QuotaLimits;
    ULONG SystemAccessFlags;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_ACCOUNTS");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_ACCOUNTS");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_ACCOUNTS");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_ACCOUNTS");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_ACCOUNTS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_ACCOUNTS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_ACCOUNTS must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_ACCOUNTS must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_ACCOUNTS = NETLOGON_DELTA_ACCOUNTS with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_SECRET
{
    NLPR_CR_CIPHER_VALUE CurrentValue;
    OLD_LARGE_INTEGER CurrentValueSetTime;
    NLPR_CR_CIPHER_VALUE OldValue;
    OLD_LARGE_INTEGER OldValueSetTime;
    SECURITY_INFORMATION SecurityInformation;
    ULONG SecuritySize;
    array<UCHAR> SecurityDescriptor
    with IDL{Size_is = [SecuritySize], IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_SECRET");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_SECRET");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_SECRET");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_SECRET");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_SECRET must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_SECRET must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_SECRET must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_SECRET must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_SECRET = NETLOGON_DELTA_SECRET with IDL{IndirectionLevel = 1};

type NLPR_CR_CIPHER_VALUE
{
    ULONG Length;
    ULONG MaximumLength;
    array<UCHAR> Buffer with IDL{Size_is = [MaximumLength],
    Length_is = [Length],
    IndirectionLevel = 1};
}

typedef PNLPR_CR_CIPHER_VALUE = NLPR_CR_CIPHER_VALUE with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_DELETE_GROUP
{
    string AccountName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_DELETE_GROUP");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_DELETE_GROUP");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_DELETE_GROUP");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_DELETE_GROUP");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_DELETE_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_DELETE_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_DELETE_GROUP must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_DELETE_GROUP must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_DELETE_GROUP = NETLOGON_DELTA_DELETE_GROUP with IDL{IndirectionLevel = 1};

type NETLOGON_DELTA_DELETE_USER
{
    string AccountName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    RPC_UNICODE_STRING DummyString1 where RPCUnicodeStringValidationCheck(value, "DummyString1", "NETLOGON_DELTA_DELETE_USER");
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DELTA_DELETE_USER");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DELTA_DELETE_USER");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DELTA_DELETE_USER");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_DELTA_DELETE_USER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_DELTA_DELETE_USER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_DELTA_DELETE_USER must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_DELTA_DELETE_USER must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DELTA_DELETE_USER = NETLOGON_DELTA_DELETE_USER with IDL{IndirectionLevel = 1};

type UAS_INFO_0
{
    array<CHAR> ComputerName with IDL{Dimensions = [16]};
    ULONG TimeCreated;
    ULONG SerialNumber;
}

typedef PUAS_INFO_0 = UAS_INFO_0 with IDL{IndirectionLevel = 1};

type NETLOGON_CONTROL_QUERY_INFORMATION[DWORD tag]
{
    optional [|tag in {1}|] PNETLOGON_INFO_1 NetlogonInfo1
    with IDL{Case = [1]};
    optional [|tag in {2}|] PNETLOGON_INFO_2 NetlogonInfo2
    with IDL{Case = [2]};
    optional [|tag in {3}|] PNETLOGON_INFO_3 NetlogonInfo3
    with IDL{Case = [3]};
    optional [|tag in {4}|] PNETLOGON_INFO_4 NetlogonInfo4
    with IDL{Case = [4]};
}
with IDL{EmptyDefault = true,
Switch_Type = TypeOf<DWORD>(),
UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_CONTROL_QUERY_INFORMATION = NETLOGON_CONTROL_QUERY_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_1
{
    DWORD netlog1_flags where ValidationCheck(value is NETLOGON_INFO_1_netlog1_flags, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the netlog1_flags in type NETLOGON_INFO_1.");
    NET_API_STATUS netlog1_pdc_connection_status;
}

typedef PNETLOGON_INFO_1 = NETLOGON_INFO_1 with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_2
{
    DWORD netlog2_flags where ValidationCheck(value is NETLOGON_INFO_2_netlog2_flags, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the netlog2_flags in type NETLOGON_INFO_2.");
    NET_API_STATUS netlog2_pdc_connection_status;
    string netlog2_trusted_dc_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    NET_API_STATUS netlog2_tc_connection_status;
}

typedef PNETLOGON_INFO_2 = NETLOGON_INFO_2 with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_3
{
    DWORD netlog3_flags where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The netlog3_flags in type NETLOGON_INFO_3 must be set to zero, not " + value.ToString() + ".");
    DWORD netlog3_logon_attempts;
    DWORD netlog3_reserved1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The netlog3_reserved1 in type NETLOGON_INFO_3 must be set to zero, not " + value.ToString() + ".");
    DWORD netlog3_reserved2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The netlog3_reserved2 in type NETLOGON_INFO_3 must be set to zero, not " + value.ToString() + ".");
    DWORD netlog3_reserved3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The netlog3_reserved3 in type NETLOGON_INFO_3 must be set to zero, not " + value.ToString() + ".");
    DWORD netlog3_reserved4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The netlog3_reserved4 in type NETLOGON_INFO_3 must be set to zero, not " + value.ToString() + ".");
    DWORD netlog3_reserved5 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The netlog3_reserved5 in type NETLOGON_INFO_3 must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_INFO_3 = NETLOGON_INFO_3 with IDL{IndirectionLevel = 1};

type NETLOGON_INFO_4
{
    string netlog4_trusted_dc_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string netlog4_trusted_domain_name
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
}

typedef PNETLOGON_INFO_4 = NETLOGON_INFO_4 with IDL{IndirectionLevel = 1};

type NETLOGON_CONTROL_DATA_INFORMATION[DWORD tag]
{
    optional [|tag in {5, 6, 9, 10}|] string TrustedDomainName
    with IDL{Case = [5, 6, 9, 10],
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    optional [|tag in {65534}|] DWORD DebugFlag with IDL{Case = [65534]};
    optional [|tag in {8}|] string UserName
    with IDL{Case = [8],
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
}
with IDL{EmptyDefault = true,
Switch_Type = TypeOf<DWORD>(),
UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_CONTROL_DATA_INFORMATION = NETLOGON_CONTROL_DATA_INFORMATION with IDL{IndirectionLevel = 1};

pattern SYNC_STATE = enum 
{
    NormalState = 0,
    DomainState = 1,
    GroupState = 2,
    UasBuiltInGroupState = 3,
    UserState = 4,
    GroupMemberState = 5,
    AliasState = 6,
    AliasMemberState = 7,
    SamDoneState = 8
};

typedef PSYNC_STATE = SYNC_STATE with IDL{IndirectionLevel = 1};

type DOMAIN_NAME_BUFFER
{
    ULONG DomainNameByteCount;
    array<UCHAR> DomainNames with IDL{Size_is = [DomainNameByteCount],
    PointerType = PointerKind.UniquePtr,
    IndirectionLevel = 1};
}

typedef PDOMAIN_NAME_BUFFER = DOMAIN_NAME_BUFFER with IDL{IndirectionLevel = 1};

type DOMAIN_CONTROLLER_INFOW
{
    string DomainControllerName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string DomainControllerAddress
    with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    ULONG DomainControllerAddressType where ValidationCheck(value is DOMAIN_CONTROLLER_INFOW_DomainControllerAddressType, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the DomainControllerAddressType in type DOMAIN_CONTROLLER_INFOW.");
    GUID DomainGuid;
    string DomainName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string DnsForestName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    ULONG Flags where ValidationCheck(value is DOMAIN_CONTROLLER_INFOW_Flags, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Flags in type DOMAIN_CONTROLLER_INFOW.");
    string DcSiteName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string ClientSiteName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
}

typedef PDOMAIN_CONTROLLER_INFOW = DOMAIN_CONTROLLER_INFOW with IDL{IndirectionLevel = 1};

type NETLOGON_CAPABILITIES[DWORD tag]
{
    optional [|tag in {1}|] ULONG ServerCapabilities with IDL{Case = [1]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_CAPABILITIES = NETLOGON_CAPABILITIES with IDL{IndirectionLevel = 1};

type NETLOGON_WORKSTATION_INFORMATION[DWORD tag]
{
    optional [|tag in {1}|] PNETLOGON_WORKSTATION_INFO WorkstationInfo
    with IDL{Case = [1]};
    optional [|tag in {2}|] PNETLOGON_WORKSTATION_INFO LsaPolicyInfo
    with IDL{Case = [2]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_WORKSTATION_INFORMATION = NETLOGON_WORKSTATION_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_WORKSTATION_INFO
{
    NETLOGON_LSA_POLICY_INFO LsaPolicy;
    string DnsHostName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string SiteName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy1 where ValidationCheck(value == null, null, DiagnosisLevel.Error, 
    "NRPC: The Dummy1 in type NETLOGON_WORKSTATION_INFO must be set to NULL, not " + value.ToString() + ".")
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy2 where ValidationCheck(value == null, null, DiagnosisLevel.Error, 
    "NRPC: The Dummy2 in type NETLOGON_WORKSTATION_INFO must be set to NULL, not " + value.ToString() + ".")
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy3 where ValidationCheck(value == null, null, DiagnosisLevel.Error, 
    "NRPC: The Dummy3 in type NETLOGON_WORKSTATION_INFO must be set to NULL, not " + value.ToString() + ".")
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string Dummy4 where ValidationCheck(value == null, null, DiagnosisLevel.Error, 
    "NRPC: The Dummy4 in type NETLOGON_WORKSTATION_INFO must be set to NULL, not " + value.ToString() + ".")
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    RPC_UNICODE_STRING OsVersion;
    RPC_UNICODE_STRING OsName;
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_WORKSTATION_INFO");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_WORKSTATION_INFO");
    ULONG WorkstationFlags where ValidationCheck(value is NETLOGON_WORKSTATION_INFO_WorkstationFlags, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the WorkstationFlags in type NETLOGON_WORKSTATION_INFO.");
    ULONG KerberosSupportedEncryptionTypes;
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong3 in type NETLOGON_WORKSTATION_INFO must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong4 in type NETLOGON_WORKSTATION_INFO must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_WORKSTATION_INFO = NETLOGON_WORKSTATION_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_LSA_POLICY_INFO
{
    ULONG LsaPolicySize;
    array<UCHAR> LsaPolicy
    with IDL{Size_is = [LsaPolicySize], IndirectionLevel = 1};
}

typedef PNETLOGON_LSA_POLICY_INFO = NETLOGON_LSA_POLICY_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_DOMAIN_INFORMATION[DWORD tag]
{
    optional [|tag in {1}|] PNETLOGON_DOMAIN_INFO DomainInfo
    with IDL{Case = [1]};
    optional [|tag in {2}|] PNETLOGON_LSA_POLICY_INFO LsaPolicyInfo
    with IDL{Case = [2]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

typedef PNETLOGON_DOMAIN_INFORMATION = NETLOGON_DOMAIN_INFORMATION with IDL{IndirectionLevel = 1};

type NETLOGON_DOMAIN_INFO
{
    NETLOGON_ONE_DOMAIN_INFO PrimaryDomain;
    ULONG TrustedDomainCount;
    array<PNETLOGON_ONE_DOMAIN_INFO> TrustedDomains
    with IDL{Size_is = [TrustedDomainCount]};
    NETLOGON_LSA_POLICY_INFO LsaPolicy;
    RPC_UNICODE_STRING DnsHostNameInDs;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_DOMAIN_INFO");
    ULONG WorkstationFlags where ValidationCheck(value is NETLOGON_DOMAIN_INFO_WorkstationFlags, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the WorkstationFlags in type NETLOGON_DOMAIN_INFO.");
    ULONG SupportedEncTypes;
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong3 in type NETLOGON_DOMAIN_INFO must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
        () => "NRPC: The DummyLong4 in type NETLOGON_DOMAIN_INFO must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_DOMAIN_INFO = NETLOGON_DOMAIN_INFO with IDL{IndirectionLevel = 1};

type NETLOGON_ONE_DOMAIN_INFO
{
    RPC_UNICODE_STRING DomainName where ValidationCheck(value.Length != 0, null, DiagnosisLevel.Error, 
    "NRPC: The DomainName in type NETLOGON_ONE_DOMAIN_INFO must not be an empty string.");
    RPC_UNICODE_STRING DnsDomainName where ValidationCheck(value.Length != 0, null, DiagnosisLevel.Error, 
    "NRPC: The DnsDomainName in type NETLOGON_ONE_DOMAIN_INFO must not be an empty string.");
    RPC_UNICODE_STRING DnsForestName;
    GUID DomainGuid;
    RPC_SID DomainSid with IDL{IndirectionLevel = 1};
    RPC_UNICODE_STRING TrustExtension;
    RPC_UNICODE_STRING DummyString2 where RPCUnicodeStringValidationCheck(value, "DummyString2", "NETLOGON_ONE_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString3 where RPCUnicodeStringValidationCheck(value, "DummyString3", "NETLOGON_ONE_DOMAIN_INFO");
    RPC_UNICODE_STRING DummyString4 where RPCUnicodeStringValidationCheck(value, "DummyString4", "NETLOGON_ONE_DOMAIN_INFO");
    ULONG DummyLong1 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong1 in type NETLOGON_ONE_DOMAIN_INFO must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong2 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong2 in type NETLOGON_ONE_DOMAIN_INFO must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong3 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong3 in type NETLOGON_ONE_DOMAIN_INFO must be set to zero, not " + value.ToString() + ".");
    ULONG DummyLong4 where ValidationCheck(value == 0, null, DiagnosisLevel.Error, 
    "NRPC: The DummyLong4 in type NETLOGON_ONE_DOMAIN_INFO must be set to zero, not " + value.ToString() + ".");
}

typedef PNETLOGON_ONE_DOMAIN_INFO = NETLOGON_ONE_DOMAIN_INFO with IDL{IndirectionLevel = 1};

type NL_TRUST_PASSWORD
{
    array<WCHAR> Buffer with IDL{Dimensions = [256]};
    ULONG Length;
}

typedef PNL_TRUST_PASSWORD = NL_TRUST_PASSWORD with IDL{IndirectionLevel = 1};

type NL_SOCKET_ADDRESS
{
    array<UCHAR> lpSockaddr
    with IDL{Size_is = [iSockaddrLength], IndirectionLevel = 1};
    ULONG iSockaddrLength;
}

typedef PNL_SOCKET_ADDRESS = NL_SOCKET_ADDRESS with IDL{IndirectionLevel = 1};

type NL_SITE_NAME_ARRAY
{
    ULONG EntryCount;
    array<PRPC_UNICODE_STRING> SiteNames
    with IDL{Size_is = [EntryCount]};
}

typedef PNL_SITE_NAME_ARRAY = NL_SITE_NAME_ARRAY with IDL{IndirectionLevel = 1};

type NETLOGON_TRUSTED_DOMAIN_ARRAY
{
    DWORD DomainCount;
    array<PDS_DOMAIN_TRUSTSW> Domains
    with IDL{Size_is = [DomainCount]};
}

typedef PNETLOGON_TRUSTED_DOMAIN_ARRAY = NETLOGON_TRUSTED_DOMAIN_ARRAY with IDL{IndirectionLevel = 1};

type DS_DOMAIN_TRUSTSW
{
    string NetbiosDomainName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    string DnsDomainName
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    ULONG Flags where ValidationCheck(value is DS_DOMAIN_TRUSTSW_Flags, null, DiagnosisLevel.Error,
    "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Flags in type DS_DOMAIN_TRUSTSW.");
    ULONG ParentIndex;
    ULONG TrustType where ValidationCheck(value is DS_DOMAIN_TRUSTSW_TrustType, null, DiagnosisLevel.Error,
    "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the TrustType in type DS_DOMAIN_TRUSTSW.");
    ULONG TrustAttributes where ValidationCheck(value is DS_DOMAIN_TRUSTSW_TrustAttributes, null, DiagnosisLevel.Error,
    "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the TrustAttributes in type DS_DOMAIN_TRUSTSW.");
    RPC_SID DomainSid with IDL{IndirectionLevel = 1};
    GUID DomainGuid;
}

typedef PDS_DOMAIN_TRUSTSW = DS_DOMAIN_TRUSTSW with IDL{IndirectionLevel = 1};

type NL_SITE_NAME_EX_ARRAY
{
    ULONG EntryCount;
    array<PRPC_UNICODE_STRING> SiteNames
    with IDL{Size_is = [EntryCount]};
    array<PRPC_UNICODE_STRING> SubnetNames
    with IDL{Size_is = [EntryCount]};
}

typedef PNL_SITE_NAME_EX_ARRAY = NL_SITE_NAME_EX_ARRAY with IDL{IndirectionLevel = 1};

type LSA_FOREST_TRUST_INFORMATION
{
    ULONG RecordCount with IDL{Range = new RangePattern {Low = 0, High = 4000}};
    array<PLSA_FOREST_TRUST_RECORD> Entries
    with IDL{Size_is = [RecordCount,null], IndirectionLevel = 1};
}

typedef PLSA_FOREST_TRUST_INFORMATION = LSA_FOREST_TRUST_INFORMATION with IDL{IndirectionLevel = 1};

type LSA_FOREST_TRUST_RECORD
{
    ULONG Flags;
    LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
    LARGE_INTEGER Time;
    MIDL_logon_0002[ForestTrustType] ForestTrustData
    with IDL{Switch_Type = TypeOf<LSA_FOREST_TRUST_RECORD_TYPE>(),
    Switch_Is = ForestTrustType,
    EmbedType = true};
}

typedef PLSA_FOREST_TRUST_RECORD = LSA_FOREST_TRUST_RECORD with IDL{IndirectionLevel = 1};

pattern LSA_FOREST_TRUST_RECORD_TYPE = enum 
{
    ForestTrustTopLevelName = 0,
    ForestTrustTopLevelNameEx = 1,
    ForestTrustDomainInfo = 2
};

type MIDL_logon_0002[LSA_FOREST_TRUST_RECORD_TYPE tag]
{
    optional [|tag in {0, 1}|] LSA_RPC_UNICODE_STRING TopLevelName
    with IDL{Case = [0, 1]};
    optional [|tag in {2}|] LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo
    with IDL{Case = [2]};
    optional [|! (tag in {0, 1, 2})|] LSA_FOREST_TRUST_BINARY_DATA Data
    with IDL{Default = true};
}
with IDL{Switch_Type = TypeOf<LSA_FOREST_TRUST_RECORD_TYPE>(),
UnionKind = UnionKind.NonEncapsulated};

type LSA_FOREST_TRUST_DOMAIN_INFO
{
    RPC_SID Sid with IDL{IndirectionLevel = 1};
    LSA_RPC_UNICODE_STRING DnsName;
    LSA_RPC_UNICODE_STRING NetbiosName;
}

typedef PLSA_FOREST_TRUST_DOMAIN_INFO = LSA_FOREST_TRUST_DOMAIN_INFO with IDL{IndirectionLevel = 1};

type LSA_FOREST_TRUST_BINARY_DATA
{
    ULONG Length with IDL{Range = new RangePattern {Low = 0, High = 131072}};
    array<UCHAR> Buffer with IDL{Size_is = [Length], IndirectionLevel = 1};
}

typedef PLSA_FOREST_TRUST_BINARY_DATA = LSA_FOREST_TRUST_BINARY_DATA with IDL{IndirectionLevel = 1};

type NL_GENERIC_RPC_DATA
{
    ULONG UlongEntryCount;
    array<ULONG> UlongData
    with IDL{Size_is = [UlongEntryCount], IndirectionLevel = 1};
    ULONG UnicodeStringEntryCount;
    array<PRPC_UNICODE_STRING> UnicodeStringData
    with IDL{Size_is = [UnicodeStringEntryCount]};
}

typedef PNL_GENERIC_RPC_DATA = NL_GENERIC_RPC_DATA with IDL{IndirectionLevel = 1};

type NL_DNS_NAME_INFO_ARRAY
{
    ULONG EntryCount;
    array<PNL_DNS_NAME_INFO> DnsNamesInfo
    with IDL{Size_is = [EntryCount]};
}

typedef PNL_DNS_NAME_INFO_ARRAY = NL_DNS_NAME_INFO_ARRAY with IDL{IndirectionLevel = 1};

type NL_DNS_NAME_INFO
{
    ULONG Type where ValidationCheck(value is NL_DNS_NAME_INFO_Type, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the Type in type NL_DNS_NAME_INFO.");
    string DnsDomainInfo
    with IDL{BaseStringType = TypeOf<wchar_t>(), IndirectionLevel = 1};
    ULONG DnsDomainInfoType where ValidationCheck(value is NL_DNS_NAME_INFO_DnsDomainInfoType, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the DnsDomainInfoType in type NL_DNS_NAME_INFO.");
    ULONG Priority;
    ULONG Weight;
    ULONG Port;
    UCHAR Register;
    ULONG Status;
}

typedef PNL_DNS_NAME_INFO = NL_DNS_NAME_INFO with IDL{IndirectionLevel = 1};

typedef NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES = MIDL_logon_0003
with IDL{Switch_Type = TypeOf<DWORD>()} ;

type MIDL_logon_0003[DWORD tag]
{
    optional [|tag in {1}|] NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES_V1 V1
    with IDL{Case = [1]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type NL_IN_CHAIN_SET_CLIENT_ATTRIBUTES_V1
{
    string ClientDnsHostName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    NL_OSVERSIONINFO_V1 OsVersionInfo_V1
    with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
    string OsName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
}

type NL_OSVERSIONINFO_V1
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    array<wchar_t> szCSDVersion with IDL{Dimensions = [128]};
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask where ValidationCheck(value is NL_OSVERSIONINFO_V1_wSuiteMask, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the wSuiteMask in type NL_OSVERSIONINFO_V1.");
    UCHAR wProductType where ValidationCheck(value is NL_OSVERSIONINFO_V1_wProductType, null, DiagnosisLevel.Error,
        () => "NRPC: " + Utility.DecToHexFormat(value) + " is not a valid value for the wProductType in type NL_OSVERSIONINFO_V1.");
    UCHAR wReserved;
}

typedef NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES = MIDL_logon_0004
with IDL{Switch_Type = TypeOf<DWORD>()} ;

type MIDL_logon_0004[DWORD tag]
{
    optional [|tag in {1}|] NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES_V1 V1
    with IDL{Case = [1]};
}
with IDL{Switch_Type = TypeOf<DWORD>(), UnionKind = UnionKind.NonEncapsulated};

type NL_OUT_CHAIN_SET_CLIENT_ATTRIBUTES_V1
{
    string HubName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 1};
    string OldDnsHostName with IDL{PointerType = PointerKind.UniquePtr,
    BaseStringType = TypeOf<wchar_t>(),
    IndirectionLevel = 2};
    ULONG SupportedEncTypes
    with IDL{PointerType = PointerKind.UniquePtr, IndirectionLevel = 1};
}

typedef LSA_RPC_UNICODE_STRING = RPC_UNICODE_STRING ;
typedef PLSA_RPC_UNICODE_STRING = RPC_UNICODE_STRING with IDL{IndirectionLevel = 1};
// WORKAROUND: Bug#49374: Copy all needed type in DTYP.opn to NRPC.opn, Begin

type RPC_UNICODE_STRING
{
    ushort Length;
    ushort MaximumLength;
    array<wchar_t> Buffer with IDL{IndirectionLevel = 1, Length_is = [Length / 2], Size_is =[MaximumLength / 2]}			 
    with DisplayInfo{ToText = ArrayWCharTToText};
}

pattern UTF16String with IDL{DoNotGenerate = true} = string with BinaryEncoding{TextEncoding = TextEncoding.Unicode};

string ArrayWCharTToText(any a)
{	    
    if (a is array<wchar_t>)
    {    
       	array<wchar_t> t = a as array<wchar_t>;        
        binary temp = $[];
        		
        // WORKAROUND: Bug#63831: BinaryDecoder array<wchar> to string fail if the array count is odd number
       	if (t.Count % 2 == 1)
        {
           	t += [0];
        } 
               
        for(int i = 0; i < t.Count; i++)
        {        
           	temp += [(t[i] & 0xff) as byte] as binary;
       	    temp += [((t[i] & 0xff00) >> 8) as byte] as binary;		
        }              
       	var s = BinaryDecoder<UTF16String>(temp);
        if (s != nothing)
        {
            return (s as string);
        }
    }
    
    return null;
}

typedef PRPC_UNICODE_STRING = RPC_UNICODE_STRING with IDL{IndirectionLevel = 1};

type RPC_SID
{
    byte Revision where value == 0x01;
    byte SubAuthorityCount;
    RPC_SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    array<uint> SubAuthority with IDL{Size_is = [SubAuthorityCount], Dimensions = [null]};
}

typedef PRPC_SID = RPC_SID with IDL{IndirectionLevel = 1};

type RPC_SID_IDENTIFIER_AUTHORITY
{
    array<byte> Value where ValidationCheck((value as binary) is SidIdentifierAuthorityValue, null, "DTYP: RPC_SID_IDENTIFIER_AUTHORITY.Value, undefined value.") with IDL{Dimensions = [6]};
}

pattern SidIdentifierAuthorityValue = enum binary
{
    NullSidAuthority = $[000000000000] 
    with Documentation 
    {Description = "Specifies the NULL SID authority. It defines only the NULL well-known-SID: S-1-0-0."},
        WorldSidAuthority = $[000000000001] 
        with Documentation 
        {Description = "Specifies the World SID authority. It only defines the Everyone well-known-SID: S-1-1-0."},
            LocalSidAuthority = $[000000000002] 
            with Documentation 
            {Description = "Specifies the Local SID authority. It defines only the Local well-known-SID: S-1-2-0."},
                CreatorSidAuthority = $[000000000003] 
                with Documentation 
                {Description = "Specifies the Creator SID authority. It defines the Creator Owner, Creator Group, and Creator Owner Server well-known-SIDs: S-1-3-0, S-1-3-1, and S-1-3-2. These SIDs are used as placeholders in an access control list (ACL) and are replaced by the user, group, and machine SIDs of the security principal."},
                    NonUniqueAuthority = $[000000000004] 
                    with Documentation {Description = "Not used."},
                    NtAuthority = $[000000000005]
                    with Documentation
                    {Description = "Specifies the windows_nt security subsystem SID authority. It defines all other SIDs in the forest."},
                        SecurityMandatoryLabelAuthority = $[000000000010]
                        with Documentation
                        {Description = "Specifies the Mandatory label authority. It defines the integrity level SIDs."},
                            SecurityAppPackageAuthority = $[00000000000F]
                            with Documentation
                            {Description = "Specifies the application package authority. It defines application capability SIDs."}
                            } with Documentation {EmbeddedType = true}, IDL{DoNotGenerate = true};


                            // NTSTATUS is int in DOC, but it may be a mistake
                            // WORKAROUND: Bug 41303 [RPC TDGen] long type should be defined as int in OPN and translated to long during OPN->IDL
                            typedef NTSTATUS = uint
                            with Documentation
                            {Description = "NTSTATUS values are used to communicate system information. They are of four types: success values, information values, warnings, and error values, as specified in [MS-ERREF]."};

                                typedef SECURITY_INFORMATION = DWORD
                                with Documentation
                                {Description = "An unsigned 32-bit integer specifies portions of a SECURITY_DESCRIPTOR by means of bit flags. Individual bit values (combinable with the bitwise OR operation) are as shown in the following table."};

                                    typedef PSECURITY_INFORMATION = SECURITY_INFORMATION with IDL{IndirectionLevel = 1};

                                    type LARGE_INTEGER
                                    {
                                        long QuadPart with DisplayInfo{ToText = LargeInteger2Hex};

                                        override string ToString()
                                        {
                                            return "QuadPart =" + " " + Utility.DecToHexFormat(QuadPart as uint);
                                        }
    
                                        static string LargeInteger2Hex(any i)
                                        {
                                            return (i as string) + " (" + Utility.DecToHexFormat(i as uint) + ")";
                                        }   
                                    }

                                    typedef PLARGE_INTEGER = LARGE_INTEGER with IDL{IndirectionLevel = 1};

                                    typedef GUID = guid;
                                    // WORKAROUND: Bug#49374: Copy all needed type in DTYP.opn to NRPC.opn, End

                                    //---------------------------- Not defined in IDL ----------------------------//
                                    bool RPCUnicodeStringValidationCheck(RPC_UNICODE_STRING rpcUnicodeString, string fieldName, string typeName)
                                    {
                                        return ValidationCheck((rpcUnicodeString.Length == 0) && (rpcUnicodeString.MaximumLength == 0) && (rpcUnicodeString.Buffer == null), null, DiagnosisLevel.Error, 
                                        "NRPC: The " + fieldName + " in type " + typeName + " must contain 0 for the Length field, 0 for the MaximumLength field, and NULL for the Buffer field.");
                                    }
                                    // 2.2.1.2.1   DOMAIN_CONTROLLER_INFOW
                                    pattern DOMAIN_CONTROLLER_INFOW_Flags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000004,
                                        C = 0x00000008,
                                        D = 0x00000010,
                                        E = 0x00000020,
                                        F = 0x00000040,
                                        G = 0x00000080,
                                        H = 0x00000100,
                                        I = 0x00000200,
                                        J = 0x00000400,
                                        K = 0x00000800,
                                        L = 0x00001000,
                                        P = 0x00002000,
                                        Q = 0x00004000,
                                        M = 0x20000000,
                                        N = 0x40000000,
                                        O = 0x80000000,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.3.6   NETLOGON_WORKSTATION_INFO
                                    pattern NETLOGON_WORKSTATION_INFO_WorkstationFlags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.3.11   NETLOGON_DOMAIN_INFO
                                    pattern NETLOGON_DOMAIN_INFO_WorkstationFlags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.3.15   NL_OSVERSIONINFO_V1
                                    pattern NL_OSVERSIONINFO_V1_wSuiteMask = flags USHORT
                                    {
                                        VER_SUITE_BACKOFFICE = 0x00000004,
                                        VER_SUITE_BLADE = 0x00000400,
                                        VER_SUITE_COMPUTE_SERVER = 0x00004000,
                                        VER_SUITE_DATACENTER = 0x00000080,
                                        VER_SUITE_ENTERPRISE = 0x00000002,
                                        VER_SUITE_EMBEDDENT = 0x00000040,
                                        VER_SUITE_PERSONAL = 0x00000200,
                                        VER_SUITE_SINGLEUSERTS = 0x00000100,
                                        VER_SUITE_SMALLBUSINESS = 0x00000001,
                                        VER_SUITE_SMALLBUSINESS_RESTRICTED = 0x00000020,
                                        VER_SUITE_STORAGE_SERVER = 0x00002000,
                                        VER_SUITE_TERMINAL = 0x00000010,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.4.7   NETLOGON_SID_AND_ATTRIBUTES
                                    pattern NETLOGON_SID_AND_ATTRIBUTES_Attributes  = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                        D = 0x20000000,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.4.10   GROUP_MEMBERSHIP
                                    pattern GROUP_MEMBERSHIP_Attributes = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                    } with IDL{DoNotGenerate = true};

                                    //  2.2.1.5.13   NETLOGON_DELTA_GROUP
                                    pattern NETLOGON_DELTA_GROUP_Attributes = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.4.15   NETLOGON_LOGON_IDENTITY_INFO
                                    pattern NETLOGON_LOGON_IDENTITY_INFO_ParameterControl = flags ULONG
                                    {
                                        A = 0x00000002,
                                        B = 0x00000004,
                                        C = 0x00000008,
                                        D = 0x00000010,
                                        E = 0x00000020,
                                        F = 0x00000040,
                                        G = 0x00000080,
    
                                        H = 0x00000100,
                                        I = 0x00000200,
                                        J = 0x00000400,
                                        K = 0x00000800,
                                        L = 0x00001000,
                                        M = 0x00002000,
                                        N = 0x00004000,
    
                                        O = 0x00010000,
                                        P = 0x00100000,
    
                                        Q = 0x01000000,
                                        R = 0x02000000,
                                        S = 0x04000000,
                                        T = 0x08000000,
                                        U = 0x10000000,
                                        V = 0x20000000,
                                        W = 0x40000000,
                                        X = 0x80000000,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.5.3   NETLOGON_DELTA_ACCOUNTS
                                    pattern NETLOGON_DELTA_ACCOUNTS_PrivilegeControl = flags ULONG
                                    {
                                        A = 0x00000001,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.6.2   DS_DOMAIN_TRUSTSW
                                    pattern DS_DOMAIN_TRUSTSW_Flags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                        D = 0x00000008,
                                        E = 0x00000010,
                                        F = 0x00000020,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.6.2   DS_DOMAIN_TRUSTSW
                                    pattern DS_DOMAIN_TRUSTSW_TrustAttributes = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                        D = 0x00000008,
                                        E = 0x00000010,
                                        F = 0x00000020,
                                        G = 0x00000040,
                                        H = 0x00400000,
                                        I = 0x00800000,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.7.2   NETLOGON_INFO_1
                                    pattern NETLOGON_INFO_1_netlog1_flags = flags DWORD
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                        D = 0x00000008,
                                        E = 0x00000010,
                                        F = 0x00000020,
                                        G = 0x00000040,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.7.3   NETLOGON_INFO_2
                                    pattern NETLOGON_INFO_2_netlog2_flags = flags DWORD
                                    {
                                        A = 0x00000010,
                                        B = 0x00000020,
                                        C = 0x00000080,
                                    } with IDL{DoNotGenerate = true};

                                    // 3.1.4.2   Netlogon Negotiable Options
                                    pattern NetlogonNegotiableOptions = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                        D = 0x00000008,
                                        E = 0x00000010,
                                        F = 0x00000020,
                                        G = 0x00000040,
                                        H = 0x00000080,
    
                                        I = 0x00000100,
                                        J = 0x00000200,
                                        K = 0x00000400,
                                        L = 0x00000800,
                                        M = 0x00001000,
                                        N = 0x00002000,
                                        O = 0x00004000,
                                        P = 0x00008000,
    
                                        Q = 0x00010000,
                                        R = 0x00020000,
                                        S = 0x00040000,
                                        T = 0x00080000,
                                        U = 0x00100000,
                                        V = 0x00200000,
    
                                        W = 0x01000000,
                                        X = 0x20000000,
                                        Y = 0x40000000,
                                    } with IDL{DoNotGenerate = true};

                                    // 3.5.4.3.1   DsrGetDcNameEx2 (Opnum 34)
                                    pattern DsrGetDcNameEx2_AllowableAccountControlBits = flags ULONG
                                    {
                                        A = 0x00000100,
                                        B = 0x00000200,
                                        C = 0x00000800,
                                        D = 0x00001000,
                                        E = 0x00002000,
                                        F = 0x02000000,
                                    } with IDL{DoNotGenerate = true};

                                    pattern DsrGetDcName_Flags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000010,
                                        C = 0x00000020,
                                        D = 0x00000040,
                                        E = 0x00000080,
    
                                        F = 0x00000100,
                                        G = 0x00000200,
                                        H = 0x00000400,
                                        I = 0x00000800,
                                        J = 0x00001000,
                                        K = 0x00002000,
                                        L = 0x00004000,
                                        M = 0x00008000,
    
                                        N = 0x00010000,
                                        O = 0x00020000,
                                        P = 0x00040000,
                                        Q = 0x00080000,
                                        T = 0x00100000,
                                        U = 0x00200000,
    
                                        R = 0x40000000,
                                        S = 0x80000000,
                                    } with IDL{DoNotGenerate = true};

                                    pattern DsrGetDcNameEx_Flags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000010,
                                        C = 0x00000020,
                                        D = 0x00000040,
                                        E = 0x00000080,
    
                                        F = 0x00000100,
                                        G = 0x00000200,
                                        H = 0x00000400,
                                        I = 0x00000800,
                                        J = 0x00001000,
                                        K = 0x00002000,
                                        L = 0x00004000,
                                        M = 0x00008000,
    
                                        N = 0x00010000,
                                        O = 0x00020000,
                                        P = 0x00040000,
                                        Q = 0x00080000,
                                        T = 0x00100000,
                                        U = 0x00200000,
    
                                        R = 0x40000000,
                                        S = 0x80000000,
                                    } with IDL{DoNotGenerate = true};

                                    pattern DsrGetDcNameEx2_Flags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000010,
                                        C = 0x00000020,
                                        D = 0x00000040,
                                        E = 0x00000080,
    
                                        F = 0x00000100,
                                        G = 0x00000200,
                                        H = 0x00000400,
                                        I = 0x00000800,
                                        J = 0x00001000,
                                        K = 0x00002000,
                                        L = 0x00004000,
                                        M = 0x00008000,
    
                                        N = 0x00010000,
                                        O = 0x00020000,
                                        P = 0x00040000,
                                        Q = 0x00080000,
                                        T = 0x00100000,
                                        U = 0x00200000,
    
                                        R = 0x40000000,
                                        S = 0x80000000,
                                    } with IDL{DoNotGenerate = true};

                                    // 3.5.4.7.1   DsrEnumerateDomainTrusts (Opnum 40)
                                    pattern DsrEnumerateDomainTrusts_Flags = flags ULONG
                                    {
                                        A = 0x00000001,
                                        B = 0x00000002,
                                        C = 0x00000004,
                                        D = 0x00000008,
                                        E = 0x00000010,
                                        F = 0x00000020,
                                    } with IDL{DoNotGenerate = true};

                                    // 3.5.4.7.5   DsrGetForestTrustInformation (Opnum 43)
                                    pattern DsrGetForestTrustInformation_Flags= flags DWORD
                                    {
                                        A = 0x00000001,
                                    } with IDL{DoNotGenerate = true};

                                    // 3.5.4.8.5   NetrLogonSetServiceBits (Opnum 22)
                                    pattern NetrLogonSetServiceBits_ServiceBits = flags DWORD
                                    {
                                        A = 0x00000040,
                                        B = 0x00000200,
                                        C = 0x00002000,
                                    } with IDL{DoNotGenerate = true};

                                    // 3.5.4.8.5   NetrLogonSetServiceBits (Opnum 22)
                                    pattern NetrLogonSetServiceBits_ServiceBitsOfInterest = flags DWORD
                                    {
                                        A = 0x00000040,
                                        B = 0x00000200,
                                        C = 0x00002000,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.2.1   DOMAIN_CONTROLLER_INFOW
                                    pattern DOMAIN_CONTROLLER_INFOW_DomainControllerAddressType = enum ULONG
                                    {
                                        IPAddress = 0x00000001,
                                        NetBIOSName = 0x00000002,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.2.5   NL_DNS_NAME_INFO
                                    pattern NL_DNS_NAME_INFO_Type = enum ULONG
                                    {
                                        NlDnsLdapAtSite = 22,
                                        NlDnsGcAtSite = 25,
                                        NlDnsDsaCname = 28,
                                        NlDnsKdcAtSite = 30,
                                        NlDnsDcAtSite = 32,
                                        NlDnsRfc1510KdcAtSite = 34,
                                        NlDnsGenericGcAtSite = 36,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.2.5   NL_DNS_NAME_INFO
                                    pattern NL_DNS_NAME_INFO_DnsDomainInfoType = enum ULONG
                                    {
                                        NlDnsDomainName = 1,
                                        NlDnsDomainNameAlias = 2,
                                        NlDnsForestName = 3,
                                        NlDnsForestNameAlias = 4,
                                        NlDnsNdncDomainName = 5,
                                        NlDnsRecordName = 6,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.3.15   NL_OSVERSIONINFO_V1
                                    pattern NL_OSVERSIONINFO_V1_wProductType = enum UCHAR
                                    {
                                        VER_NT_DOMAIN_CONTROLLER = 0x0000002,
                                        VER_NT_SERVER = 0x0000003,
                                        VER_NT_WORKSTATION = 0x0000001,
                                    } with IDL{DoNotGenerate = true};

                                    // 2.2.1.6.2   DS_DOMAIN_TRUSTSW
                                    pattern DS_DOMAIN_TRUSTSW_TrustType = enum ULONG
                                    {
                                        WindowsNTDomain = 0x00000001,
                                        WindowsADBasedDomain = 0x00000002,
                                        MITKerberosRealm = 0x00000003,
                                        DCERealm = 0x00000004,
                                    } with IDL{DoNotGenerate = true};

                                    // 3.5.4.4.9   NetrLogonGetDomainInfo (Opnum 29)
                                    pattern NetrLogonGetDomainInfo_Level = enum DWORD
                                    {
                                        NetlogopnDomainInfo = 0x00000001,
                                        NetlogonLSAPolicyInfo = 0x00000002,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrDatabaseDeltas_DatabaseID = enum DWORD
                                    {
                                        SAMDatabase = 0x00000001,
                                        SAMBuiltInDatabase = 0x00000002,
                                        LSADatabase = 0x00000003,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrDatabaseSync_DatabaseID = enum DWORD
                                    {
                                        SAMDatabase = 0x00000001,
                                        SAMBuiltInDatabase = 0x00000002,
                                        LSADatabase = 0x00000003,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrDatabaseSync2_DatabaseID = enum DWORD
                                    {
                                        SAMDatabase = 0x00000001,
                                        SAMBuiltInDatabase = 0x00000002,
                                        LSADatabase = 0x00000003,
                                    } with IDL{DoNotGenerate = true};

                                    pattern DBChangeInfo_DatabaseID = enum DWORD
                                    {
                                        SAMDatabase = 0x00000001,
                                        SAMBuiltInDatabase = 0x00000002,
                                        LSADatabase = 0x00000003,
                                    } with IDL{DoNotGenerate = true};

                                    pattern ChangeLogEntry_DatabaseID = enum DWORD
                                    {
                                        SAMDatabase = 0x00000001,
                                        SAMBuiltInDatabase = 0x00000002,
                                        LSADatabase = 0x00000003,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrLogonControl_QueryLevel = enum DWORD
                                    {
                                        NetlogonInfo1 = 0x00000001,
                                        NetlogonInfo2 = 0x00000002,
                                        NetlogonInfo3 = 0x00000003,
                                        NetlogonInfo4 = 0x00000004,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrLogonControl2_QueryLevel = enum DWORD
                                    {
                                        NetlogonInfo1 = 0x00000001,
                                        NetlogonInfo2 = 0x00000002,
                                        NetlogonInfo3 = 0x00000003,
                                        NetlogonInfo4 = 0x00000004,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrLogonControl2Ex_QueryLevel = enum DWORD
                                    {
                                        NetlogonInfo1 = 0x00000001,
                                        NetlogonInfo2 = 0x00000002,
                                        NetlogonInfo3 = 0x00000003,
                                        NetlogonInfo4 = 0x00000004,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrLogonControl_FunctionCode = enum DWORD
                                    {
                                        NETLOGON_CONTROL_QUERY = 0x00000001,
                                        NETLOGON_CONTROL_REPLICATE = 0x00000002,
                                        NETLOGON_CONTROL_SYNCHRONIZE = 0x00000003,
                                        NETLOGON_CONTROL_PDC_REPLICATE = 0x00000004,
                                        NETLOGON_CONTROL_REDISCOVER = 0x00000005,
                                        NETLOGON_CONTROL_TC_QURY = 0x00000006,
                                        NETLOGON_CONTROL_TRANSPORT_NOTIFY = 0x00000007,
                                        NETLOGON_CONTROL_FIND_USER = 0x00000008,
                                        NETLOGON_CONTROL_CHANGE_PASSWORD = 0x00000009,
                                        NETLOGON_CONTROL_TC_VERIFY = 0x0000000A,
                                        NETLOGON_CONTROL_FORCE_DNS_REG = 0x0000000B,
                                        NETLOGON_CONTROL_QUERY_DNS_REG = 0x0000000C,
                                        NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 0x0000FFFC,
                                        NETLOGON_CONTROL_TRUNCATE_LOG = 0x0000FFFD,
                                        NETLOGON_CONTROL_SET_DBFLAG = 0x0000FFFE,
                                        NETLOGON_CONTROL_BREAKPOINT = 0x0000FFFF,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrLogonControl2_FunctionCode = enum DWORD
                                    {
                                        NETLOGON_CONTROL_QUERY = 0x00000001,
                                        NETLOGON_CONTROL_REPLICATE = 0x00000002,
                                        NETLOGON_CONTROL_SYNCHRONIZE = 0x00000003,
                                        NETLOGON_CONTROL_PDC_REPLICATE = 0x00000004,
                                        NETLOGON_CONTROL_REDISCOVER = 0x00000005,
                                        NETLOGON_CONTROL_TC_QURY = 0x00000006,
                                        NETLOGON_CONTROL_TRANSPORT_NOTIFY = 0x00000007,
                                        NETLOGON_CONTROL_FIND_USER = 0x00000008,
                                        NETLOGON_CONTROL_CHANGE_PASSWORD = 0x00000009,
                                        NETLOGON_CONTROL_TC_VERIFY = 0x0000000A,
                                        NETLOGON_CONTROL_FORCE_DNS_REG = 0x0000000B,
                                        NETLOGON_CONTROL_QUERY_DNS_REG = 0x0000000C,
                                        NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 0x0000FFFC,
                                        NETLOGON_CONTROL_TRUNCATE_LOG = 0x0000FFFD,
                                        NETLOGON_CONTROL_SET_DBFLAG = 0x0000FFFE,
                                        NETLOGON_CONTROL_BREAKPOINT = 0x0000FFFF,
                                    } with IDL{DoNotGenerate = true};

                                    pattern NetrLogonControl2Ex_FunctionCode = enum DWORD
                                    {
                                        NETLOGON_CONTROL_QUERY = 0x00000001,
                                        NETLOGON_CONTROL_REPLICATE = 0x00000002,
                                        NETLOGON_CONTROL_SYNCHRONIZE = 0x00000003,
                                        NETLOGON_CONTROL_PDC_REPLICATE = 0x00000004,
                                        NETLOGON_CONTROL_REDISCOVER = 0x00000005,
                                        NETLOGON_CONTROL_TC_QURY = 0x00000006,
                                        NETLOGON_CONTROL_TRANSPORT_NOTIFY = 0x00000007,
                                        NETLOGON_CONTROL_FIND_USER = 0x00000008,
                                        NETLOGON_CONTROL_CHANGE_PASSWORD = 0x00000009,
                                        NETLOGON_CONTROL_TC_VERIFY = 0x0000000A,
                                        NETLOGON_CONTROL_FORCE_DNS_REG = 0x0000000B,
                                        NETLOGON_CONTROL_QUERY_DNS_REG = 0x0000000C,
                                        NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 0x0000FFFC,
                                        NETLOGON_CONTROL_TRUNCATE_LOG = 0x0000FFFD,
                                        NETLOGON_CONTROL_SET_DBFLAG = 0x0000FFFE,
                                        NETLOGON_CONTROL_BREAKPOINT = 0x0000FFFF,
                                    } with IDL{DoNotGenerate = true};

                                    // Future Reference: Need add missing block type after custom marshaling is supported in Bug 50404
                                    // 2.2.1.2.4.1   IPv4 Address Structure
                                    type IPv4Sockaddr
                                    {
                                        USHORT Family where value == 0x0002;
                                        USHORT Port;
                                        IPv4Address Address;
                                        binary Zero with BinaryEncoding{Length = 8};
    
                                        override string ToString()
                                        {
                                            return Address.ToString() + ":" + (Port as string);
                                        }
                                    } with IDL{DoNotGenerate = true};

                                    type IPv4Address
                                    {
                                        binary Octets with BinaryEncoding{Length = 4};
    
                                        override string ToString()
                                        {
                                            array<byte> bytes = Octets as array<byte>;
                                            // Memo: Using array index may fail if encounter trucated messages.
                                            int counter = 0;
                                            string ip;
                                            foreach (byte b in bytes)
                                            {
                                                counter += 1;
                                                ip = ip + (b as string);
                                                if (counter < bytes.Count)
                                                {
                                                    ip = ip + ".";
                                                }
                                            }
                                            return ip;
                                        }
                                    } with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.2.4.2   IPv6 Address Structure
                                    //type IPv6SockAddr
                                    //{
                                    //USHORT Family where value == 0x0017;
                                    //USHORT Port;
                                    //ULONG FlowInfo where value == 0x0000;
                                    //IPv6Address Address;
                                    //ULONG ScopeId;
                                    //
                                    //override string ToString()
                                    //{
                                    //return Address.ToString() + ":" + (Port as string);
                                    //}
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //type IPv6Address
                                    //{
                                    //binary Octets with BinaryEncoding {Length = 16};
                                    //
                                    //override string ToString()
                                    //{
                                    //string ip = "";
                                    //array<byte> byteArr = Octets as array<byte>;
                                    //for (int index = 0; index < byteArr.Count; index += 2)
                                    //{
                                    //int b = (byteArr[index] << 8)  + byteArr[index + 1]; 
                                    //ip += (b == 0) ? "0:" : (Utility.ConvertDecToHex(b as uint) + ":");
                                    //}    
                                    //return ip.Segment(0, ip.Count - 1);
                                    //}
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.3.1   NL_AUTH_MESSAGE
                                    //type NL_Auth_Message
                                    //{
                                    //NL_Auth_Message_MessageType MessageType;
                                    //NL_Auth_Message_Flags Flags;
                                    //array<string> Buffer where (value == nothing || (value != null && value.Count == FlagToInt(Flags << (32 - 5))));
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //uint FlagToInt(ULONG flag)
                                    //{
                                    //uint num = 0;
                                    //while (flag > 0)
                                    //{
                                    //flag = (flag << 1);
                                    //num ++;
                                    //}
                                    //return num;
                                    //}
                                    //
                                    //pattern NL_Auth_Message_MessageType = enum ULONG
                                    //{
                                    //NegotiateRequest = 0x00000000,
                                    //NegotiateResponse  = 0x00000001,
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //pattern NL_Auth_Message_Flags = flags ULONG
                                    //{
                                    //A = 0x00000001,
                                    //B = 0x00000002,
                                    //C = 0x00000004,
                                    //D = 0x00000008,
                                    //E = 0x00000010,
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.3.2   NL_AUTH_SIGNATURE
                                    //type NL_AUTH_SIGNATURE
                                    //{
                                    //USHORT SignatureAlgorithm where value == 0x0077 with BinaryEncoding{Endian = Endian.Little};
                                    //NL_AUTH_SIGNATURE_SealAlgorithm SealAlgorithm with BinaryEncoding{Endian = Endian.Little};
                                    //USHORT Pad where value == 0xFFFF;
                                    //USHORT Flags where value == 0x0000;
                                    //ULONG64 SequenceNumber with BinaryEncoding{Endian = Endian.Little};
                                    //binary Checksum with BinaryEncoding{Length = 8};
                                    //binary Confounder with BinaryEncoding{Length = 8};
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //pattern NL_AUTH_SIGNATURE_SealAlgorithm = enum USHORT
                                    //{
                                    //NotEncrypted = 0xFFFF,
                                    //EncryptedWithRC4  = 0x007A,
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.3.3   NL_AUTH_SHA2_SIGNATURE
                                    //type NL_AUTH_SHA2_SIGNATURE
                                    //{
                                    //USHORT SignatureAlgorithm where value == 0x0013 with BinaryEncoding{Endian = Endian.Little};
                                    //NL_AUTH_SHA2_SIGNATURE_SealAlgorithm SealAlgorithm with BinaryEncoding{Endian = Endian.Little};
                                    //USHORT Pad where value == 0xFFFF;
                                    //USHORT Flags where value == 0x0000;
                                    //ULONG64 SequenceNumber with BinaryEncoding{Endian = Endian.Little};
                                    //ULONG64 Checksum with BinaryEncoding{Length = 32};
                                    //binary Confounder with BinaryEncoding{Length = 8};
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //pattern NL_AUTH_SHA2_SIGNATURE_SealAlgorithm = enum USHORT
                                    //{
                                    //NotEncrypted = 0xFFFF,
                                    //EncryptedWithAES128  = 0x001A,
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.3.8   NL_PASSWORD_VERSION
                                    //type NL_PASSWORD_VERSION
                                    //{
                                    //ULONG ReservedField;
                                    //ULONG PasswordVersionNumber;
                                    //ULONG PasswordVersionPresent;
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.3.10   NETLOGON_ONE_DOMAIN_INFO
                                    //type NETLOGON_ONE_DOMAIN_INFO_TrustExtension
                                    //{
                                    //ULONG Flags;
                                    //ULONG ParentIndex;
                                    //ULONG TrustType;
                                    //ULONG TrustAttributes;
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.5.1   NETLOGON_DB_CHANGE (Announcement) Message
                                    //type NETLOGON_DB_CHANGE
                                    //{
                                    //USHORT MessageType where value == 0x000A;
                                    //DWORD LowSerialNumber;
                                    //ULONG DateAndTime;
                                    //ULONG Pulse;
                                    //ULONG Random;
                                    //string PrimaryDCName;
                                    //string DomainName;
                                    //string UnicodePrimaryDCName;
                                    //string UnicodeDomainName;
                                    //ULONG DBCount;
                                    //array<DBChangeInfo> Route with BinaryEncoding{Length = DBCount};
                                    //ULONG DomainSidSize;
                                    //binary DomainSid with BinaryEncoding{Length = DomainSidSize};
                                    //ULONG MessageFormatVersion where value == 0x00000001;
                                    //ULONG MessageToken where value == 0xFFFFFFFF;
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //type DBChangeInfo
                                    //{
                                    //DBChangeInfo_DatabaseID DBIndex;
                                    //ULONG64 LargeSerialNumber;
                                    //ULONG64 DateAndTime;
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 2.2.1.5.15   NLPR_USER_PRIVATE_INFO
                                    //type NLPR_USER_PRIVATE_INFO_Data
                                    //{
                                    //ULONG DataType where value == 0x00000002;
                                    //USHORT LmLength where (value == 0x0010 || value == 0x0000);
                                    //USHORT LmMaximumLength  where (value == LmLength);
                                    //ULONG Unused1 where value == 0x00000000;
                                    //array<BYTE> LmHash with BinaryEncoding{Length = 16};
                                    //USHORT NtLength where (value == 0x0010 || value == 0x0000);
                                    //USHORT NtMaximumLength where (value == NtLength);
                                    //ULONG Unused2 where value == 0x00000000;
                                    //array<BYTE> NtHash with BinaryEncoding{Length = 16};
                                    //USHORT LmHistoryLength;
                                    //USHORT LmHistoryMaximumLength where (value == LmHistoryLength);
                                    //ULONG Unused3 where value == 0x00000000;
                                    //USHORT NtHistoryLength;
                                    //USHORT NtHistoryMaximumLength where (value == NtHistoryLength);
                                    //ULONG Unused4 where value == 0x00000000;
                                    //array<BYTE> NtHistoryArray with BinaryEncoding{Length = (NtHistoryLength / 2) as uint};
                                    //array<BYTE> LmHistoryArray with BinaryEncoding{Length = (LmHistoryMaximumLength / 2) as uint};
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //// 3.5.4.6.4   NetrDatabaseRedo (Opnum 17)
                                    //type CHANGELOG_ENTRY
                                    //{
                                    //ULONG64 SerialNumber;
                                    //ULONG ObjectRid;
                                    //ChangeLogEntryFlags Flags;
                                    //ChangeLogEntry_DatabaseID DBIndex;
                                    //BYTE DeltaType;
                                    //optional RPC_SID ObjectSid;
                                    //optional string ObjectName;
                                    //} with IDL{DoNotGenerate = true};
                                    //
                                    //pattern CHANGELOG_ENTRY_Flags = flags ULONG
                                    //{
                                    //A = 0x00000001,
                                    //B = 0x00000002,
                                    //C = 0x00000004,
                                    //D = 0x00000008,
                                    //E = 0x00000010,
                                    //} with IDL{DoNotGenerate = true};
                                    //
