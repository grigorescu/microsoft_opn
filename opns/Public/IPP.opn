protocol IPP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Internet Printing Protocol/1.1",
    ShortName = "IPP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2910"},
            new Reference{Name = "RFC 2911"},
            new Reference{Name = "RFC 3380"},
            new Reference{Name = "RFC 3382"},
            new Reference{Name = "RFC 3995"},
            new Reference{Name = "RFC 3996"},
            new Reference{Name = "pwg5100.5", Link = "http://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml"},
            new Reference{Name = "Vendor Operation Codes", Link = "http://www.pwg.org/ipp/opcodes/ippopcodes.html"},
            
        ],
    RevisionSummary =    
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "11/30/2011"}
        ]
};

using Standard;
using Utility;
using Ethernet;
using HTTP;
using ERREF;

endpoint Server 
    over HTTP.Server 
    provides Messages consumes Messages;

client endpoint Client connected to Server;

autostart actor IPPOverHTTP(HTTP.Server server)
{
    process server accepts p:HttpContract.Request where p.HTTPContentType != null && (p.HTTPContentType as HeaderFieldType).Value.Contains("application/ipp") && p.Payload.Count != 0
    {            
        switch (p.Payload)
        {
            case m:Messages.Request from BinaryDecoder<Messages.Request> =>
                dispatch endpoint IPP.Server accepts m;
            default => 
                ThrowDecodingException("IPP Request");
        }
    }
    
    process server issues p:HttpContract.Response where p.HTTPContentType != null && (p.HTTPContentType as HeaderFieldType).Value.Contains("application/ipp") && p.Payload.Count != 0
    {
        switch (p.Payload)
        {
            case m:Messages.Response from BinaryDecoder<Messages.Response> =>
                dispatch endpoint IPP.Server issues m;
            default => 
                ThrowDecodingException("IPP Reponse");
        }
    }
}

contract Messages
{
    message Request
    {
        (byte where value == 0x01) Major;
        (byte where value == 0x00) Minor;
        OperationsID OperationId;
        uint RequestId;
        optional array<AttributeTypeGroup> AttributeTypeGroups;
        EndOfAttributesTag EndOfAttributesTag;
        binary Data;
        override string ToString()
        {
            switch (OperationId)
            {
                case 2     => return "Print-Job";
                case 3     => return "Print-URI";
                case 4     => return "Validate-Job";
                case 5     => return "Create-Job";
                case 6     => return "Send-Document";
                case 7     => return "Send-URI";
                case 8     => return "Cancel-Job";
                case 9     => return "Get-Job-Attributes";
                case 10    => return "Get-Job";
                case 11    => return "Get-Printer-Attributes";
                case 12    => return "Hold-Job";
                case 13    => return "Release-Job";
                case 14    => return "Restart-Job ";
                case 15    => return "Reserved3";
                case 16    => return "Pause-Printer";
                case 17    => return "Resume-Printer";
                case 18    => return "Purge-Jobs";
                case 19    => return "Set-Printer-Attributes";
                case 20    => return "Set-Job-Attributes";
                case 21    => return "Get-Printer-Supported-Values";
                case 22    => return "Create-Printer-Subscriptions";
                case 23    => return "Create-Job-Subscriptions";
                case 24    => return "Get-Subscription-Attributes";
                case 25    => return "Get-Subscriptions";
                case 26    => return "Renew-Subscription";
                case 27    => return "Cancel-Subscription";
                case 34    => return "Enable-Priter";
                case 35    => return "Disable-Printer";
                case 36    => return "Pause-Priter-After-CurrentJob";
                case 37    => return "Hold-NewJobs";
                case 38    => return "Release-Held-New-Jobs";
                case 39    => return "Deactivate-Printer";
                case 40    => return "Activate-Printer";
                case 41    => return "Restart-Printer";
                case 42    => return "Shutdown-Printer";
                case 43    => return "Startup-Printer";
                case 44    => return "Reprocess-Job";
                case 45    => return "Cancel-Current-Job";
                case 46    => return "Suspend-Current-Job";
                case 47    => return "Resume-Job";
                case 48    => return "Promote-Job ";
                case 49    => return "Schedule-Job-After";
                case 50    => return "Cancel-Document";
                case 51    => return "Get-Document-Attributes";
                case 52    => return "Get-Documents";
                case 53    => return "Delete-Document";
                case 54    => return "Set-Document-Attributes";
                case 16384 => return "Microsoft Specific Auth";
                case 16385 => return "CUPS-Get-Default";
                case 16386 => return "CUPS-Get-Printers";
                case 16387 => return "CUPS-Add-Modify-Printer";
                case 16388 => return "CUPS-Delete-Printer";
                case 16389 => return "CUPS-Get-Classes";
                case 16390 => return "CUPS-Add-Modify-Class";
                case 16391 => return "CUPS-Delete-Class";
                case 16392 => return "CUPS-Accept-Jobs";
                case 16393 => return "CUPS-Reject-Jobs";
                case 16394 => return "CUPS-Set-Default";
                case 16395 => return "CUPS-Get-Devices";
                case 16396 => return "CUPS-Get-PPDs";
                case 16397 => return "CUPS-Move-Job";
                case 16398 => return "CUPS-Authenticate-Job";
                case 16399 => return "CUPS-Get-PPD";
                case 16423 => return "CUPS-Get-Document";
                default    => return "Unknown Message Code: "+ (OperationId as string);
            }
        }
    }

    message Response
    {
        (byte where value == 0x01) Major;
        (byte where value == 0x00) Minor;
        StatusCode StatusCodes where ErrorCodeIf(!(value in {0, 1, 2, 3, 5, 7}), this, GetStatusCodeString(value));
        uint RequestId;
        optional array<AttributeTypeGroup> AttributeTypeGroups;
        EndOfAttributesTag EndOfAttributesTag;
        binary Data;
        override string ToString()
        {
            return GetStatusCodeString(StatusCodes);
        }
    }
}

pattern EndOfAttributesTag = byte where value == 0x03;

pattern DelimiterTags = enum byte
{
     // rfc 2910
     ReservedFoeDefinition          = 0x00,
     OperAtionAttributesTag         = 0x01,
     JobAttributesTag               = 0x02,
     PrinterAttributesTag           = 0x04,
     UnsupportedAttributesTag       = 0x05,
     SubscriptionAttributesTag      = 0x06,
     EventNotificationAttributesTag = 0x07  // rfc 3996
};

pattern ValueTags = enum byte   // rfc 2910
{
    // rfc 2910
    Unsupported                      = 0x10,
    ReservedForDefaultForDefinition  = 0x11,
    Unknown                          = 0x12,
    NoValue                          = 0x13,
    // rfc 3380
    NotSettable                      = 0x15,
    DeleteAttribute                  = 0x16,
    AdminDefine                      = 0x17,
    // rfc 2910
    ReservedStandardstrackdocument   = 0x20,
    Integer                          = 0x21,
    Boolean                          = 0x22,
    Enum                             = 0x23,
    OctetString                      = 0x30,
    DateTime                         = 0x31,
    Resolution                       = 0x32,
    RangeOfInteger                   = 0x33,
    // rfc 3382
    BegCollection                    = 0x34,
    // rfc 2910
    TextWithLanguage                 = 0x35,
    NameWithLanguage                 = 0x36,
    // rfc 3382
    EndCollection                    = 0x37,
    // rfc 2910
    ReservedStandardstrackdocument2  = 0x40,
    TextWithoutLanguage              = 0x41,
    NameWithoutLanguage              = 0x42,
    ReservedStandardstrackdocument3  = 0x43,
    Keyword                          = 0x44,
    Uri                              = 0x45,
    UriScheme                        = 0x46,
    Charset                          = 0x47,
    NaturalLanguage                  = 0x48,
    MimeMediaType                    = 0x49,
    // rfc 3382
    MemberAttrName                   = 0x4A,
    // rfc 2910
    Extending                        = 0x7F
};

pattern AttributeType =(AttributeWithOneValue | AdditionalValue);

type AttributeTypeGroup
{
    DelimiterTags DelimiterTag;
    array<AttributeType> Attributes;
}

type AttributeWithOneValue
{
    (ValueTags where value > 0x10) ValueTag;
    (ushort where value != 0x0000) NameLength;
    binary Name with BinaryEncoding{Length = NameLength as uint};
    ushort ValueLength;
    binary Value with BinaryEncoding{Length = ValueLength as uint};
}

type AdditionalValue
{
    (ValueTags where value > 0x10) ValueTag;
    (ushort where value == 0x0000) NameLength ;
    ushort ValueLength;
    binary Value with BinaryEncoding{Length = ValueLength as uint};
}

pattern OperationsID = enum ushort
{
    // rfc 2911
    Reserved1                  = 0x0000,
    Reserved2                  = 0x0001,
    PrintJob                   = 0x0002,
    PrintURI                   = 0x0003,
    ValidateJob                = 0x0004,
    CreateJob                  = 0x0005,
    SendDocument               = 0x0006,
    SendURI                    = 0x0007,
    CancelJob                  = 0x0008,
    GetJobAttributes           = 0x0009,
    GetJob                     = 0x000A,
    GetPrinterAttributes       = 0x000B,
    HoldJob                    = 0x000C,
    ReleaseJob                 = 0x000D,
    RestartJob                 = 0x000E,
    Reserved3                  = 0x000F,
    PausePrinter               = 0x0010,
    ResumePrinter              = 0x0011,
    PurgeJobs                  = 0x0012,
    SetPrinterAttributes       = 0x0013,
    SetJobAttributes           = 0x0014,
    GetPrinterSupportedValues  = 0x0015,
    // rfc 3995
    CreatePrinterSubscriptions = 0x0016,
    CreateJobSubscriptions     = 0x0017,
    GetSubscriptionAttributes  = 0x0018,
    GetSubscriptions           = 0x0019,
    RenewSubscription          = 0x001A,
    CancelSubscription         = 0x001B,
    // rfc 3998
    EnablePriter               = 0x22, 
    DisablePrinter             = 0x23, 
    PausePriterAfterCurrentJob = 0x24,
    HoldNewJobs                = 0x25,
    ReleaseHeldNewJobs         = 0x26,
    DeactivatePrinter          = 0x27,
    ActivatePrinter            = 0x28,
    RestartPrinter             = 0x29,
    ShutdownPrinter            = 0x2A,
    StartupPrinter             = 0x2B,
    ReprocessJob               = 0x2C,
    CancelCurrentJob           = 0x2D,
    SuspendCurrentJob          = 0x2E,
    ResumeJob                  = 0x2F,
    PromoteJob                 = 0x30,
    ScheduleJobAfter           = 0x31,
    // pwg5100.5
    CancelDocument             = 0x33,
    GetDocumentAttributes      = 0x34,
    GetDocuments               = 0x35,
    DeleteDocument             = 0x36,
    SetDocumentAttributes      = 0x37,
    // Vendor-Specific codes (0x4000-0xFFFF) (http://www.pwg.org/ipp/opcodes/ippopcodes.html)
    MicrosoftSpecificAuth      = 0x4000,
    // http://www.cups.org/spec-ipp.htm
    CupsGetDefault             = 0x4001,
    CupsGetPrinters            = 0x4002,
    CupsAddModifyPrinter       = 0x4003,
    CupsDeletePrinter          = 0x4004,
    CupsGetClasses             = 0x4005,
    CupsAddModifyClass         = 0x4006,
    CupsDeleteClass            = 0x4007,
    CupsAcceptJobs             = 0x4008,
    CupsRejectJobs             = 0x4009,
    CupsSetDefault             = 0x400A,
    CupsGetDevices             = 0x400B,
    CupsGetPPDs                = 0x400C,
    CupsMoveJob                = 0x400D,
    CupsAuthenticateJob        = 0x400E,
    CupsGetPPD                 = 0x400F,
    CupsGetDocument            = 0x4027
};

pattern StatusCode = enum ushort
{
    // rfc 2911
    Successfulok                                   = 0x0000,
    Successfulokignoredorsubstitutedattributes     = 0x0001,
    Successfulokconflictingattributes              = 0x0002,
    // rfc 3995
    Successfulokignoredsubscriptions               = 0x0003,
    Successfuloktoomanyevents                      = 0x0005,
    // rfc 3996
    Successfulokeventscomplete                     = 0x0007,
    // rfc 2911
    Clienterrorbadrequest                          = 0x0400,
    Clienterrorforbidden                           = 0x0401,
    Clienterrornotauthenticated                    = 0x0402,
    Clienterrornotauthorized                       = 0x0403,
    Clienterrornotpossible                         = 0x0404,
    Clienterrortimeout                             = 0x0405,
    Clienterrornotfound                            = 0x0406,
    Clienterrorgone                                = 0x0407,
    Clienterrorrequestentitytoolarge               = 0x0408,
    Clienterrorrequestvaluetoolong                 = 0x0409,
    Clienterrordocumentformatnotsupported          = 0x040A,
    Clienterrorattributesorvaluesnotsupported      = 0x040B,
    Clienterrorurischemenotsupported               = 0x040C,
    Clienterrorcharsetnotsupported                 = 0x040D,
    Clienterrorconflictingattributes               = 0x040E,
    Clienterrorcompressionnotsupported             = 0x040F,
    Clienterrorcompressionerror                    = 0x0410,
    Clienterrordocumentformaterror                 = 0x0411,
    Clienterrordocumentaccesserror                 = 0x0412,
    // should find rfc
    Clienterrorattributesnotsettable               = 0x0413,
    // rfc 3995
    Clienterrorignoredallsubscriptions             = 0x0414,
    Clienterrortoomanysubscriptions                = 0x0415,
    // rfc 2911
    Servererrorinternalerror                       = 0x0500,
    Servererroroperationnotsupported               = 0x0501,
    Servererrorserviceunavailable                  = 0x0502,
    Servererrorversionnotsupported                 = 0x0503,
    Servererrordeviceerror                         = 0x0504,
    Servererrortemporaryerror                      = 0x0505,
    Servererrornotacceptingjobs                    = 0x0506,
    Servererrorbusy                                = 0x0507,
    Servererrorjobcanceled                         = 0x0508,
    Servererrormultipledocumentjobsnotsupported    = 0x0509,
    // rfc 3998
    Servererrorprinterisdeactivated                = 0x050A
};


string GetStatusCodeString(ushort StatusCodes)
{
    switch (StatusCodes)
    {
        case 0    => return "successful-ok";
        case 1    => return "Successful-ok-ignored-or-substituted-attributes";
        case 2    => return "Successful-ok-conflicting-attributes";
        case 3    => return "Successful-ok-ignored-subscriptions";
        case 5    => return "Successful-ok-too-many-events";
        case 7    => return "Successful-ok-events-complete ";
        case 1024 => return "Client-error-bad-request";
        case 1025 => return "Client-error-forbidden";
        case 1026 => return "Client-error-not-authenticated";
        case 1027 => return "Client-error-not-authorized";
        case 1028 => return "Client-error-not-possible";
        case 1029 => return "Client-error-timeout";
        case 1030 => return "Client-error-not-found";
        case 1031 => return "Client-error-gone";
        case 1032 => return "Client-error-request-entity-too-large";
        case 1033 => return "Client-error-request-value-too-long";
        case 1034 => return "Client-error-document-format-not-supported";
        case 1035 => return "Client-error-attributes-or-values-not-supported";
        case 1036 => return "Client-error-uri-scheme-not-supported";
        case 1037 => return "Client-error-conflicting-attributes";
        case 1038 => return "Client-error-compression-not-supported";
        case 1039 => return "Client-error-compression-error";
        case 1040 => return "Client-error-document-format-error";
        case 1041 => return "Client-error-document-access-error";
        case 1042 => return "Client-error-attributes-not-settable";
        case 1043 => return "Client-error-ignored-all-subscriptions";
        case 1044 => return "Client-error-too-many-subscriptions";
        case 1280 => return "Server-error-internal-error";
        case 1281 => return "Server-error-operation-not-supported";
        case 1283 => return "Server-error-service-unavailable";
        case 1284 => return "Server-error-version-not-supported";
        case 1285 => return "Server-error-device-error";
        case 1286 => return "Server-error-temporary-error";
        case 1287 => return "Server-error-not-accepting-jobs";
        case 1288 => return "Server-error-busy ";
        case 1289 => return "Server-error-job-canceled";
        case 1289 => return "Server-error-multiple-document-jobs-not-supported";
        case 1289 => return "Server-error-printer-is-deactivated";
        default   => return "Unknown Message Code: "+ (StatusCodes as string);
    }
}
