protocol WSTransfer with 
XmlEncodingDefaults{Namespace = WSTransferNamespace},
Documentation
{
    ProtocolName = "Web Services Transfer",
    ShortName = "WSTransfer",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "WSTransfer", Link = "http://www.w3.org/Submission/WS-Transfer/"},
        ],
    RevisionSummary =
        [
            new Revision{Class=RevisionClass.Major, Version="1.0.0", Date="09/02/2011"}
        ]
};

using XSD;
using Standard;
using Utility;
using SOAP;
using WSA2004;
using WSA2005;
using Technologies.SOAP;
using Technologies.WSDL;
    
endpoint SourceServer 
    over ResourceIntermidiateEndpoint
    provides ResourceContract
    provides ResourceFactoryContract;

autostart actor ResourceActor(ResourceIntermidiateEndpoint node)
{
    ResourceMessageContract.GetResourceRequest getRequest = null;
    // get request
    process node accepts getReq:ResourceMessageContract.GetResourceRequest
    {
        if (getRequest == null)
        {
            getRequest = getReq;
        }
        else
        {
            ValidationCheck(false, getRequest, "WSTransfer: Incomplete Resource Get operation due to missing response.");
            DisplayTopLevelMessage(getRequest);
            getRequest = getReq;
        }
    }
    //get response
    process node issues getRes:ResourceMessageContract.GetResourceResponse
    {
        if (getRequest == null)
        {
            ValidationCheck(false, getRes, "WSTransfer: Incomplete Resource Get operation due to missing request.");
            reject;
        }
        else
        {
            var gets = new ResourceContract.Get
            {
                AnyOptionalElement = getRequest.AnyOptionalElement,
                AnyElement = getRes.AnyElement
            };
            gets.Origins = [getRequest as any message, getRes as any message];
            getRequest = null;
            dispatch (endpoint SourceServer over node) accepts gets;
        }
    }
    
    ResourceMessageContract.PutResourceRequest putRequest = null;
    // put request
    process node accepts putReq:ResourceMessageContract.PutResourceRequest
    {
        if (putRequest == null)
        {
            putRequest = putReq;
        }
        else
        {
            ValidationCheck(false, putRequest, "WSTransfer: Incomplete Resource Put operation due to missing response.");
            DisplayTopLevelMessage(putRequest);
            putRequest = putReq;
        }
    }
    //put response
    process node issues putRes:ResourceMessageContract.PutResourceResponse
    {
        if (putRequest == null)
        {
            ValidationCheck(false, putRes, "WSTransfer: Incomplete Resource Put operation due to missing request.");
            reject;
        }
        else
        {
            var puts = new ResourceContract.Put
            {
                AnyElement = putRequest.AnyElement,
                AnyOptionalElement = putRes.AnyOptionalElement
            };
            puts.Origins = [putRequest as any message, putRes as any message];
            putRequest = null;
            dispatch (endpoint SourceServer over node) accepts puts;
        }
    }
    
    ResourceMessageContract.DeleteResourceRequest deleteRequest = null;
    // delete request
    process node accepts deleteReq:ResourceMessageContract.DeleteResourceRequest
    {
        if (deleteRequest == null)
        {
            deleteRequest = deleteReq;
        }
        else
        {
            ValidationCheck(false, deleteRequest, "WSTransfer: Incomplete Resource Delete operation due to missing response.");
            DisplayTopLevelMessage(deleteRequest);
            deleteRequest = deleteReq;
        }
    }
    // delete response
    process node issues deleteRes:ResourceMessageContract.DeleteResourceResponse
    {
        if (deleteRequest == null)
        {
            ValidationCheck(false, deleteRes, "WSTransfer: Incomplete ResourceDelete operation due to missing request.");
            reject;
        }
        else
        {
            var deletes = new ResourceContract.Delete
            {
                AnyOptionalElement = deleteRes.AnyOptionalElement
            };
            deletes.Origins = [deleteRequest as any message, deleteRes as any message];
            deleteRequest = null;
            dispatch (endpoint SourceServer over node) accepts deletes;
        }
    }

    ResourceFactoryMessageContract.CreateRequest createRequest = null;
    // create request
    process node accepts createReq:ResourceFactoryMessageContract.CreateRequest
    {
        if (createRequest == null)
        {
            createRequest = createReq;
        }
        else
        {
            ValidationCheck(false, createRequest, "WSTransfer: Incomplete ResourceFactory Create operation due to missing response.");
            DisplayTopLevelMessage(createRequest);
            createRequest = createReq;
        }
    }
    
    //create response
    process node issues createRes:ResourceFactoryMessageContract.CreateResponse
    {
        if (createRequest == null)
        {
            ValidationCheck(false, createRes, "WSTransfer: Incomplete ResourceFactory Create operation due to missing request.");
            reject;
        }
        else
        {
            var create = new ResourceFactoryContract.Create
            {
                AnyElement = createRequest.AnyElement,
                ResourceCreated = createRes.ResourceCreated,
                AnyOptionalElement = createRes.AnyOptionalElement
            };
            create.Origins = [createRequest as any message, createRes as any message];
            createRequest = null;
            dispatch (endpoint SourceServer over node) accepts create;
        }
    }

    // destructor
    ~endpoint(ResourceIntermidiateEndpoint node)
    {
        // WORKAROUND: "release" cannot be used for now. Just dispatch un-processed requests here and raise validation check error
		if (getRequest != null)
		{
		    ValidationCheck (false, getRequest, "WSTransfer: Incomplete Resource Get operation due to missing response.");
		 DisplayTopLevelMessage(getRequest);
		}
        if (putRequest != null)
        {
            ValidationCheck (false, putRequest, "WSTransfer: Incomplete Resource Put operation due to missing response.");
            release putRequest; 
        }
        if (deleteRequest != null)
        {
            ValidationCheck (false, deleteRequest, "WSTransfer: Incomplete Resource Delete operation due to missing response.");
            DisplayTopLevelMessage(deleteRequest);
        }
        if (createRequest != null)
        {
            ValidationCheck (false, createRequest, "WSTransfer: Incomplete Resource Create operation due to missing response.");
            DisplayTopLevelMessage(createRequest);
        }
    }
}

// Intermidiate layer
endpoint ResourceIntermidiateEndpoint 
    over SOAP.Server
    provides ResourceMessageContract
    provides ResourceFactoryMessageContract;

autostart actor ResourceMessageActor(SOAP.Server node) precedes SOAP.Server
{
    // get request
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSTransferGetAction
    {
        switch (soap.Body)
        {
            case m:ResourceMessageContract.GetResourceRequest from XmlDecoder<ResourceMessageContract.GetResourceRequest> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts m;
            default =>
                ThrowDecodingException("WSTransfer", "GetResourceRequest");
        }
    }
    // get response
    process node issues soap:SOAP.SoapMessage where soap.Action == WSTransferGetResponseAction
    {
	    // WORKAROUND: reference allows multiple elements for GetResourceResponse but not set maxOccurs value, so cannot use XmlDecoder here
		ResourceMessageContract.GetResourceResponse res = new ResourceMessageContract.GetResourceResponse();
		if (soap.Body.ChildCount >= 1)
		{		    
			res.AnyElement = soap.Body.Children[0];
			if (soap.Body.ChildCount > 1)
			{
			    ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The GetResourceResponse is the initial child element of the SOAP:Body element of the response message.");
			}
			res.Origins += [soap];
		    dispatch (endpoint ResourceIntermidiateEndpoint over node) issues res;
		}
		else
		{
		    ThrowDecodingException ("WSTransfer", "GetResourceResponse");
		}
		
    }

    // put request
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSTransferPutAction
    {
	    // WORKAROUND: reference allows multiple elements for PutResourceRequest but not set maxOccurs value, so cannot use XmlDecoder here
		ResourceMessageContract.PutResourceRequest req = new ResourceMessageContract.PutResourceRequest();
		if (soap.Body.ChildCount >= 1)
		{		    
			req.AnyElement = soap.Body.Children[0];
			if (soap.Body.ChildCount > 1)
			{
			    ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The PutResourceRequest is the initial child element of the SOAP:Body element of the request message.");
			}
		    req.Origins += [soap];
		    dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts req;		
		}
		else
		{
		    ThrowDecodingException ("WSTransfer", "PutResourceRequest");;
		}

    }

    // put response
    process node issues soap:SOAP.SoapMessage where soap.Action == WSTransferPutResponseAction
    {
        switch (soap.Body)
        {
            case m:ResourceMessageContract.PutResourceResponse from XmlDecoder<ResourceMessageContract.PutResourceResponse> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) issues m;
            default =>
                ThrowDecodingException("WSTransfer", "PutResourceResponse");
        }
    }
    // delete request
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSTransferDeleteAction
    {
        switch (soap.Body)
        {
            case m:ResourceMessageContract.DeleteResourceRequest from XmlDecoder<ResourceMessageContract.DeleteResourceRequest> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts m;
            default =>
                ThrowDecodingException("WSTransfer, DeleteResourceRequest");
        }
    }
    // delete response
    process node issues soap:SOAP.SoapMessage where soap.Action == WSTransferDeleteResponseAction
    {
        switch (soap.Body)
        {
            case m:ResourceMessageContract.DeleteResourceResponse from XmlDecoder<ResourceMessageContract.DeleteResourceResponse> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) issues m;
            default =>
                ThrowDecodingException("WSTransfer", "DeleteResourceResponse");
        }
    }
    // create request
    process node accepts soap:SOAP.SoapMessage where soap.Action == WSTransferCreateAction
    {
        // WORKAROUND: reference allows multiple elements for CreateRequest but not set maxOccurs value, so cannot use XmlDecoder here
		ResourceFactoryMessageContract.CreateRequest req = new ResourceFactoryMessageContract.CreateRequest();
		if (soap.Body.ChildCount >= 1)
		{		    
			req.AnyElement = soap.Body.Children[0];
			if (soap.Body.ChildCount > 1)
			{
			    ValidationCheck (false, soap, DiagnosisLevel.Information, "WSTransfer: The CreateRequest is the initial child element of the SOAP:Body element of the request message.");
			}
			req.Origins += [soap];
		    dispatch (endpoint ResourceIntermidiateEndpoint over node) accepts req;
		}
		else
		{
		    ThrowDecodingException ("WSTransfer", "CreateRequest");
		}

    }
    // create response
    process node issues soap:SOAP.SoapMessage where soap.Action == WSTransferCreateResponseAction
    {
        switch (soap.Body)
        {
            case m:ResourceFactoryMessageContract.CreateResponse from XmlDecoder<ResourceFactoryMessageContract.CreateResponse> =>
                dispatch (endpoint ResourceIntermidiateEndpoint over node) issues m;
            default =>
                ThrowDecodingException("WSTransfer" , "CreateResponse");
        }
    }
}

// operation contract
contract ResourceContract with XmlEncoding{Namespace = XmlNamespaceIndicator.Any}
{
    accepts operation Get
    {
        in optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        out xml AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        
        override string ToString()
        {
            return "GetOp" + this.ExtendingSummary;
        }
    } with SoapMessageInfo {
                Action = WSTransferGetAction,
                ReplyAction = WSTransferGetResponseAction};

    accepts operation Put
    {
        in xml AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        out optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        
        override string ToString()
        {
            return "PutOp" + this.ExtendingSummary;
        }
    } with SoapMessageInfo {
                Action = WSTransferPutAction,
                ReplyAction = WSTransferPutResponseAction};
    
    accepts operation Delete
    {
        out optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        
        override string ToString()
        {
            return "DeleteOp" + this.ExtendingSummary;
        }
    } with SoapMessageInfo {
                Action = WSTransferDeleteAction,
                ReplyAction = WSTransferDeleteResponseAction};    
}

contract ResourceFactoryContract with XmlEncoding{Namespace = "##any"}
{
    accepts operation Create
    {
        in xml AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        out ResourceCreated ResourceCreated; 
        out optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        
        override string ToString()
        {
            return "CreateOp" + this.ExtendingSummary;
        }
    } with SoapMessageInfo {
                Action = WSTransferCreateAction,
                ReplyAction = WSTransferCreateResponseAction};
}

pattern ResourceCreated = (WSA2004.EndpointReferenceType | WSA2005.EndpointReferenceType) with XmlEncoding{Name = "ResourceCreated", Namespace = WSTransferNamespace};

// message contract
contract ResourceMessageContract
{
    accepts message GetResourceRequest
    {
        optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return "GetRequest" + this.ExtendingSummary;
        }
    }
    issues message GetResourceResponse
    {
        xml AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return "GetResponse" + this.ExtendingSummary;
        }
    }
    
    accepts message PutResourceRequest
    {
        xml AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return "PutRequest" + this.ExtendingSummary;
        }
    }
    issues message PutResourceResponse
    {
        optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return "PutResponse" + this.ExtendingSummary;
        }
    }
    
    accepts message DeleteResourceRequest
    {
        //Empty message
        override string ToString()
        {
            return "DeleteRequest" + this.ExtendingSummary;
        }
    }
    issues message DeleteResourceResponse
    {
        optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return "DeleteResponse" + this.ExtendingSummary;
        }
    }
}

contract ResourceFactoryMessageContract
{
    accepts message CreateRequest
    {
        xml AnyElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return "CreateRequest" + this.ExtendingSummary;
        }
    }
    issues message CreateResponse
    {
        ResourceCreated ResourceCreated;
        optional xml AnyOptionalElement with XmlEncoding{IsAny = true, Namespace = XmlNamespaceIndicator.Other};
        override string ToString()
        {
            return "CreateResponse" + this.ExtendingSummary;
        }
    }
}

const string WSTransferNamespace = "http://schemas.xmlsoap.org/ws/2004/09/transfer";
const string WSTransferGetAction =WSTransferNamespace + "/Get";
const string WSTransferGetResponseAction = WSTransferGetAction + "Response";
const string WSTransferPutAction =WSTransferNamespace + "/Put";
const string WSTransferPutResponseAction = WSTransferPutAction + "Response";
const string WSTransferDeleteAction = WSTransferNamespace + "/Delete";
const string WSTransferDeleteResponseAction = WSTransferDeleteAction + "Response";
const string WSTransferCreateAction = WSTransferNamespace + "/Create";
const string WSTransferCreateResponseAction = WSTransferCreateAction + "Response";
