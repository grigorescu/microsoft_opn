module SMI with
Asn1EncodingDefaults{ EncodingRule = Asn1EncodingRule.BER },
Documentation
{
    ProtocolName = "Structure of Management Information",
    ShortName = "SMI",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2578"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ]
};

using Standard;
using ASN1;

// ObjectName
pattern ObjectName = ObjectIdentifier;

// ObjectSyntax

pattern ObjectSyntaxSimple = SimpleSyntax;

pattern ObjectSyntaxApplicationWide = ApplicationSyntax;

pattern ObjectSyntax = ObjectSyntaxSimple
    | ObjectSyntaxApplicationWide;

// SimpleSyntax

pattern SimpleSyntaxNumber = Integer;

pattern SimpleSyntaxString = OctetString with Asn1Encoding{ Flags = Asn1EncodingFlags.OctetStringIsString };

pattern SimpleSyntaxObject = ObjectIdentifier;

pattern SimpleSyntaxEmpty = Null;

pattern SimpleSyntax = SimpleSyntaxNumber
    | SimpleSyntaxString
    | SimpleSyntaxObject
    | SimpleSyntaxEmpty
    ;

// ApplicationSyntax

pattern ApplicationSyntaxAddress = NetworkAddress
    with Asn1Encoding { TagNumber = 0 };

pattern ApplicationSyntaxCounter = Counter
    with Asn1Encoding { TagNumber = 1 };

pattern ApplicationSyntaxGauge = Gauge
    with Asn1Encoding { TagNumber = 2 };

pattern ApplicationSyntaxTicks = TimeTicks
    with Asn1Encoding { TagNumber = 3 };

pattern ApplicationSyntaxTicksArbitrary = Opaque
    with Asn1Encoding { TagNumber = 4 };

pattern ApplicationSyntax = ApplicationSyntaxAddress
    | ApplicationSyntaxCounter
    | ApplicationSyntaxGauge
    | ApplicationSyntaxTicks
    | ApplicationSyntaxTicksArbitrary
    ;

// NetworkAddress

pattern NetworkAddressInternet = IpAddress
    with Asn1Encoding { TagNumber = 0 };

pattern NetworkAddress = NetworkAddressInternet;

// IpAddress

pattern IpAddress = OctetString with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 0,
    Tagging = Asn1Tagging.Implicit,
    // Size = 4
    };

// Counter
pattern Counter = Integer with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 1,
    Tagging = Asn1Tagging.Implicit,
    LowerEndValue = 0,
    UpperEndValue = 4294967295
    };

// Gauge
pattern Gauge = Integer with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 2,
    Tagging = Asn1Tagging.Implicit,
    LowerEndValue = 0,
    UpperEndValue = 4294967295
    };

// TimeTicks
pattern TimeTicks = Integer with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 3,
    Tagging = Asn1Tagging.Implicit,
    LowerEndValue = 0,
    UpperEndValue = 4294967295
    };

// Opaque
pattern Opaque = OctetString with Asn1Encoding {
    TagClass = Asn1TagClass.Application,
    TagNumber = 4,
    Tagging = Asn1Tagging.Implicit
    };
