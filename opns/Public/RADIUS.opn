protocol RADIUS
    with BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Remote Authentication Dial In User Service",
    ShortName = "RADIUS",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2865"},
            new Reference{Name = "RFC 2866"},
            new Reference{Name = "RFC 2867"},
            new Reference{Name = "RFC 2868"},
            new Reference{Name = "RFC 2869"},
            new Reference{Name = "RFC 2882"},
            new Reference{Name = "RFC 3162"},
            new Reference{Name = "RFC 2548"},
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "11/01/2011"}
        ]
};

using Standard;
using Utility;
using IANA;
using UDP;

endpoint Node over UDP.Host accepts Packet;

autostart actor RADIUSOverUDP(UDP.Host host)
{
    process host accepts d:UDP.Datagram where (d.DestinationPort == Port.RADIUS || d.DestinationPort == Port.RADIUSCisco || d.SourcePort == Port.RADIUS || d.SourcePort == Port.RADIUSCisco) && value.Payload.Count == MakeWord(value.Payload.Segment(2, 1)[0], value.Payload.Segment(3, 1)[0])
    {
        switch (d.Payload)
        {
            case req:Packet from RadiusDecoder =>
                var node = endpoint Node over host;
                dispatch node accepts req;
            default =>
                ThrowDecodingException("RADIUS");
        }
    }
}

optional Packet RadiusDecoder(stream s)
{
    optional Packet p1 = BinaryDecoder<Packet>(s);
    if (p1 == nothing)
    {
        return nothing;
    }
    Packet p = p1 as Packet;
    p.PayloadForEap = $[];
    foreach (AttributeType attr in p.Attributes)
    {
        if (attr.Attribute is EAPMessageAttribute)
        {
            EAPMessageAttribute eap = attr.Attribute as EAPMessageAttribute;
            p.PayloadForEap = (p.PayloadForEap as binary) + eap.EAPMessage;
        }
    }
    if (p.PayloadForEap == $[])
    {
        p.PayloadForEap = nothing;
    }
    return p;
}

message Packet
{
    byte Code;
    byte Identifier;
    ushort Length where ValidationCheck(value >= 20 && value <= 4096, this, "The minimum length is 20 and the maximum length is 4096.");
    array<byte> Authenticator with BinaryEncoding{Length = 16};
    array<AttributeType> Attributes;
    optional binary PayloadForEap with Encoding{Ignore = true};
    
    override string ToString()
    {
        string summary;
        switch (Code)
        {
            case 1 => summary = "Access-Request, ";
            case 2 => summary = "Access-Accept, ";
            case 3 => summary = "Access-Reject, ";
            case 4 => summary = "Accounting-Request, ";
            case 5 => summary = "Accounting-Response, ";
            case 6 => summary = "Accounting-Status, ";
            case 7 => summary = "Password-Request, ";
            case 8 => summary = "Password-Ack, ";
            case 9 => summary = "Password-Reject, ";
            case 10 => summary = "Accounting-Message, ";
            case 11 => summary = "Access-Challenge, ";
            case 12 => summary = "Status-Server (experimental), ";
            case 13 => summary = "Status-Client (experimental), ";
            case 21 => summary = "Resource-Free-Request, ";
            case 22 => summary = "Resource-Free-Response, ";
            case 23 => summary = "Resource-Query-Request, ";
            case 24 => summary = "Resource-Query-Response, ";
            case 25 => summary = "Alternate-Resource-Reclaim-Request, ";
            case 26 => summary = "NAS-Reboot-Request, ";
            case 27 => summary = "NAS-Reboot-Response, ";
            case 29 => summary = "Next-Passcode, ";
            case 30 => summary = "New-Pin, ";
            case 31 => summary = "Terminate-Session, ";
            case 32 => summary = "Password-Expired, ";
            case 33 => summary = "Event-Request, ";
            case 34 => summary = "Event-Response";
            case 40 => summary = "Disconnect-Request, ";
            case 41 => summary = "Disconnect-ACK, ";
            case 42 => summary = "Disconnect-NAK, ";
            case 43 => summary = "CoA-Request, ";
            case 44 => summary = "CoA-ACK, ";
            case 45 => summary = "CoA-NAK, ";
            case 50 => summary = "IP-Address-Allocate, ";
            case 51 => summary = "IP-Address-Release, ";
            case 250 => summary = "Experimental-use, ";
            case 251 => summary = "Experimental-use, ";
            case 252 => summary = "Experimental-use, ";
            case 253 => summary = "Experimental-use, ";
            case 254 => summary = "Reserved, ";
            case 255 => summary = "Reserved, ";
            default => summary = "Undefined, ";
        }
        summary += "Identifier: " + (Identifier as string);
        summary += " Length: " + (Length as string);
        return summary;
    }
}

pattern Attribute = UserNameAttribute | UserPasswordAttribute | ChapPasswordAttribute | NASIPAddressAttribute //RFC 2865 start
                   | NASPortAttribute | ServiceTypeAttribute | FramedProtocolAttribute | FramedIPAddressAttribute
                   | FramedIPNetmaskAttribute | FramedRoutingAttribute | FilterIdAttribute | FramedMTUAttribute
                   | FramedCompressionAttribute | LoginIPHostAttribute | LoginServiceAttribute | LoginTCPPortAttribute
                   | ReplyMessageAttribute | CallbackNumberAttribute | CallbackIdAttribute | FramedRouteAttribute
                   | FramedIPXNetworkAttribute | StateAttribute | ClassAttribute | VendorSpecificAttribute
                   | SessionTimeoutAttribute | IdleTimeoutAttribute | TerminationActionAttribute | CalledStationIdAttribute
                   | CallingStationIdAttribute | NASIdentifierAttribute | ProxyStateAttribute | LoginLATServiceAttribute
                   | LoginLATNodeAttribute | LoginLATGroupAttribute | FramedAppleTalkLinkAttribute
                   | FramedAppleTalkNetworkAttribute | FramedAppleTalkZoneAttribute | CHAPChallengeAttribute
                   | NASPortTypeAttribute | PortLimitAttribute | LoginLATPortAttribute //RFC 2865 end
                   | AcctStatusTypeAttribute | AcctDelayTimeAttribute | AcctInputOctetsAttribute //RFC 2866 start
                   | AcctOutputOctetsAttribute | AcctSessionIdAttribute | AcctAuthenticAttribute
                   | AcctSessionTimeAttribute | AcctInputPacketsAttribute | AcctOutputPacketsAttribute
                   | AcctTerminateCauseAttribute | AcctMultiSessionIdAttribute | AcctLinkCountAttribute //RFC 2866 end
                   | TunnelTypeAttribute | TunnelMediumTypeAttribute | TunnelClientEndpointAttribute //RFC 2868 start
                   | TunnelServerEndpointAttribute | TunnelPasswordAttribute | TunnelPrivateGroupIDAttribute
                   | TunnelAssignmentIDAttribute | TunnelPreferenceAttribute | TunnelClientAuthIDAttribute
                   | TunnelServerAuthIDAttribute //RFC 2868 end
                   | AcctInputGigawordsAttribute | AcctOutputGigawordsAttribute | EventTimestampAttribute //RFC 2869 start
                   | ARAPPasswordAttribute | ARAPFeaturesAttribute | ARAPZoneAccessAttribute
                   | ARAPSecurityAttribute | ARAPSecurityDataAttribute | PasswordRetryAttribute
                   | PromptAttribute | ConnectInfoAttribute | ConfigurationTokenAttribute
                   | EAPMessageAttribute | MessageAuthenticatorAttribute | ARAPChallengeResponseAttribute
                   | AcctInterimIntervalAttribute | NASPortIdAttribute | FramedPoolAttribute //RFC 2869 end
                   | NASIPv6AddressAttribute | FramedInterfaceIdAttribute | FramedIPv6PrefixAttribute //RFC 3162 start
                   | LoginIPv6HostAttribute | FramedIPv6RouteAttribute | FramedIPv6PoolAttribute //RFC 3162 end
                   | AcctTunnelConnectionAttribute | AcctTunnelPacketsLostAttribute //RFC 2867
                   | CommonAttribute;

type AttributeType
{
    Attribute Attribute;
}

//*****************Attribute in RFC 2865******************************//
type UserNameAttribute
{
    (byte where value == 1) Type;
    byte Length where ValidationCheck(value >= 3, null, "User-Name attribute length is at least 3.");
    string UserName with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type UserPasswordAttribute
{
    (byte where value == 2) Type;
    byte Length where ValidationCheck(value >= 18 && value <= 130, null, "User-Password attribute length is at least 18 and no larger than 130.");
    binary UserPassword with BinaryEncoding{Length = (Length as uint) - 2};
}

type ChapPasswordAttribute
{
    (byte where value == 3) Type;
    byte Length where ValidationCheck(value == 19, null, "Chap-Password attribute length is 19.");
    byte ChapIdent;
    binary ChapPassword with BinaryEncoding{Length = 16};
}

type NASIPAddressAttribute
{
    (byte where value == 4) Type;
    byte Length where ValidationCheck(value == 6, null, "NAS-IP-Address attribute length is 6.");
    binary NASIPAddress with BinaryEncoding{Length = 4};
}

type NASPortAttribute
{
    (byte where value == 5) Type;
    byte Length where ValidationCheck(value == 6, null, "NAS-Port attribute length is 6.");
    uint NASPort;
}

type ServiceTypeAttribute
{
    (byte where value == 6) Type;
    byte Length where ValidationCheck(value == 6, null, "Service-Type attribute length is 6.");
    uint ServiceType;
}

type FramedProtocolAttribute
{
    (byte where value == 7) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-Protocol attribute length is 6.");
    uint FramedProtocol;
}

type FramedIPAddressAttribute
{
    (byte where value == 8) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-IP-Address attribute length is 6.");
    binary FramedIPAddress with BinaryEncoding{Length = 4};
}

type FramedIPNetmaskAttribute
{
    (byte where value == 9) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-IP-Netmask attribute length is 6.");
    binary FramedIPNetmask with BinaryEncoding{Length = 4};
}

type FramedRoutingAttribute
{
    (byte where value == 10) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-Routing attribute length is 6.");
    uint FramedRouting;
}

type FilterIdAttribute
{
    (byte where value == 11) Type;
    byte Length where ValidationCheck(value >= 3, null, "Filter-Id attribute length is at least 3.");
    string FilterId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type FramedMTUAttribute
{
    (byte where value == 12) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-MTU attribute length is 6.");
    uint FramedMTU where ValidationCheck(value >= 64, null, "Framed-MTU value length is at least 64.");
}

type FramedCompressionAttribute
{
    (byte where value == 13) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-Compression attribute length is 6.");
    uint FramedCompression;
}

type LoginIPHostAttribute
{
    (byte where value == 14) Type;
    byte Length where ValidationCheck(value == 6, null, "Login-IP-Host attribute length is 6.");
    binary LoginIPHost with BinaryEncoding{Length = 4};
}

type LoginServiceAttribute
{
    (byte where value == 15) Type;
    byte Length where ValidationCheck(value == 6, null, "Login-Service attribute length is 6.");
    uint LoginService;
}

type LoginTCPPortAttribute
{
    (byte where value == 16) Type;
    byte Length where ValidationCheck(value == 6, null, "Login-TCP-Port attribute length is 6.");
    uint LoginTCPPort;
}

type ReplyMessageAttribute
{
    (byte where value == 18) Type;
    byte Length where ValidationCheck(value >= 3, null, "Reply-Message attribute length is at least 3.");
    string ReplyMessage with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type CallbackNumberAttribute
{
    (byte where value == 19) Type;
    byte Length where ValidationCheck(value >= 3, null, "Callback-Number attribute length is at least 3.");
    binary CallbackNumber with BinaryEncoding{Length = (Length as uint) - 2};
}

type CallbackIdAttribute
{
    (byte where value == 20) Type;
    byte Length where ValidationCheck(value >= 3, null, "Callback-Id attribute length is at least 3.");
    binary CallbackId with BinaryEncoding{Length = (Length as uint) - 2};
}

type FramedRouteAttribute
{
    (byte where value == 22) Type;
    byte Length where ValidationCheck(value >= 3, null, "Framed-Route attribute length is at least 3.");
    string FramedRoute with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type FramedIPXNetworkAttribute
{
    (byte where value == 23) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-IPX-Network attribute length is 6.");
    binary FramedIPXNetwork with BinaryEncoding{Length = 4};
}

type StateAttribute
{
    (byte where value == 24) Type;
    byte Length where ValidationCheck(value >= 3, null, "State attribute length is at least 3.");
    binary State with BinaryEncoding{Length = (Length as uint) - 2};
}

type ClassAttribute
{
    (byte where value == 25) Type;
    byte Length where ValidationCheck(value >= 3, null, "Class attribute length is at least 3.");
    binary Class with BinaryEncoding{Length = (Length as uint) - 2};
}

type VendorSpecificAttribute
{
    (byte where value == 26) Type;
    byte Length where ValidationCheck(value >= 7, null, "Vendor-Specific attribute length is at least 3.");
    uint VendorId;
    ([|VendorId == 311|] VendorSpecSubAttribute[((Length as uint) - 6)] | [|VendorId != 311|] VendorSpecData[((Length as uint) - 6)]) VendorSpecific;
}

type SessionTimeoutAttribute
{
    (byte where value == 27) Type;
    byte Length where ValidationCheck(value == 6, null, "Session-Timeout attribute length is 6.");
    uint SessionTimeout;
}

type IdleTimeoutAttribute
{
    (byte where value == 28) Type;
    byte Length where ValidationCheck(value == 6, null, "Idle-Timeout attribute length is 6.");
    uint IdleTimeout;
}

type TerminationActionAttribute
{
    (byte where value == 29) Type;
    byte Length where ValidationCheck(value == 6, null, "Termination-Action attribute length is 6.");
    uint TerminationAction;
}

type CalledStationIdAttribute
{
    (byte where value == 30) Type;
    byte Length where ValidationCheck(value >= 3, null, "Called-Station-Id attribute length is at least 3.");
    binary CalledStationId with BinaryEncoding{Length = (Length as uint) - 2};
}

type CallingStationIdAttribute
{
    (byte where value == 31) Type;
    byte Length where ValidationCheck(value >= 3, null, "Calling-Station-Id attribute length is at least 3.");
    binary CallingStationId with BinaryEncoding{Length = (Length as uint) - 2};
}

type NASIdentifierAttribute
{
    (byte where value == 32) Type;
    byte Length where ValidationCheck(value >= 3, null, "NAS-Identifier attribute length is at least 3.");
    binary NASIdentifier with BinaryEncoding{Length = (Length as uint) - 2};
}

type ProxyStateAttribute
{
    (byte where value == 33) Type;
    byte Length where ValidationCheck(value >= 3, null, "Proxy-State attribute length is at least 3.");
    binary ProxyState with BinaryEncoding{Length = (Length as uint) - 2};
}

type LoginLATServiceAttribute
{
    (byte where value == 34) Type;
    byte Length where ValidationCheck(value >= 3, null, "Login-LAT-Service attribute length is at least 3.");
    binary LoginLATService with BinaryEncoding{Length = (Length as uint) - 2};
}

type LoginLATNodeAttribute
{
    (byte where value == 35) Type;
    byte Length where ValidationCheck(value >= 3, null, "Login-LAT-Node attribute length is at least 3.");
    binary LoginLATNode with BinaryEncoding{Length = (Length as uint) - 2};
}

type LoginLATGroupAttribute
{
    (byte where value == 36) Type;
    byte Length where ValidationCheck(value == 34, null, "Login-LAT-Group attribute length is 34.");
    binary LoginLATGroup with BinaryEncoding{Length = 32};
}

type FramedAppleTalkLinkAttribute
{
    (byte where value == 37) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-AppleTalk-Link attribute length is 6.");
    uint FramedAppleTalkLink;
}

type FramedAppleTalkNetworkAttribute
{
    (byte where value == 38) Type;
    byte Length where ValidationCheck(value == 6, null, "Framed-AppleTalk-Network attribute length is 6.");
    uint FramedAppleTalkNetwork;
}

type FramedAppleTalkZoneAttribute
{
    (byte where value == 39) Type;
    byte Length where ValidationCheck(value >= 3, null, "Framed-AppleTalk-Zone attribute length is at least 3.");
    binary FramedAppleTalkZone with BinaryEncoding{Length = (Length as uint) - 2};
}

type CHAPChallengeAttribute
{
    (byte where value == 60) Type;
    byte Length where ValidationCheck(value >= 7, null, "CHAP-Challenge attribute length is at least 7.");
    binary CHAPChallenge with BinaryEncoding{Length = (Length as uint) - 2};
}

type NASPortTypeAttribute
{
    (byte where value == 61) Type;
    byte Length where ValidationCheck(value == 6, null, "NAS-Port-Type attribute length is 6.");
    uint NASPortType;
}

type PortLimitAttribute
{
    (byte where value == 62) Type;
    byte Length where ValidationCheck(value == 6, null, "Port-Limit attribute length is 6.");
    uint PortLimit;
}

type LoginLATPortAttribute
{
    (byte where value == 63) Type;
    byte Length where ValidationCheck(value >= 3, null, "Login-LAT-Port attribute length is at least 3.");
    binary LoginLATPort with BinaryEncoding{Length = (Length as uint) - 2};
}


//*****************Attribute in RFC 2865******************************//
type AcctStatusTypeAttribute
{
    (byte where value == 40) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Status-Type attribute length is 6.");
    uint AcctStatusType;
}

type AcctDelayTimeAttribute
{
    (byte where value == 41) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Delay-Time attribute length is 6.");
    uint AcctDelayTime;
}

type AcctInputOctetsAttribute
{
    (byte where value == 42) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Input-Octets attribute length is 6.");
    uint AcctInputOctets;
}

type AcctOutputOctetsAttribute
{
    (byte where value == 43) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Output-Octets attribute length is 6.");
    uint AcctOutputOctets;
}

type AcctSessionIdAttribute
{
    (byte where value == 44) Type;
    byte Length where ValidationCheck(value >= 3, null, "Acct-Session-Id attribute length is at least 3.");
    string AcctSessionId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type AcctAuthenticAttribute
{
    (byte where value == 45) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Authentic attribute length is 6.");
    uint AcctAuthentic;
}

type AcctSessionTimeAttribute
{
    (byte where value == 46) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Session-Time attribute length is 6.");
    uint AcctSessionTime;
}

type AcctInputPacketsAttribute
{
    (byte where value == 47) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Input-Packets attribute length is 6.");
    uint AcctInputPackets;
}

type AcctOutputPacketsAttribute
{
    (byte where value == 48) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Output-Packets attribute length is 6.");
    uint AcctOutputPackets;
}

type AcctTerminateCauseAttribute
{
    (byte where value == 49) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Terminate-Cause attribute length is 6.");
    uint AcctTerminateCause;
}

type AcctMultiSessionIdAttribute
{
    (byte where value == 50) Type;
    byte Length where ValidationCheck(value >= 3, null, "Acct-Multi-Session-Id attribute length is at least 3.");
    string AcctMultiSessionId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type AcctLinkCountAttribute
{
    (byte where value == 51) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Link-Count attribute length is 6.");
    uint AcctLinkCount;
}


//*****************Attribute in RFC 2867******************************//
type AcctTunnelConnectionAttribute
{
    (byte where value == 68) Type;
    byte Length where ValidationCheck(value >= 3, null, "Acct-Tunnel-Connection attribute length is at least 3.");
    binary AcctTunnelConnection with BinaryEncoding{Length = (Length as uint) - 2};
}

type AcctTunnelPacketsLostAttribute
{
    (byte where value == 86) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Tunnel-Packets-Lost attribute length is 6.");
    uint Lost;
}

//*****************Attribute in RFC 2868******************************//
type TunnelTypeAttribute
{
    (byte where value == 64) Type;
    byte Length where ValidationCheck(value == 6, null, "Tunnel-Type attribute length is 6.");
    byte Tag;
    uint TunnelType with BinaryEncoding{Width = 24};
}

type TunnelMediumTypeAttribute
{
    (byte where value == 65) Type;
    byte Length where ValidationCheck(value == 6, null, "Tunnel-Medium-Type attribute length is 6.");
    byte Tag;
    uint TunnelMediumType with BinaryEncoding{Width = 24};
}

type TunnelClientEndpointAttribute
{
    (byte where value == 66) Type;
    byte Length where ValidationCheck(value >= 7, null, "Tunnel-Client-Endpoint attribute length is at least 3.");
    byte Tag;
    binary TunnelClientEndpoint with BinaryEncoding{Length = (Length as uint) - 3};
}

type TunnelServerEndpointAttribute
{
    (byte where value == 67) Type;
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Server-Endpoint attribute length is at least 3.");
    byte Tag;
    binary TunnelServerEndpoint with BinaryEncoding{Length = (Length as uint) - 3};
}

type TunnelPasswordAttribute
{
    (byte where value == 69) Type;
    byte Length where ValidationCheck(value >= 5, null, "Tunnel-Password attribute length is at least 5.");
    byte Tag;
    ushort Salt;
    binary TunnelPassword with BinaryEncoding{Length = (Length as uint) - 5};
}

type TunnelPrivateGroupIDAttribute
{
    (byte where value == 81) Type;
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Private-Group-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelPrivateGroupID with BinaryEncoding{Length = (Length as uint) - 3};
}

type TunnelAssignmentIDAttribute
{
    (byte where value == 82) Type;
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Assignment-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelAssignmentID with BinaryEncoding{Length = (Length as uint) - 3};
}

type TunnelPreferenceAttribute
{
    (byte where value == 83) Type;
    byte Length where ValidationCheck(value == 6, null, "Tunnel-Preference attribute length is 6.");
    byte Tag;
    uint TunnelPreference with BinaryEncoding{Width = 24};
}

type TunnelClientAuthIDAttribute
{
    (byte where value == 90) Type;
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Client-Auth-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelClientAuthID with BinaryEncoding{Length = (Length as uint) - 3};
}

type TunnelServerAuthIDAttribute
{
    (byte where value == 90) Type;
    byte Length where ValidationCheck(value >= 3, null, "Tunnel-Server-Auth-ID attribute length is at least 3.");
    byte Tag;
    binary TunnelServerAuthID with BinaryEncoding{Length = (Length as uint) - 3};
}


//*****************Attribute in RFC 2869******************************//
type AcctInputGigawordsAttribute
{
    (byte where value == 52) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Input-Gigawords attribute length is 6.");
    uint AcctInputGigawords;
}

type AcctOutputGigawordsAttribute
{
    (byte where value == 53) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Output-Gigawords attribute length is 6.");
    uint AcctOutputGigawords;
}

type EventTimestampAttribute
{
    (byte where value == 55) Type;
    byte Length where ValidationCheck(value == 6, null, "Event-Timestamp attribute length is 6.");
    uint EventTimestamp;
}

type ARAPPasswordAttribute
{
    (byte where value == 70) Type;
    byte Length where ValidationCheck(value == 18, null, "ARAP-Password attribute length is 18.");
    binary ARAPPassword with BinaryEncoding{Length = 16};
}

type ARAPFeaturesAttribute
{
    (byte where value == 71) Type;
    byte Length where ValidationCheck(value == 18, null, "ARAP-Features attribute length is 16.");
    byte  WhetherUserCanChangePassword;
    byte  MinimumPasswordLength;
    uint PasswordCreationDateInMacFormat;
    uint PasswordExpirationDateInMacFormat;
    uint CurrentRADIUSTimeInMacFormat;
}

type ARAPZoneAccessAttribute
{
    (byte where value == 72) Type;
    byte Length where ValidationCheck(value == 6, null, "ARAP-Zone-Access attribute length is 6.");
    uint ARAPZoneAccess;
}

type ARAPSecurityAttribute
{
    (byte where value == 73) Type;
    byte Length where ValidationCheck(value == 6, null, "ARAP-Security attribute length is 6.");
    uint ARAPSecurity;
}

type ARAPSecurityDataAttribute
{
    (byte where value == 74) Type;
    byte Length where ValidationCheck(value >= 3, null, "ARAP-Security-Data attribute length is at least 3.");
    binary ARAPSecurityData with BinaryEncoding{Length = (Length as uint) - 2};
}

type PasswordRetryAttribute
{
    (byte where value == 75) Type;
    byte Length where ValidationCheck(value == 6, null, "Password-Retry attribute length is 6.");
    uint PasswordRetry;
}

type PromptAttribute
{
    (byte where value == 76) Type;
    byte Length where ValidationCheck(value == 6, null, "Prompt attribute length is 6.");
    uint Prompt;
}

type ConnectInfoAttribute
{
    (byte where value == 77) Type;
    byte Length where ValidationCheck(value >= 3, null, "Connect-Info attribute length is at least 3.");
    string ConnectInfo with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type ConfigurationTokenAttribute
{
    (byte where value == 78) Type;
    byte Length where ValidationCheck(value >= 3, null, "Configuration-Token attribute length is at least 3.");
    binary ConfigurationToken with BinaryEncoding{Length = (Length as uint) - 2};
}

type EAPMessageAttribute
//If multiple EAP-Message attributes are present in a packet their values should be concatenated;
//this allows EAP packets longer than 253 octets to be passed by RADIUS.
{
    (byte where value == 79) Type;
    byte Length where ValidationCheck(value >= 3, null, "EAP-Message attribute length is at least 3.");
    binary EAPMessage with BinaryEncoding{Length = (Length as uint) - 2};
}

type MessageAuthenticatorAttribute
{
    (byte where value == 80) Type;
    byte Length where ValidationCheck(value == 18, null, "Message-Authenticator attribute length is 18.");
    binary MessageAuthenticator with BinaryEncoding{Length = 16};
}

type ARAPChallengeResponseAttribute
{
    (byte where value == 84) Type;
    byte Length where ValidationCheck(value == 10, null, "ARAP-Challenge-Response attribute length is 10.");
    binary ARAPChallengeResponse with BinaryEncoding{Length = 8};
}

type AcctInterimIntervalAttribute
{
    (byte where value == 85) Type;
    byte Length where ValidationCheck(value == 6, null, "Acct-Interim-Interval attribute length is 6.");
    uint AcctInterimInterval;
}

type NASPortIdAttribute
{
    (byte where value == 87) Type;
    byte Length where ValidationCheck(value >= 3, null, "NAS-Port-Id attribute length is at least 3.");
    string NASPortId with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type FramedPoolAttribute
{
    (byte where value == 88) Type;
    byte Length where ValidationCheck(value >= 3, null, "Framed-Pool attribute length is at least 3.");
    binary FramedPool with BinaryEncoding{Length = (Length as uint) - 2};
}


//*****************Attribute in RFC 3162******************************//
type NASIPv6AddressAttribute
{
    (byte where value == 95) Type;
    byte Length where ValidationCheck(value == 18, null, "NAS-IPv6-Address attribute length is 18.");
    binary NASIPv6Address with BinaryEncoding{Length = 16};
}

type FramedInterfaceIdAttribute
{
    (byte where value == 96) Type;
    byte Length where ValidationCheck(value == 10, null, "Framed-Interface-Id attribute length is 10.");
    binary FramedInterfaceId with BinaryEncoding{Length = 8};
}

type FramedIPv6PrefixAttribute
{
    (byte where value == 97) Type;
    byte Length where ValidationCheck(value >= 4 && value <= 20, null, "Framed-IPv6-Prefix attribute length is at least 4 and no greater than 20.");
    byte Reserved;
    byte PrefixLength;
    binary Prefix with BinaryEncoding{Length = (Length as uint) - 4};
}

type LoginIPv6HostAttribute
{
    (byte where value == 98) Type;
    byte Length where ValidationCheck(value == 18, null, "Login-IPv6-Host attribute length is 18.");
    binary LoginIPv6Host with BinaryEncoding{Length = 16};
}

type FramedIPv6RouteAttribute
{
    (byte where value == 99) Type;
    byte Length where ValidationCheck(value >= 3, null, "Framed-IPv6-Route attribute length is at least 3.");
    string FramedIPv6Route with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (Length as uint) - 2};
}

type FramedIPv6PoolAttribute
{
    (byte where value == 100) Type;
    byte Length where ValidationCheck(value >= 3, null, "Framed-IPv6-Pool attribute length is at least 3.");
    binary FramedIPv6Pool with BinaryEncoding{Length = (Length as uint) - 2};
}

//*****************Attribute Reserved******************************//
type CommonAttribute
{
    byte Type;
    byte Length;
    binary Value with BinaryEncoding{Length = (Length as uint) - 2};
}


//*****************Microsoft Vendor-specific RADIUS Attributes(RFC 2548)******************************//
type MSCHAPChallengeSubAttr
{
    (byte where value == 11) VendorType;
    byte VendorLength where ValidationCheck(value > 2, null, "MS-CHAP-Challenge subattribute length is greater than 2.");
    binary Challenge with BinaryEncoding{Length = (VendorLength as uint) - 2};
}

type MSCHAPResponseSubAttr
{
    (byte where value == 1) VendorType;
    byte VendorLength where ValidationCheck(value == 52, null, "MS-CHAP-Response subattribute length is 52.");
    byte Ident;
    byte Flags;
    binary LMResponse with BinaryEncoding{Length = 24};
    binary NTResponse with BinaryEncoding{Length = 24};
}

type MSCHAPDomainSubAttr
{
    (byte where value == 10) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-CHAP-Domain subattribute length is greater than 3.");
    byte Ident;
    string DomainName with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (VendorLength as uint) - 3};
}

type MSCHAPErrorSubAttr
{
    (byte where value == 2) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-CHAP-Error subattribute length is greater than 3.");
    byte Ident;
    string ErrorMessage with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (VendorLength as uint) - 3};
}

type MSCHAPPW1SubAttr
{
    (byte where value == 3) VendorType;
    byte VendorLength where ValidationCheck(value == 72, null, "MS-CHAP-PW-1 subattribute length is 72.");
    byte Code where ValidationCheck(value == 5, null, "Code value is 5.");
    byte Ident;
    binary LMOldPassword with BinaryEncoding{Length = 16};
    binary LMNewPassword with BinaryEncoding{Length = 16};
    binary NTOldPassword with BinaryEncoding{Length = 16};
    binary NTNewPassword with BinaryEncoding{Length = 16};
    ushort NewLMPasswordLength;
    ushort Flags;
}

type MSCHAPPW2SubAttr
{
    (byte where value == 4) VendorType;
    byte VendorLength where ValidationCheck(value == 86, null, "MS-CHAP-PW-2 subattribute length is 86.");
    byte Code where ValidationCheck(value == 6, null, "Code value is 6.");
    byte Ident;
    binary OldNTHash with BinaryEncoding{Length = 16};
    binary OldLMHash with BinaryEncoding{Length = 16};
    binary LMResponse with BinaryEncoding{Length = 24};
    binary NTResponse with BinaryEncoding{Length = 24};
    ushort Flags;
}

type MSCHAPLMEncPWSubAttr
{
    (byte where value == 5) VendorType;
    byte VendorLength where ValidationCheck(value > 6, null, "MS-CHAP-LM-Enc-PW subattribute length is greater than 6.");
    byte Code where ValidationCheck(value == 6, null, "Code value is 6.");
    byte Ident;
    ushort SequenceNumber;
    binary EncPW with BinaryEncoding{Length = (VendorLength as uint) - 6};
}

type MSCHAPNTEncPWSubAttr
{
    (byte where value == 6) VendorType;
    byte VendorLength where ValidationCheck(value > 6, null, "MS-CHAP-NT-Enc-PW subattribute length is greater than 6.");
    byte Code where ValidationCheck(value == 6, null, "Code value is 6.");
    byte Ident;
    ushort SequenceNumber;
    binary EncPW with BinaryEncoding{Length = (VendorLength as uint) - 6};
}

type MSCHAP2ResponseSubAttr
{
    (byte where value == 25) VendorType;
    byte VendorLength where ValidationCheck(value == 52, null, "MS-CHAP2-Response subattribute length is 52.");
    byte Ident;
    byte Flags;
    binary PeerChallenge with BinaryEncoding{Length = 16};
    binary Reserved with BinaryEncoding{Length = 8};
    binary Response with BinaryEncoding{Length = 24};
}

type MSCHAP2SuccessSubAttr
{
    (byte where value == 26) VendorType;
    byte VendorLength where ValidationCheck(value == 45, null, "MS-CHAP2-Success subattribute length is 45.");
    byte Ident;
    binary Authenticator with BinaryEncoding{Length = 42};
}

type MSCHAP2PWSubAttr
{
    (byte where value == 27) VendorType;
    byte VendorLength where ValidationCheck(value == 70, null, "MS-CHAP2-PW subattribute length is 70.");
    byte Code where ValidationCheck(value == 7, null, "Code value is 7.");
    byte Ident;
    binary EncryptedHash with BinaryEncoding{Length = 16};
    binary PeerChallenge with BinaryEncoding{Length = 24};
    binary NTResponse with BinaryEncoding{Length = 24};
    ushort Flags;
}

type MSCHAPMPPEKeysSubAttr
{
    (byte where value == 12) VendorType;
    byte VendorLength where ValidationCheck(value == 34, null, "MS-CHAP-MPPE-Keys subattribute length is 34.");
    binary LMKey with BinaryEncoding{Length = 8};
    binary NTKey with BinaryEncoding{Length = 16};
    binary Padding with BinaryEncoding{Length = 8};
}

type MSMPPESendKeySubAttr
{
    (byte where value == 16) VendorType;
    byte VendorLength where ValidationCheck(value > 4, null, "MS-MPPE-Send-Key subattribute length is greater than 4.");
    ushort Salt;
    binary EncryptedKey with BinaryEncoding{Length = (VendorLength as uint) - 4};
}

type MSMPPERecvKeySubAttr
{
    (byte where value == 17) VendorType;
    byte VendorLength where ValidationCheck(value > 4, null, "MS-MPPE-Recv-Key subattribute length is greater than 4.");
    ushort Salt;
    binary EncryptedKey with BinaryEncoding{Length = (VendorLength as uint) - 4};
}

type MSMPPEEncryptionPolicySubAttr
{
    (byte where value == 7) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-MPPE-Encryption-Policy subattribute length is 6.");
    uint Policy;
}

type MSMPPEEncryptionTypesSubAttr
{
    (byte where value == 8) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-MPPE-Encryption-Types subattribute length is 6.");
    uint Policy;
}

type MSBAPUsageSubAttr
{
    (byte where value == 13) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-BAP-Usage subattribute length is 6.");
    uint Value;
}

type MSLinkUtilizationThresholdSubAttr
{
    (byte where value == 14) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Link-Utilization-Threshold subattribute length is 6.");
    uint Value;
}

type MMSLinkDropTimeLimitSubAttr
{
    (byte where value == 15) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Link-Drop-Time-Limit subattribute length is 6.");
    uint Value;
}

type MSOldARAPPasswordSubAttr
{
    (byte where value == 19) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-Old-ARAP-Password subattribute length is greater than 3.");
    binary EncryptedOldARAPPwd with BinaryEncoding{Length = (VendorLength as uint) - 2};
}

type MSNewARAPPasswordSubAttr
{
    (byte where value == 20) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-New-ARAP-Password subattribute length is greater than 3.");
    binary EncryptedNewARAPPwd with BinaryEncoding{Length = (VendorLength as uint) - 2};
}

type MSARAPPasswordChangeReasonSubAttr
{
    (byte where value == 21) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-ARAP-Password-Change-Reason subattribute length is 6.");
    uint Reason;
}

type MSARAPChallengeSubAttr
{
    (byte where value == 33) VendorType;
    byte VendorLength where ValidationCheck(value == 10, null, "MS-ARAP-Challenge subattribute length is 10.");
    binary Challenge with BinaryEncoding{Length = 8};
}

type MSRASVendorSubAttr
{
    (byte where value == 9) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-RAS-Vendor subattribute length is 6.");
    uint VendorID;
}

type MSRASVersionSubAttr
{
    (byte where value == 18) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-RAS-Version subattribute length is greater than 3.");
    binary VendorSpecific with BinaryEncoding{Length = (VendorLength as uint) - 2};
}

type MSFilterSubAttr
{
    (byte where value == 22) VendorType;
    byte VendorLength where ValidationCheck(value > 3, null, "MS-Filter subattribute length is greater than 3.");
    binary Filter with BinaryEncoding{Length = (VendorLength as uint) - 2};
}

type MSAcctAuthTypeSubAttr
{
    (byte where value == 23) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Acct-Auth-Type subattribute length is 6.");
    uint AuthType;
}

type MSAcctEAPTypeSubAttr
{
    (byte where value == 24) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Acct-EAP-Type subattribute length is 6.");
    uint AuthType;
}

type MSPrimaryDNSServerSubAttr
{
    (byte where value == 28) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Primary-DNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}

type MSSecondaryDNSServerSubAttr
{
    (byte where value == 29) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Secondary-DNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}

type MSPrimaryMBNSServerSubAttr
{
    (byte where value == 30) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Primary-MBNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}

type MSSecondaryMBNSServerSubAttr
{
    (byte where value == 30) VendorType;
    byte VendorLength where ValidationCheck(value == 6, null, "MS-Secondary-MBNS-Server subattribute length is 6.");
    binary Address with BinaryEncoding{Length = 4};
}
                               
type VendorSpecData[uint length]
{
    binary Data with BinaryEncoding{Length = length};
}

type VendorSpecSubAttribute[uint length]
{
    (MSCHAPChallengeSubAttr | MSCHAPResponseSubAttr | MSCHAPDomainSubAttr
    | MSCHAPErrorSubAttr | MSCHAPPW1SubAttr | MSCHAPPW2SubAttr
    | MSCHAPLMEncPWSubAttr | MSCHAPNTEncPWSubAttr | MSCHAP2ResponseSubAttr
    | MSCHAP2SuccessSubAttr | MSCHAP2PWSubAttr | MSCHAPMPPEKeysSubAttr
    | MSMPPESendKeySubAttr | MSMPPERecvKeySubAttr | MSMPPEEncryptionPolicySubAttr
    | MSMPPEEncryptionTypesSubAttr | MSBAPUsageSubAttr | MSLinkUtilizationThresholdSubAttr
    | MMSLinkDropTimeLimitSubAttr | MSOldARAPPasswordSubAttr | MSNewARAPPasswordSubAttr
    | MSARAPPasswordChangeReasonSubAttr | MSARAPChallengeSubAttr | MSRASVendorSubAttr
    | MSRASVersionSubAttr | MSFilterSubAttr | MSAcctAuthTypeSubAttr
    | MSAcctEAPTypeSubAttr | MSPrimaryDNSServerSubAttr | MSSecondaryDNSServerSubAttr
    | MSPrimaryMBNSServerSubAttr | MSSecondaryMBNSServerSubAttr | VendorSpecData[length]) SubAttribute;
}
