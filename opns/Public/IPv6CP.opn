protocol IPv6CP with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "IPv6 Control Protocol",
    ShortName = "IPv6CP",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 2472"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "11/03/2011"}
        ]
};

using Standard;
using IANA;
using Utility;
using PPP;

endpoint Node over PPP.Node
    accepts Message;

autostart actor IPv6CPOverPPP(PPP.Node node)
{
    process node accepts p:PPP.Frame where GetPacketTypeValue(p.PacketType) == 0x8057
    {
        switch (p.Payload)
        {
            case msg:Message from BinaryDecoder<Message> =>
                dispatch (endpoint Node over node) accepts msg;
            default =>
                ThrowDecodingException("IPv6CP");
        }
    }
}

message Message
{
    Code Code;
    byte Identifier;
    byte Length;
    array<Option> Options;
    override string ToString()
    {
        switch (Code)
        {
            case 1 => return "ConfigureRequest";
            case 2 => return "ConfigureAck";
            case 3 => return "ConfigureNak";
            case 4 => return "ConfigureReject";
            case 5 => return "TerminateRequest";
            case 6 => return "TerminateAck";
            case 7 => return "CodeReject";
            default => return "Unknown Message Code: "+ (Code as string);
        }
    }
}

pattern Code = enum byte
{
    //VendorSpecific = 0,
    ConfigureRequest = 1,
    ConfigureAck = 2,
    ConfigureNak = 3,
    ConfigureReject = 4,
    TerminateRequest = 5,
    TerminateAck = 6,
    CodeReject = 7
};

pattern Option = (InterfaceIdentifier | CompressionProtocol);

type InterfaceIdentifier
{
    (byte where value == 1) Type ;
    byte Length where value == 10;
    ulong InterfaceID;
}

type CompressionProtocol
{
    (byte where value == 2) Type;
    byte Length where value >= 4;
    ushort CompressionProtocol;
    binary Data with BinaryEncoding{Length =(Length - 4) as uint};
}
