protocol NLM with
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Network Lock Manager Protocol",
    ShortName = "NLM",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
            new Reference{Name = "RFC 1813"},
            new Reference{Name = "C702", Link = "http://pubs.opengroup.org/onlinepubs/9629799/toc.htm"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "12/5/2011"}
        ]
};

using Standard;
using XDR;
using SunRPC;
using Utility;
using UDP;

annotation uint NlmXid;

endpoint Server over IntermediateServer provides NlmOperationContract;
client endpoint Client connected to Server;

endpoint IntermediateServer over SunRPC.Node provides NlmMessageContract consumes NlmMessageContract;
client endpoint IntermediateClient connected to IntermediateServer;

autostart actor NlmNodeOverIntermediateServer(IntermediateServer node)
{
    // Buffer for Operation 0 to 5, 20 to 23
    // Use xid as key for binding
    map <uint, any message> serverRequestBuffer = {};
    // Buffer for Operation 6 to 15
    // Operation 6 and 11 are grouped and they use RequestOperationBuffer[6] for binding
    // Operation 7 and 12 are grouped and they use RequestOperationBuffer[7] for binding
    // ...
    // Operation 10 and 15 are grouped and they use RequestOperationBuffer[10] for binding
    map <uint, any message> serverRequestOperationBuffer = {};

    // server
    // 0
    process node accepts m:NlmMessageContract.NlmNullRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmNullResponse
    {
        NlmOperationContract.NlmNullOperation nullOperation = new NlmOperationContract.NlmNullOperation{};
        nullOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmNullRequest];
        nullOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts nullOperation;
    }
    // version 1/2/3
    // 1
    process node accepts m:NlmMessageContract.NlmTestRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmTestResponse
    {
        NlmOperationContract.NlmTestOperation testOperation = new NlmOperationContract.NlmTestOperation{};
        testOperation.Testargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmTestRequest).Testargs;
        testOperation.Testres = m.Testres;
        testOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmTestRequest];
        testOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts testOperation;
    }
    // 2
    process node accepts m:NlmMessageContract.NlmLockRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmLockResponse
    {
        NlmOperationContract.NlmLockOperation lockOperation = new NlmOperationContract.NlmLockOperation{};
        lockOperation.Lockargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmLockRequest).Lockargs;
        lockOperation.Res = m.Res;
        lockOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmLockRequest];
        lockOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts lockOperation;
    }
    // 3
    process node accepts m:NlmMessageContract.NlmCancelRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmCancelResponse
    {
        NlmOperationContract.NlmCancelOperation cancelOperation = new NlmOperationContract.NlmCancelOperation{};
        cancelOperation.Cancargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmCancelRequest).Cancargs;
        cancelOperation.Res = m.Res;
        cancelOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmCancelRequest];
        cancelOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts cancelOperation;
    }
    // 4
    process node accepts m:NlmMessageContract.NlmUnlockRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmUnlockResponse
    {
        NlmOperationContract.NlmUnlockOperation unlockOperation = new NlmOperationContract.NlmUnlockOperation{};
        unlockOperation.Unlockargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmUnlockRequest).Unlockargs;
        unlockOperation.Res = m.Res;
        unlockOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmUnlockRequest];
        unlockOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts unlockOperation;
    }
    // 5
    process node accepts m:NlmMessageContract.NlmGrantedRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmGrantedResponse
    {
        NlmOperationContract.NlmGrantedOperation grantedOperation = new NlmOperationContract.NlmGrantedOperation{};
        grantedOperation.Testargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmGrantedRequest).Testargs;
        grantedOperation.Res = m.Res;
        grantedOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmGrantedRequest];
        grantedOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts grantedOperation;
    }
    // 6
    process node accepts m:NlmMessageContract.NlmTestMsgRequest
    {
        if (!(6 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[6] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[6] as NlmMessageContract.NlmTestMsgRequest, "Incomplete Nlm Asynchronous Test Operation, Nlm Test Res Request is missing.");
            serverRequestOperationBuffer[6] = m;
        }
    }
    // 7
    process node accepts m:NlmMessageContract.NlmLockMsgRequest
    {
        if (!(7 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[7] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[7] as NlmMessageContract.NlmLockMsgRequest, "Incomplete Nlm Asynchronous Lock Operation, Nlm Lock Res Request is missing.");
            serverRequestOperationBuffer[7] = m;
        }
    }
    // 8
    process node accepts m:NlmMessageContract.NlmCancelMsgRequest
    {
        if (!(8 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[8] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[8] as NlmMessageContract.NlmCancelMsgRequest, "NLM: Incomplete Cancel operation due to request is missing when operation is constructed.");
            serverRequestOperationBuffer[8] = m;
        }
    }
    // 9
    process node accepts m:NlmMessageContract.NlmUnlockMsgRequest
    {
        if (!(9 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[9] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[9] as NlmMessageContract.NlmUnlockMsgRequest, "Incomplete Nlm Asynchronous Unlock Operation, Nlm Unlock Res Request is missing.");
            serverRequestOperationBuffer[9] = m;
        }
    }
    // 10
    process node accepts m:NlmMessageContract.NlmGrantedMsgRequest
    {
        if (!(10 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[10] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[10] as NlmMessageContract.NlmGrantedMsgRequest, "Incomplete Nlm Asynchronous Granted Operation, Nlm Granted Res Request is missing.");
            serverRequestOperationBuffer[10] = m;
        }
    }
    // 11
    process node issues m:NlmMessageContract.NlmTestResRequest
    {
        if (!(6 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm Asynchronous Test Operation, Nlm Test Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.NlmAsynchronousTestOperation asynchronousTestOperation = new NlmOperationContract.NlmAsynchronousTestOperation{};
            asynchronousTestOperation.Testargs = (serverRequestOperationBuffer[6] as NlmMessageContract.NlmTestMsgRequest).Testargs;
            asynchronousTestOperation.Testres = m.Testres;
            asynchronousTestOperation.Origins = [serverRequestOperationBuffer[6] as NlmMessageContract.NlmTestMsgRequest];
            asynchronousTestOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousTestOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(6);
        }
    }
    // 12
    process node issues m:NlmMessageContract.NlmLockResRequest
    {
        if (!(7 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm Asynchronous Lock Operation, Nlm Lock Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.NlmAsynchronousLockOperation asynchronousLockOperation = new NlmOperationContract.NlmAsynchronousLockOperation{};
            asynchronousLockOperation.Lockargs = (serverRequestOperationBuffer[7] as NlmMessageContract.NlmLockMsgRequest).Lockargs;
            asynchronousLockOperation.Res = m.Res;
            asynchronousLockOperation.Origins = [serverRequestOperationBuffer[7] as NlmMessageContract.NlmLockMsgRequest];
            asynchronousLockOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousLockOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(7);
        }
    }
    // 13
    process node issues m:NlmMessageContract.NlmCancelResRequest
    {
        if (!(8 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm Asynchronous Lock Operation, Nlm Cancel Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.NlmAsynchronousCancelOperation asynchronousCancelOperation = new NlmOperationContract.NlmAsynchronousCancelOperation{};
            asynchronousCancelOperation.Cancargs = (serverRequestOperationBuffer[8] as NlmMessageContract.NlmCancelMsgRequest).Cancargs;
            asynchronousCancelOperation.Res = m.Res;
            asynchronousCancelOperation.Origins = [serverRequestOperationBuffer[8] as NlmMessageContract.NlmCancelMsgRequest];
            asynchronousCancelOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousCancelOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(8);
        }
    }
    // 14
    process node issues m:NlmMessageContract.NlmUnlockResRequest
    {
        if (!(9 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm Asynchronous Lock Operation, Nlm Unlock Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.NlmAsynchronousUnlockOperation asynchronousUnlockOperation = new NlmOperationContract.NlmAsynchronousUnlockOperation{};
            asynchronousUnlockOperation.Unlockargs = (serverRequestOperationBuffer[9] as NlmMessageContract.NlmUnlockMsgRequest).Unlockargs;
            asynchronousUnlockOperation.Res = m.Res;
            asynchronousUnlockOperation.Origins = [serverRequestOperationBuffer[9] as NlmMessageContract.NlmUnlockMsgRequest];
            asynchronousUnlockOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousUnlockOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(9);
        }
    }
    // 15
    process node issues m:NlmMessageContract.NlmGrantedResRequest
    {
        if (!(10 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm Asynchronous Lock Operation, Nlm Granted Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.NlmAsynchronousGrantedOperation asynchronousGrantedOperation = new NlmOperationContract.NlmAsynchronousGrantedOperation{};
            asynchronousGrantedOperation.Testargs = (serverRequestOperationBuffer[10] as NlmMessageContract.NlmGrantedMsgRequest).Testargs;
            asynchronousGrantedOperation.Res = m.Res;
            asynchronousGrantedOperation.Origins = [serverRequestOperationBuffer[10] as NlmMessageContract.NlmGrantedMsgRequest];
            asynchronousGrantedOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousGrantedOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(10);
        }
    }
    
    // 20
    process node accepts m:NlmMessageContract.NlmShareRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmShareResponse
    {
        NlmOperationContract.NlmShareOperation shareOperation = new NlmOperationContract.NlmShareOperation{};
        shareOperation.Shareargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmShareRequest).Shareargs;
        shareOperation.Shareres = m.Shareres;
        shareOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmShareRequest];
        shareOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts shareOperation;
    }
    // 21
    process node accepts m:NlmMessageContract.NlmUnshareRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmUnshareResponse
    {
        NlmOperationContract.NlmUnshareOperation unshareOperation = new NlmOperationContract.NlmUnshareOperation{};
        unshareOperation.Shareargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmUnshareRequest).Shareargs;
        unshareOperation.Shareres = m.Shareres;
        unshareOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmUnshareRequest];
        unshareOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts unshareOperation;
    }
    // 22
    process node accepts m:NlmMessageContract.NlmNmLockRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmNmLockResponse
    {
        NlmOperationContract.NlmNmLockOperation nmLockOperation = new NlmOperationContract.NlmNmLockOperation{};
        nmLockOperation.Lockargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmNmLockRequest).Lockargs;
        nmLockOperation.Res = m.Res;
        nmLockOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmNmLockRequest];
        nmLockOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts nmLockOperation;
    }
    // 23
    process node accepts m:NlmMessageContract.NlmFreeAllRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.NlmFreeAllResponse
    {
        NlmOperationContract.NlmFreeAllOperation freeAllOperation = new NlmOperationContract.NlmFreeAllOperation{};
        freeAllOperation.Notify = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmFreeAllRequest).Notify;
        freeAllOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.NlmFreeAllRequest];
        freeAllOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts freeAllOperation;
    }
    // version 4
    // 1
    process node accepts m:NlmMessageContract.Nlm4TestRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4TestResponse
    {
        NlmOperationContract.Nlm4TestOperation testOperation = new NlmOperationContract.Nlm4TestOperation{};
        testOperation.Testargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4TestRequest).Testargs;
        testOperation.Testres = m.Testres;
        testOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4TestRequest];
        testOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts testOperation;
    }
    // 2
    process node accepts m:NlmMessageContract.Nlm4LockRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4LockResponse
    {
        NlmOperationContract.Nlm4LockOperation lockOperation = new NlmOperationContract.Nlm4LockOperation{};
        lockOperation.Lockargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4LockRequest).Lockargs;
        lockOperation.Res = m.Res;
        lockOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4LockRequest];
        lockOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts lockOperation;
    }
    // 3
    process node accepts m:NlmMessageContract.Nlm4CancelRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4CancelResponse
    {
        NlmOperationContract.Nlm4CancelOperation cancelOperation = new NlmOperationContract.Nlm4CancelOperation{};
        cancelOperation.Cancargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4CancelRequest).Cancargs;
        cancelOperation.Res = m.Res;
        cancelOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4CancelRequest];
        cancelOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts cancelOperation;
    }
    // 4
    process node accepts m:NlmMessageContract.Nlm4UnlockRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4UnlockResponse
    {
        NlmOperationContract.Nlm4UnlockOperation unlockOperation = new NlmOperationContract.Nlm4UnlockOperation{};
        unlockOperation.Unlockargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4UnlockRequest).Unlockargs;
        unlockOperation.Res = m.Res;
        unlockOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4UnlockRequest];
        unlockOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts unlockOperation;
    }
    // 5
    process node accepts m:NlmMessageContract.Nlm4GrantedRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4GrantedResponse
    {
        NlmOperationContract.Nlm4GrantedOperation grantedOperation = new NlmOperationContract.Nlm4GrantedOperation{};
        grantedOperation.Testargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4GrantedRequest).Testargs;
        grantedOperation.Res = m.Res;
        grantedOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4GrantedRequest];
        grantedOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts grantedOperation;
    }
    // 6
    process node accepts m:NlmMessageContract.Nlm4TestMsgRequest
    {
        if (!(6 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[6] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[6] as NlmMessageContract.Nlm4TestMsgRequest, "Incomplete Nlm4 Asynchronous Test Operation, Nlm4 Test Res Request is missing.");
            serverRequestOperationBuffer[6] = m;
        }
    }
    // 7
    process node accepts m:NlmMessageContract.Nlm4LockMsgRequest
    {
        if (!(7 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[7] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[7] as NlmMessageContract.Nlm4LockMsgRequest, "Incomplete Nlm4 Asynchronous Lock Operation, Nlm4 Lock Res Request is missing.");
            serverRequestOperationBuffer[7] = m;
        }
    }
    // 8
    process node accepts m:NlmMessageContract.Nlm4CancelMsgRequest
    {
        if (!(8 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[8] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[8] as NlmMessageContract.Nlm4CancelMsgRequest, "Incomplete Nlm4 Asynchronous Cancel Operation, Nlm Cancel Res Request is missing.");
            serverRequestOperationBuffer[8] = m;
        }
    }
    // 9
    process node accepts m:NlmMessageContract.Nlm4UnlockMsgRequest
    {
        if (!(9 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[9] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[9] as NlmMessageContract.Nlm4UnlockMsgRequest, "Incomplete Nlm4 Asynchronous Unlock Operation, Nlm4 Unlock Res Request is missing.");
            serverRequestOperationBuffer[9] = m;
        }
    }
    // 10
    process node accepts m:NlmMessageContract.Nlm4GrantedMsgRequest
    {
        if (!(10 in serverRequestOperationBuffer))
        {
            serverRequestOperationBuffer[10] = m;
        }
        else
        {
            ValidationCheck(false, serverRequestOperationBuffer[10] as NlmMessageContract.Nlm4GrantedMsgRequest, "Incomplete Nlm4 Asynchronous Granted Operation, Nlm4 Granted Res Request is missing.");
            serverRequestOperationBuffer[10] = m;
        }
    }
    // 11
    process node issues m:NlmMessageContract.Nlm4TestResRequest
    {
        if (!(6 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm4 Asynchronous Test Operation, Nlm4 Test Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.Nlm4AsynchronousTestOperation asynchronousTestOperation = new NlmOperationContract.Nlm4AsynchronousTestOperation{};
            asynchronousTestOperation.Testargs = (serverRequestOperationBuffer[6] as NlmMessageContract.Nlm4TestMsgRequest).Testargs;
            asynchronousTestOperation.Testres = m.Testres;
            asynchronousTestOperation.Origins = [serverRequestOperationBuffer[6] as NlmMessageContract.Nlm4TestMsgRequest];
            asynchronousTestOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousTestOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(6);
        }
    }
    // 12
    process node issues m:NlmMessageContract.Nlm4LockResRequest
    {
        if (!(7 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm4 Asynchronous Lock Operation, Nlm4 Lock Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.Nlm4AsynchronousLockOperation asynchronousLockOperation = new NlmOperationContract.Nlm4AsynchronousLockOperation{};
            asynchronousLockOperation.Lockargs = (serverRequestOperationBuffer[7] as NlmMessageContract.Nlm4LockMsgRequest).Lockargs;
            asynchronousLockOperation.Res = m.Res;
            asynchronousLockOperation.Origins = [serverRequestOperationBuffer[7] as NlmMessageContract.Nlm4LockMsgRequest];
            asynchronousLockOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousLockOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(7);
        }
    }
    // 13
    process node issues m:NlmMessageContract.Nlm4CancelResRequest
    {
        if (!(8 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm4 Asynchronous Lock Operation, Nlm4 Cancel Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.Nlm4AsynchronousCancelOperation asynchronousCancelOperation = new NlmOperationContract.Nlm4AsynchronousCancelOperation{};
            asynchronousCancelOperation.Cancargs = (serverRequestOperationBuffer[8] as NlmMessageContract.Nlm4CancelMsgRequest).Cancargs;
            asynchronousCancelOperation.Res = m.Res;
            asynchronousCancelOperation.Origins = [serverRequestOperationBuffer[8] as NlmMessageContract.Nlm4CancelMsgRequest];
            asynchronousCancelOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousCancelOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(8);
        }
    }
    // 14
    process node issues m:NlmMessageContract.Nlm4UnlockResRequest
    {
        if (!(9 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm4 Asynchronous Lock Operation, Nlm4 Unlock Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.Nlm4AsynchronousUnlockOperation asynchronousUnlockOperation = new NlmOperationContract.Nlm4AsynchronousUnlockOperation{};
            asynchronousUnlockOperation.Unlockargs = (serverRequestOperationBuffer[9] as NlmMessageContract.Nlm4UnlockMsgRequest).Unlockargs;
            asynchronousUnlockOperation.Res = m.Res;
            asynchronousUnlockOperation.Origins = [serverRequestOperationBuffer[9] as NlmMessageContract.Nlm4UnlockMsgRequest];
            asynchronousUnlockOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousUnlockOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(9);
        }
    }
    // 15
    process node issues m:NlmMessageContract.Nlm4GrantedResRequest
    {
        if (!(10 in serverRequestOperationBuffer))
        {
            ValidationCheck(false, m, "Incomplete Nlm4 Asynchronous Lock Operation, Nlm4 Granted Msg Request is missing.");
            reject;
        }
        else
        {
            NlmOperationContract.Nlm4AsynchronousGrantedOperation asynchronousGrantedOperation = new NlmOperationContract.Nlm4AsynchronousGrantedOperation{};
            asynchronousGrantedOperation.Testargs = (serverRequestOperationBuffer[10] as NlmMessageContract.Nlm4GrantedMsgRequest).Testargs;
            asynchronousGrantedOperation.Res = m.Res;
            asynchronousGrantedOperation.Origins = [serverRequestOperationBuffer[10] as NlmMessageContract.Nlm4GrantedMsgRequest];
            asynchronousGrantedOperation.Origins += [m];
            dispatch (endpoint Server over node) accepts asynchronousGrantedOperation;
            serverRequestOperationBuffer = serverRequestOperationBuffer.Remove(10);
        }
    }
    // 20
    process node accepts m:NlmMessageContract.Nlm4ShareRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4ShareResponse
    {
        NlmOperationContract.Nlm4ShareOperation shareOperation = new NlmOperationContract.Nlm4ShareOperation{};
        shareOperation.Shareargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4ShareRequest).Shareargs;
        shareOperation.Shareres = m.Shareres;
        shareOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4ShareRequest];
        shareOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts shareOperation;
    }
    // 21
    process node accepts m:NlmMessageContract.Nlm4UnshareRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4UnshareResponse
    {
        NlmOperationContract.Nlm4UnshareOperation unshareOperation = new NlmOperationContract.Nlm4UnshareOperation{};
        unshareOperation.Shareargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4UnshareRequest).Shareargs;
        unshareOperation.Shareres = m.Shareres;
        unshareOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4UnshareRequest];
        unshareOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts unshareOperation;
    }
    // 22
    process node accepts m:NlmMessageContract.Nlm4NmLockRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4NmLockResponse
    {
        NlmOperationContract.Nlm4NmLockOperation nmLockOperation = new NlmOperationContract.Nlm4NmLockOperation{};
        nmLockOperation.Lockargs = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4NmLockRequest).Lockargs;
        nmLockOperation.Res = m.Res;
        nmLockOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4NmLockRequest];
        nmLockOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts nmLockOperation;
    }
    // 23
    process node accepts m:NlmMessageContract.Nlm4FreeAllRequest
    {
        if (!((m#NlmXid as uint) in serverRequestBuffer))
        {
            serverRequestBuffer[m#NlmXid as uint] = m;
        }
    }
    process node issues m:NlmMessageContract.Nlm4FreeAllResponse
    {
        NlmOperationContract.Nlm4FreeAllOperation freeAllOperation = new NlmOperationContract.Nlm4FreeAllOperation{};
        freeAllOperation.Notify = (serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4FreeAllRequest).Notify;
        freeAllOperation.Origins = [serverRequestBuffer[m#NlmXid as uint] as NlmMessageContract.Nlm4FreeAllRequest];
        freeAllOperation.Origins += [m];
        serverRequestBuffer = serverRequestBuffer.Remove(m#NlmXid as uint);
        dispatch (endpoint Server over node) accepts freeAllOperation;
    }

    // destructor
    ~endpoint(IntermediateServer intermediateServer)
    {
        // map <uint, any message> serverRequestBuffer
        if ((serverRequestBuffer.Values).Count > 0)
        {
            foreach (var msg in serverRequestBuffer.Values)
            {
                ReportInsufficientData(msg, DiagnosisLevel.Error, "NLM: Insufficient fragments for full reassembly.");
                DisplayTopLevelMessage(msg);
            }
            serverRequestBuffer = {};
        }
        
        // map <uint, any message> serverRequestOperationBuffer
        if ((serverRequestOperationBuffer.Values).Count > 0)
        {
            foreach (var msg in serverRequestOperationBuffer.Values)
            {
                ReportInsufficientData(msg, DiagnosisLevel.Error, "NLM: Insufficient fragments for full reassembly.");
                DisplayTopLevelMessage(msg);
            }
            serverRequestOperationBuffer = {};
        }
    }
}

autostart actor NlmMessageOverSunRPC(SunRPC.Node node)
{
    map<uint, uint> mapProcedureByXID = {};
    map<uint, uint> mapVersionByXID = {};

    // accepts Reply from UDP, reverse accept/issues direction for operation set up.
    process node accepts r:SunRPC.RpcMsg where (r.MType == MsgType.Reply
        && r.Xid in mapProcedureByXID
        && (r.Body as ReplyBody).Stat == SunRPC.ReplyStat.MsgAccepted
        && ((r.Body as ReplyBody).Reply as AcceptedReply).ReplyData is binary)
    {
        if (NlmMessageProcessing(mapProcedureByXID[r.Xid], mapVersionByXID[r.Xid], (((r.Body as ReplyBody).Reply as AcceptedReply).ReplyData as binary) as stream, false, r.Xid, IssuesDispatcher))
        {
            mapProcedureByXID = mapProcedureByXID.Remove(r.Xid);
            mapVersionByXID = mapVersionByXID.Remove(r.Xid);
        }
    }
    process node issues r:SunRPC.RpcMsg where (r.MType == MsgType.Reply
        && r.Xid in mapProcedureByXID
        && (r.Body as ReplyBody).Stat == SunRPC.ReplyStat.MsgAccepted
        && ((r.Body as ReplyBody).Reply as AcceptedReply).ReplyData is binary)
    {
        if (NlmMessageProcessing(mapProcedureByXID[r.Xid], mapVersionByXID[r.Xid], (((r.Body as ReplyBody).Reply as AcceptedReply).ReplyData as binary) as stream, false, r.Xid, IssuesDispatcher))
        {
            mapProcedureByXID = mapProcedureByXID.Remove(r.Xid);
            mapVersionByXID = mapVersionByXID.Remove(r.Xid);
        }
    }
    process node accepts r:SunRPC.RpcMsg where (r.MType == MsgType.Call
        && (r.Body as CallBody).Prog == 100021
        && ((r.Body as CallBody).CallData is SunRPC.BinaryCallDataType)
        && !(r.Xid in mapProcedureByXID)
        )
    {
        mapVersionByXID[r.Xid] = (r.Body as CallBody).Vers;
        mapProcedureByXID[r.Xid] = (r.Body as CallBody).Proc;
        NlmMessageProcessing(mapProcedureByXID[r.Xid],mapVersionByXID[r.Xid], ((r.Body as CallBody).CallData as SunRPC.BinaryCallDataType).Data as stream, true, r.Xid, AcceptsDispatcher);
    }
    
    void AcceptsDispatcher(any message m)
    {
        dispatch (endpoint IntermediateServer over node) accepts m;
    }
    
    void IssuesDispatcher(any message m)
    {
        dispatch (endpoint IntermediateServer over node) issues m;
    }
}

bool NlmMessageProcessing(uint procedureNumber, uint version, stream messagePayload, bool isCall, uint xid, void(any message) dispatcher)
{
    if (version < 4)
    {
        switch (procedureNumber)
        {
            case 0 =>
                if (isCall)
                {
                    NlmMessageContract.NlmNullRequest NlmNullRequestMessage = BinaryDecoder<NlmMessageContract.NlmNullRequest>(messagePayload) as NlmMessageContract.NlmNullRequest;
                    NlmNullRequestMessage#NlmXid = xid;
                    dispatcher(NlmNullRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmNullResponse NlmNullResponseMessage = BinaryDecoder<NlmMessageContract.NlmNullResponse>(messagePayload) as NlmMessageContract.NlmNullResponse;
                    NlmNullResponseMessage#NlmXid = xid;
                    dispatcher(NlmNullResponseMessage);
                }
                return true;
            case 1 =>
                if (isCall)
                {
                    optional NlmMessageContract.NlmTestRequest NlmTestRequestMessage = BinaryDecoder<NlmMessageContract.NlmTestRequest>(messagePayload);
                    if (NlmTestRequestMessage is nothing)
                    {
                        return false;
                    }
                    else
                    {
                        NlmMessageContract.NlmTestRequest tempMsg = NlmTestRequestMessage as NlmMessageContract.NlmTestRequest;
                        tempMsg#NlmXid = xid;
                        dispatcher(tempMsg);
                    }
                }
                else
                {
                    optional NlmMessageContract.NlmTestResponse NlmTestResponseMessage = BinaryDecoder<NlmMessageContract.NlmTestResponse>(messagePayload);
                    if (NlmTestResponseMessage is nothing)
                    {
                        return false;
                    }
                    else
                    {
                        NlmMessageContract.NlmTestResponse tempMsg = NlmTestResponseMessage as NlmMessageContract.NlmTestResponse;
                        tempMsg#NlmXid = xid;
                        dispatcher(tempMsg);
                    }
                }
                return true;
            case 2 =>
                if (isCall)
                {
                    NlmMessageContract.NlmLockRequest NlmLockRequestMessage = BinaryDecoder<NlmMessageContract.NlmLockRequest>(messagePayload) as NlmMessageContract.NlmLockRequest;
                    NlmLockRequestMessage#NlmXid = xid;
                    dispatcher(NlmLockRequestMessage);

                }
                else
                {
                    NlmMessageContract.NlmLockResponse NlmLockResponseMessage = BinaryDecoder<NlmMessageContract.NlmLockResponse>(messagePayload) as NlmMessageContract.NlmLockResponse;
                    NlmLockResponseMessage#NlmXid = xid;
                    dispatcher(NlmLockResponseMessage);
                }
                return true;
            case 3 =>
                if (isCall)
                {
                    NlmMessageContract.NlmCancelRequest NlmCancelRequestMessage = BinaryDecoder<NlmMessageContract.NlmCancelRequest>(messagePayload) as NlmMessageContract.NlmCancelRequest;
                    NlmCancelRequestMessage#NlmXid = xid;
                    dispatcher(NlmCancelRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmCancelResponse NlmCancelResponseMessage = BinaryDecoder<NlmMessageContract.NlmCancelResponse>(messagePayload) as NlmMessageContract.NlmCancelResponse;
                    NlmCancelResponseMessage#NlmXid = xid;
                    dispatcher(NlmCancelResponseMessage);
                }
                return true;
            case 4 =>
                if (isCall)
                {
                    NlmMessageContract.NlmUnlockRequest NlmUnlockRequestMessage = BinaryDecoder<NlmMessageContract.NlmUnlockRequest>(messagePayload) as NlmMessageContract.NlmUnlockRequest;
                    NlmUnlockRequestMessage#NlmXid = xid;
                    dispatcher(NlmUnlockRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmUnlockResponse NlmUnlockResponseMessage = BinaryDecoder<NlmMessageContract.NlmUnlockResponse>(messagePayload) as NlmMessageContract.NlmUnlockResponse;
                    NlmUnlockResponseMessage#NlmXid = xid;
                    dispatcher(NlmUnlockResponseMessage);
                }
                return true;
            case 5 =>
                if (isCall)
                {
                    NlmMessageContract.NlmGrantedRequest NlmGrantedRequestMessage = BinaryDecoder<NlmMessageContract.NlmGrantedRequest>(messagePayload) as NlmMessageContract.NlmGrantedRequest;
                    NlmGrantedRequestMessage#NlmXid = xid;
                    dispatcher(NlmGrantedRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmGrantedResponse NlmGrantedResponseMessage = BinaryDecoder<NlmMessageContract.NlmGrantedResponse>(messagePayload) as NlmMessageContract.NlmGrantedResponse;
                    NlmGrantedResponseMessage#NlmXid = xid;
                    dispatcher(NlmGrantedResponseMessage);
                }
                return true;
            case 6 =>
                if (isCall)
                {
                    NlmMessageContract.NlmTestMsgRequest NlmTestMsgRequestMessage = BinaryDecoder<NlmMessageContract.NlmTestMsgRequest>(messagePayload) as NlmMessageContract.NlmTestMsgRequest;
                    //NlmTestMsgRequestMessage#NlmXid = xid;
                    dispatcher(NlmTestMsgRequestMessage);
                }
                return true;
            case 7 =>
                if (isCall)
                {
                    NlmMessageContract.NlmLockMsgRequest NlmLockMsgRequestMessage = BinaryDecoder<NlmMessageContract.NlmLockMsgRequest>(messagePayload) as NlmMessageContract.NlmLockMsgRequest;
                    //NlmLockMsgRequestMessage#NlmXid = xid;
                    dispatcher(NlmLockMsgRequestMessage);
                }
                return true;
            case 8 =>
                if (isCall)
                {
                    NlmMessageContract.NlmCancelMsgRequest NlmCancelMsgRequestMessage = BinaryDecoder<NlmMessageContract.NlmCancelMsgRequest>(messagePayload) as NlmMessageContract.NlmCancelMsgRequest;
                    //NlmCancelMsgRequestMessage#NlmXid = xid;
                    dispatcher(NlmCancelMsgRequestMessage);
                }
                return true;
            case 9 =>
                if (isCall)
                {
                    NlmMessageContract.NlmUnlockMsgRequest NlmUnlockMsgRequestMessage = BinaryDecoder<NlmMessageContract.NlmUnlockMsgRequest>(messagePayload) as NlmMessageContract.NlmUnlockMsgRequest;
                    //NlmUnlockMsgRequestMessage#NlmXid = xid;
                    dispatcher(NlmUnlockMsgRequestMessage);
                }
                return true;
            case 10 =>
                if (isCall)
                {
                    NlmMessageContract.NlmGrantedMsgRequest NlmGrantedMsgRequestMessage = BinaryDecoder<NlmMessageContract.NlmGrantedMsgRequest>(messagePayload) as NlmMessageContract.NlmGrantedMsgRequest;
                    //NlmGrantedMsgRequestMessage#NlmXid = xid;
                    dispatcher(NlmGrantedMsgRequestMessage);
                }
                return true;
            case 11 =>
                if (isCall)
                {
                    NlmMessageContract.NlmTestResRequest NlmTestResRequestMessage = BinaryDecoder<NlmMessageContract.NlmTestResRequest>(messagePayload) as NlmMessageContract.NlmTestResRequest;
                    //NlmTestResRequestMessage#NlmXid = xid;
                    dispatcher(NlmTestResRequestMessage);
                }
                return true;
            case 12 =>
                if (isCall)
                {
                    NlmMessageContract.NlmLockResRequest NlmLockResRequestMessage = BinaryDecoder<NlmMessageContract.NlmLockResRequest>(messagePayload) as NlmMessageContract.NlmLockResRequest;
                    //NlmLockResRequestMessage#NlmXid = xid;
                    dispatcher(NlmLockResRequestMessage);
                }
                return true;
            case 13 =>
                if (isCall)
                {
                    NlmMessageContract.NlmCancelResRequest NlmCancelResRequestMessage = BinaryDecoder<NlmMessageContract.NlmCancelResRequest>(messagePayload) as NlmMessageContract.NlmCancelResRequest;
                    //NlmCancelResRequestMessage#NlmXid = xid;
                    dispatcher(NlmCancelResRequestMessage);
                }
                return true;
            case 14 =>
                if (isCall)
                {
                    NlmMessageContract.NlmUnlockResRequest NlmUnlockResRequestMessage = BinaryDecoder<NlmMessageContract.NlmUnlockResRequest>(messagePayload) as NlmMessageContract.NlmUnlockResRequest;
                    //NlmUnlockResRequestMessage#NlmXid = xid;
                    dispatcher(NlmUnlockResRequestMessage);
                }
                return true;
            case 15 =>
                if (isCall)
                {
                    NlmMessageContract.NlmGrantedResRequest NlmGrantedResRequestMessage = BinaryDecoder<NlmMessageContract.NlmGrantedResRequest>(messagePayload) as NlmMessageContract.NlmGrantedResRequest;
                    //NlmGrantedResRequestMessage#NlmXid = xid;
                    dispatcher(NlmGrantedResRequestMessage);
                }
                return true;
            case 20 =>
                if (isCall)
                {
                    NlmMessageContract.NlmShareRequest NlmShareRequestMessage = BinaryDecoder<NlmMessageContract.NlmShareRequest>(messagePayload) as NlmMessageContract.NlmShareRequest;
                    NlmShareRequestMessage#NlmXid = xid;
                    dispatcher(NlmShareRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmShareResponse NlmShareResponseMessage = BinaryDecoder<NlmMessageContract.NlmShareResponse>(messagePayload) as NlmMessageContract.NlmShareResponse;
                    NlmShareResponseMessage#NlmXid = xid;
                    dispatcher(NlmShareResponseMessage);
                }
                return true;
            case 21 =>
                if (isCall)
                {
                    NlmMessageContract.NlmUnshareRequest NlmUnshareRequestMessage = BinaryDecoder<NlmMessageContract.NlmUnshareRequest>(messagePayload) as NlmMessageContract.NlmUnshareRequest;
                    NlmUnshareRequestMessage#NlmXid = xid;
                    dispatcher(NlmUnshareRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmUnshareResponse NlmUnshareResponseMessage = BinaryDecoder<NlmMessageContract.NlmUnshareResponse>(messagePayload) as NlmMessageContract.NlmUnshareResponse;
                    NlmUnshareResponseMessage#NlmXid = xid;
                    dispatcher(NlmUnshareResponseMessage);
                }
                return true;
            case 22 =>
                if (isCall)
                {
                    NlmMessageContract.NlmNmLockRequest NlmNmLockRequestMessage = BinaryDecoder<NlmMessageContract.NlmNmLockRequest>(messagePayload) as NlmMessageContract.NlmNmLockRequest;
                    NlmNmLockRequestMessage#NlmXid = xid;
                    dispatcher(NlmNmLockRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmNmLockResponse NlmNmLockResponseMessage = BinaryDecoder<NlmMessageContract.NlmNmLockResponse>(messagePayload) as NlmMessageContract.NlmNmLockResponse;
                    NlmNmLockResponseMessage#NlmXid = xid;
                    dispatcher(NlmNmLockResponseMessage);
                }
                return true;
            case 23 =>
                if (isCall)
                {
                    NlmMessageContract.NlmFreeAllRequest NlmFreeAllRequestMessage = BinaryDecoder<NlmMessageContract.NlmFreeAllRequest>(messagePayload) as NlmMessageContract.NlmFreeAllRequest;
                    NlmFreeAllRequestMessage#NlmXid = xid;
                    dispatcher(NlmFreeAllRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmFreeAllResponse NlmFreeAllResponseMessage = BinaryDecoder<NlmMessageContract.NlmFreeAllResponse>(messagePayload) as NlmMessageContract.NlmFreeAllResponse;
                    NlmFreeAllResponseMessage#NlmXid = xid;
                    dispatcher(NlmFreeAllResponseMessage);
                }
                return true;
            default =>
                throw ("The procedure number in Nlm must be in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23].");
                return false;
        }
    }
    else if (version == 4)
    {
        switch (procedureNumber)
        {
            case 0 =>
                if (isCall)
                {
                    NlmMessageContract.NlmNullRequest NlmNullRequestMessage = BinaryDecoder<NlmMessageContract.NlmNullRequest>(messagePayload) as NlmMessageContract.NlmNullRequest;
                    NlmNullRequestMessage#NlmXid = xid;
                    dispatcher(NlmNullRequestMessage);
                }
                else
                {
                    NlmMessageContract.NlmNullResponse NlmNullResponseMessage = BinaryDecoder<NlmMessageContract.NlmNullResponse>(messagePayload) as NlmMessageContract.NlmNullResponse;
                    NlmNullResponseMessage#NlmXid = xid;
                    dispatcher(NlmNullResponseMessage);
                }
                return true;
            case 1 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4TestRequest Nlm4TestRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4TestRequest>(messagePayload) as NlmMessageContract.Nlm4TestRequest;
                    Nlm4TestRequestMessage#NlmXid = xid;
                    dispatcher(Nlm4TestRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4TestResponse Nlm4TestResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4TestResponse>(messagePayload) as NlmMessageContract.Nlm4TestResponse;
                    Nlm4TestResponseMessage#NlmXid = xid;
                    dispatcher(Nlm4TestResponseMessage);
                }
                return true;
            case 2 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4LockRequest Nlm4LockRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4LockRequest>(messagePayload) as NlmMessageContract.Nlm4LockRequest;
                    Nlm4LockRequestMessage#NlmXid = xid;
                    dispatcher(Nlm4LockRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4LockResponse Nlm4LockResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4LockResponse>(messagePayload) as NlmMessageContract.Nlm4LockResponse;
                    Nlm4LockResponseMessage#NlmXid = xid;
                    dispatcher(Nlm4LockResponseMessage);
                }
                return true;
            case 3 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4CancelRequest Nlm4CancelRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4CancelRequest>(messagePayload) as NlmMessageContract.Nlm4CancelRequest;
                    Nlm4CancelRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4CancelRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4CancelResponse Nlm4CancelResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4CancelResponse>(messagePayload) as NlmMessageContract.Nlm4CancelResponse;
                    Nlm4CancelResponseMessage#NlmXid = xid;
                        dispatcher(Nlm4CancelResponseMessage);
                }
                return true;
            case 4 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4UnlockRequest Nlm4UnlockRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4UnlockRequest>(messagePayload) as NlmMessageContract.Nlm4UnlockRequest;
                    Nlm4UnlockRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4UnlockRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4UnlockResponse Nlm4UnlockResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4UnlockResponse>(messagePayload) as NlmMessageContract.Nlm4UnlockResponse;
                    Nlm4UnlockResponseMessage#NlmXid = xid;
                        dispatcher(Nlm4UnlockResponseMessage);
                }
                return true;
            case 5 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4GrantedRequest Nlm4GrantedRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4GrantedRequest>(messagePayload) as NlmMessageContract.Nlm4GrantedRequest;
                    Nlm4GrantedRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4GrantedRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4GrantedResponse Nlm4GrantedResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4GrantedResponse>(messagePayload) as NlmMessageContract.Nlm4GrantedResponse;
                    Nlm4GrantedResponseMessage#NlmXid = xid;
                        dispatcher(Nlm4GrantedResponseMessage);
                }
                return true;
            case 6 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4TestMsgRequest Nlm4TestMsgRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4TestMsgRequest>(messagePayload) as NlmMessageContract.Nlm4TestMsgRequest;
                    //Nlm4TestMsgRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4TestMsgRequestMessage);
                }
                return true;
            case 7 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4LockMsgRequest Nlm4LockMsgRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4LockMsgRequest>(messagePayload) as NlmMessageContract.Nlm4LockMsgRequest;
                    //Nlm4LockMsgRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4LockMsgRequestMessage);
                }
                return true;
            case 8 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4CancelMsgRequest Nlm4CancelMsgRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4CancelMsgRequest>(messagePayload) as NlmMessageContract.Nlm4CancelMsgRequest;
                    //Nlm4CancelMsgRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4CancelMsgRequestMessage);
                }
                return true;
            case 9 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4UnlockMsgRequest Nlm4UnlockMsgRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4UnlockMsgRequest>(messagePayload) as NlmMessageContract.Nlm4UnlockMsgRequest;
                    //Nlm4UnlockMsgRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4UnlockMsgRequestMessage);
                }
                return true;
            case 10 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4GrantedMsgRequest Nlm4GrantedMsgRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4GrantedMsgRequest>(messagePayload) as NlmMessageContract.Nlm4GrantedMsgRequest;
                    //Nlm4GrantedMsgRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4GrantedMsgRequestMessage);
                }
                return true;
            case 11 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4TestResRequest Nlm4TestResRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4TestResRequest>(messagePayload) as NlmMessageContract.Nlm4TestResRequest;
                    //Nlm4TestResRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4TestResRequestMessage);
                }
                return true;
            case 12 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4LockResRequest Nlm4LockResRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4LockResRequest>(messagePayload) as NlmMessageContract.Nlm4LockResRequest;
                    //Nlm4LockResRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4LockResRequestMessage);
                }
                return true;
            case 13 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4CancelResRequest Nlm4CancelResRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4CancelResRequest>(messagePayload) as NlmMessageContract.Nlm4CancelResRequest;
                    //Nlm4CancelResRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4CancelResRequestMessage);
                }
                return true;
            case 14 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4UnlockResRequest Nlm4UnlockResRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4UnlockResRequest>(messagePayload) as NlmMessageContract.Nlm4UnlockResRequest;
                    //Nlm4UnlockResRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4UnlockResRequestMessage);
                }
                return true;
            case 15 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4GrantedResRequest Nlm4GrantedResRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4GrantedResRequest>(messagePayload) as NlmMessageContract.Nlm4GrantedResRequest;
                    //Nlm4GrantedResRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4GrantedResRequestMessage);
                }
                return true;
            case 20 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4ShareRequest Nlm4ShareRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4ShareRequest>(messagePayload) as NlmMessageContract.Nlm4ShareRequest;
                    Nlm4ShareRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4ShareRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4ShareResponse Nlm4ShareResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4ShareResponse>(messagePayload) as NlmMessageContract.Nlm4ShareResponse;
                    Nlm4ShareResponseMessage#NlmXid = xid;
                        dispatcher(Nlm4ShareResponseMessage);
                }
                return true;
            case 21 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4UnshareRequest Nlm4UnshareRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4UnshareRequest>(messagePayload) as NlmMessageContract.Nlm4UnshareRequest;
                    Nlm4UnshareRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4UnshareRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4UnshareResponse Nlm4UnshareResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4UnshareResponse>(messagePayload) as NlmMessageContract.Nlm4UnshareResponse;
                    Nlm4UnshareResponseMessage#NlmXid = xid;
                        dispatcher(Nlm4UnshareResponseMessage);
                }
                return true;
            case 22 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4NmLockRequest Nlm4NmLockRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4NmLockRequest>(messagePayload) as NlmMessageContract.Nlm4NmLockRequest;
                    Nlm4NmLockRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4NmLockRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4NmLockResponse Nlm4NmLockResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4NmLockResponse>(messagePayload) as NlmMessageContract.Nlm4NmLockResponse;
                    Nlm4NmLockResponseMessage#NlmXid = xid;
                        dispatcher(Nlm4NmLockResponseMessage);
                }
                return true;
            case 23 =>
                if (isCall)
                {
                    NlmMessageContract.Nlm4FreeAllRequest Nlm4FreeAllRequestMessage = BinaryDecoder<NlmMessageContract.Nlm4FreeAllRequest>(messagePayload) as NlmMessageContract.Nlm4FreeAllRequest;
                    Nlm4FreeAllRequestMessage#NlmXid = xid;
                        dispatcher(Nlm4FreeAllRequestMessage);
                }
                else
                {
                    NlmMessageContract.Nlm4FreeAllResponse Nlm4FreeAllResponseMessage = BinaryDecoder<NlmMessageContract.Nlm4FreeAllResponse>(messagePayload) as NlmMessageContract.Nlm4FreeAllResponse;
                    Nlm4FreeAllResponseMessage#NlmXid = xid;
                        dispatcher(Nlm4FreeAllResponseMessage);
                }
                return true;
            default =>
                throw ("NLM: The procedure number in Nlm must be one of the values [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23].");
                return false;
        }
    }
    else
    {
        throw ("NLM: The version of SunRPC protocol must be one of the values: 1, 2, 3, 4.");
        return false;
    }
    return false;
}

contract NlmOperationContract
{
    accepts operation NlmNullOperation // 0
    {
        override string ToString()
        {
            return  "Nlm: Version 1/2/3/4, Nlm Null Service (0)";
        }
    }

/******************************* For Verion 1/2/3 *******************************/
    accepts operation NlmTestOperation // 1
    {
        in NlmTestargs Testargs;
        out NlmTestres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Test Service (1)";
        }
    }
    
    accepts operation NlmLockOperation // 2
    {
        in NlmLockargs Lockargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Lock Service (2)";
        }
    }
    
    accepts operation NlmCancelOperation // 3
    {
        in NlmCancargs Cancargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Cancel Service (3)";
        }
    }
    
    accepts operation NlmUnlockOperation // 4
    {
        in NlmUnlockargs Unlockargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unlock Service (4)";
        }
    }
    
    accepts operation NlmGrantedOperation // 5
    {
        in NlmTestargs Testargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Granted Service (5)";
        }
    }
    
    accepts operation NlmAsynchronousTestOperation // 6,11
    {
        in NlmTestargs Testargs;
        out NlmTestres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Asynchronous Test Service (6, 11)";
        }
    }
    
    accepts operation NlmAsynchronousLockOperation // 7,12
    {
        in NlmLockargs Lockargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Asynchronous Lock Service (7, 12)";
        }
    }
    
    accepts operation NlmAsynchronousCancelOperation // 8,13
    {
        in NlmCancargs Cancargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Asynchronous Cancel Service (8, 13)";
        }
    }
    
    accepts operation NlmAsynchronousUnlockOperation // 9,14
    {
        in NlmUnlockargs Unlockargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Asynchronous Unlock Service (9, 14)";
        }
    }
    
    accepts operation NlmAsynchronousGrantedOperation // 10,15
    {
        in NlmTestargs Testargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Asynchronous Granted Service (10, 15)";
        }
    }
    
    accepts operation NlmShareOperation // 20
    {
        in NlmShareargs Shareargs;
        out NlmShareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Share Service (20)";
        }
    }
    
    accepts operation NlmUnshareOperation // 21
    {
        in NlmShareargs Shareargs;
        out NlmShareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unshare Service (21)";
        }
    }
    
    accepts operation NlmNmLockOperation // 22
    {
        in NlmLockargs Lockargs;
        out NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm NmLock Service (22)";
        }
    }
    
    accepts operation NlmFreeAllOperation // 23
    {
        in NlmNotify Notify;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm FreeAll Service (23)";
        }
    }

/******************************* For Verion 4 *******************************/
    accepts operation Nlm4TestOperation // 1
    {
        in Nlm4Testargs Testargs;
        out Nlm4Testres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Test Service (1)";
        }
    }
    
    accepts operation Nlm4LockOperation // 2
    {
        in Nlm4Lockargs Lockargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Lock Service (2)";
        }
    }
    
    accepts operation Nlm4CancelOperation // 3
    {
        in Nlm4Cancargs Cancargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Cancel Service (3)";
        }
    }
    
    accepts operation Nlm4UnlockOperation // 4
    {
        in Nlm4Unlockargs Unlockargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unlock Service (4)";
        }
    }
    
    accepts operation Nlm4GrantedOperation // 5
    {
        in Nlm4Testargs Testargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Granted Service (5)";
        }
    }
    
    accepts operation Nlm4AsynchronousTestOperation // 6,11
    {
        in Nlm4Testargs Testargs;
        out Nlm4Testres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm4 Asynchronous Test Service (6, 11)";
        }
    }
    
    accepts operation Nlm4AsynchronousLockOperation // 7,12
    {
        in Nlm4Lockargs Lockargs;
        out Nlm4Res Res;
        static string Nlm4AsynchronousLockToText(any data)
        {
            return "Nlm: Version 4, Nlm4 Asynchronous Lock Service (7, 12)";
        }
    }
    
    accepts operation Nlm4AsynchronousCancelOperation // 8,13
    {
        in Nlm4Cancargs Cancargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm4 Asynchronous Cancel Service (8, 13)";
        }
    }
    
    accepts operation Nlm4AsynchronousUnlockOperation // 9,14
    {
        in Nlm4Unlockargs Unlockargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm4 Asynchronous Unlock Service (9, 14)";
        }
    }
    
    accepts operation Nlm4AsynchronousGrantedOperation // 10,15
    {
        in Nlm4Testargs Testargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm4 Asynchronous Granted Service (10, 15)";
        }
    }
    
    accepts operation Nlm4ShareOperation // 20
    {
        in Nlm4Shareargs Shareargs;
        out Nlm4Shareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Share Service (20)";
        }
    }
    
    accepts operation Nlm4UnshareOperation // 21
    {
        in Nlm4Shareargs Shareargs;
        out Nlm4Shareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unshare Service (21)";
        }
    }
    
    accepts operation Nlm4NmLockOperation // 22
    {
        in Nlm4Lockargs Lockargs;
        out Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm NmLock Service (22)";
        }
    }
    
    accepts operation Nlm4FreeAllOperation // 23
    {
        in Nlm4Notify Notify;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm FreeAll Service (23)";
        }
    }
}

contract NlmMessageContract
{
    // 0
    accepts message NlmNullRequest
    {
        override string ToString()
        {
            return "Nlm: Version 1/2/3/4, Nlm Null Request Message (0)";
        }
    }
    
    issues message NlmNullResponse
    {
        override string ToString()
        {
            return "Nlm: Version 1/2/3/4, Nlm Null Response Message (0)";
        }
    }
/******************************* For Verion 1/2/3 *******************************/
    // 1
    accepts message NlmTestRequest
    {
        NlmTestargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Test Request Message (1)";
        }
    }
    
    issues message NlmTestResponse
    {
        NlmTestres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Test Response Message (1)";
        }
    }
    
    // 2
    accepts message NlmLockRequest
    {
        NlmLockargs Lockargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Lock Request Message (2)";
        }
    }
    
    issues message NlmLockResponse
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Lock Response Message (2)";
        }
    }
    
    // 3
    accepts message NlmCancelRequest
    {
        NlmCancargs Cancargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Cancel Request Message (3)";
        }
    }
    
    issues message NlmCancelResponse
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Cancel Response Message (3)";
        }
    }
    
    // 4
    accepts message NlmUnlockRequest
    {
        NlmUnlockargs Unlockargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unlock Request Message (4)";
        }
    }
    
    issues message NlmUnlockResponse
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unlock Response Message (4)";
        }
    }
    
    // 5
    accepts message NlmGrantedRequest
    {
        NlmTestargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Granted Request Message (5)";
        }
    }
    
    issues message NlmGrantedResponse
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Granted Response Message (5)";
        }
    }
    
    // 6
    accepts message NlmTestMsgRequest
    {
        NlmTestargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Test Msg Request Message (6)";
        }
    }
    //message NlmTestMsgResponse{}
    
    // 7
    accepts message NlmLockMsgRequest
    {
        NlmLockargs Lockargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Lock Msg Request Message (7)";
        }
    }
    //message NlmLockMsgResponse{}
    
    // 8
    accepts message NlmCancelMsgRequest
    {
        NlmCancargs Cancargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Cancel Msg Request Message (8)";
        }
    }
    //message NlmCancelMsgResponse{}
    
    // 9
    accepts message NlmUnlockMsgRequest
    {
        NlmUnlockargs Unlockargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unlock Msg Request Message (9)";
        }
    }
    //message NlmUnlockMsgResponse{}
    
    // 10
    accepts message NlmGrantedMsgRequest
    {
        NlmTestargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Granted Msg Request (10)";
        }
    }
    //message NlmGrantedMsgResponse{}
    
    // 11
    issues message NlmTestResRequest
    {
        NlmTestres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Test Res Request (11)";
        }
    }
    //message NlmTestResResponse{}
    
    // 12
    issues message NlmLockResRequest
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Lock Res Request (12)";
        }
    }
    //message NlmLockResResponse{}
    
    // 13
    issues message NlmCancelResRequest
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Cancel Res Request (13)";
        }
    }
    //message NlmCancelResResponse{}
    
    // 14
    issues message NlmUnlockResRequest
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unlock Res Request (14)";
        }
    }
    //message NlmUnlockResResponse{}
    
    // 15
    issues message NlmGrantedResRequest
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Granted Res Request (15)";
        }
    }
    //message NlmGrantedResResponse{}
    
    // 20
    accepts message NlmShareRequest
    {
        NlmShareargs Shareargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Share Request (20)";
        }
    }
    
    issues message NlmShareResponse
    {
        NlmShareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Share Response (20)";
        }
    }
    
    // 21
    accepts message NlmUnshareRequest
    {
        NlmShareargs Shareargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unshare Request (21)";
        }
    }
    
    issues message NlmUnshareResponse
    {
        NlmShareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Unshare Response (21)";
        }
    }
    
    // 22
    accepts message NlmNmLockRequest
    {
        NlmLockargs Lockargs;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm NmLock Request (22)";
        }
    }
    
    issues message NlmNmLockResponse
    {
        NlmRes Res;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm NmLock Response (22)";
        }
    }
    
    // 23
    accepts message NlmFreeAllRequest
    {
        NlmNotify Notify;
        
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Free All Request (23)";
        }
    }
    
    issues message NlmFreeAllResponse
    {
        override string ToString()
        {
            return "Nlm: Version 1/2/3, Nlm Free All Response (23)";
        }
    }
    
/******************************* For Verion 4 *******************************/
    // 1
    accepts message Nlm4TestRequest
    {
        Nlm4Testargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Test Request Message (1)";
        }
    }
    
    issues message Nlm4TestResponse
    {
        Nlm4Testres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Test Response Message (1)";
        }
    }
    
    // 2
    accepts message Nlm4LockRequest
    {
        Nlm4Lockargs Lockargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Lock Request Message (2)";
        }
    }
    
    issues message Nlm4LockResponse
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Lock Response Message (2)";
        }
    }
    
    // 3
    accepts message Nlm4CancelRequest
    {
        Nlm4Cancargs Cancargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Cancel Request Message (3)";
        }
    }
    
    issues message Nlm4CancelResponse
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Cancel Response Message (3)";
        }
    }
    
    // 4
    accepts message Nlm4UnlockRequest
    {
        Nlm4Unlockargs Unlockargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unlock Request Message (4)";
        }
    }
    
    issues message Nlm4UnlockResponse
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unlock Response Message (4)";
        }
    }
    
    // 5
    accepts message Nlm4GrantedRequest
    {
        Nlm4Testargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Granted Request Message (5)";
        }
    }
    
    issues message Nlm4GrantedResponse
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Granted Response Message (5)";
        }
    }
    
    // 6
    accepts message Nlm4TestMsgRequest
    {
        Nlm4Testargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Test Msg Request Message (6)";
        }
    }
    //message Nlm4TestMsgResponse{}
    
    // 7
    accepts message Nlm4LockMsgRequest
    {
        Nlm4Lockargs Lockargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Lock Msg Request Message (7)";
        }
    }
    //message Nlm4LockMsgResponse{}
    
    // 8
    accepts message Nlm4CancelMsgRequest
    {
        Nlm4Cancargs Cancargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Cancel Msg Request Message (8)";
        }
    }
    //message Nlm4CancelMsgResponse{}
    
    // 9
    accepts message Nlm4UnlockMsgRequest
    {
        Nlm4Unlockargs Unlockargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unlock Msg Request Message (9)";
        }
    }
    //message Nlm4UnlockMsgResponse{}
    
    // 10
    accepts message Nlm4GrantedMsgRequest
    {
        Nlm4Testargs Testargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Granted Msg Request (10)";
        }
    }
    //message Nlm4GrantedMsgResponse{}
    
    // 11
    issues message Nlm4TestResRequest
    {
        Nlm4Testres Testres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Test Res Request (11)";
        }
    }
    //message Nlm4TestResResponse{}
    
    // 12
    issues message Nlm4LockResRequest
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Lock Res Request (12)";
        }
    }
    //message Nlm4LockResResponse{}
    
    // 13
    issues message Nlm4CancelResRequest
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Cancel Res Request (13)";
        }
    }
    //message Nlm4CancelResResponse{}
    
    // 14
    issues message Nlm4UnlockResRequest
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unlock Res Request (14)";
        }
    }
    //message Nlm4UnlockResResponse{}
    
    // 15
    issues message Nlm4GrantedResRequest
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Granted Res Request (15)";
        }
    }
    //message Nlm4GrantedResResponse{}
    
    // 20
    accepts message Nlm4ShareRequest
    {
        Nlm4Shareargs Shareargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Share Request (20)";
        }
    }
    
    issues message Nlm4ShareResponse
    {
        Nlm4Shareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Share Response (20)";
        }
    }
    
    // 21
    accepts message Nlm4UnshareRequest
    {
        Nlm4Shareargs Shareargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unshare Request (21)";
        }
    }
    
    issues message Nlm4UnshareResponse
    {
        Nlm4Shareres Shareres;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Unshare Response (21)";
        }
    }
    
    // 22
    accepts message Nlm4NmLockRequest
    {
        Nlm4Lockargs Lockargs;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm NmLock Request (22)";
        }
    }
    
    issues message Nlm4NmLockResponse
    {
        Nlm4Res Res;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm NmLock Response (22)";
        }
    }
    
    // 23
    accepts message Nlm4FreeAllRequest
    {
        Nlm4Notify Notify;
        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Free All Request (23)";
        }
    }
    
    issues message Nlm4FreeAllResponse
    {        
        override string ToString()
        {
            return "Nlm: Version 4, Nlm Free All Response (23)";
        }
    }
}

// Sizes of XDR Structures
const ushort NlmMaxStrLen = 1024;
const ushort NlmMaxNameLen = (NlmMaxStrLen + 1) as ushort;
const ushort MaxNetObjSz = 1024;

// Basic Data Types for Locking
type Netobj
{
    XdrOpaqueVariable NetObject where ValidationCheck(value.Length <= MaxNetObjSz, null, "NFS: The Length in type XdrOpaqueVariable should be less than or equal to " + (MaxNetObjSz as string));
}

/****************************** Nlm version 1/2/3 ******************************/
pattern NlmStats = enum int
{
    LCK_GRANTED               = 0,
    LCK_DENIED                = 1,
    LCK_DENIED_NOLOCKS        = 2,
    LCK_BLOCKED               = 3,
    LCK_DENIED_GRACE_PERIOD   = 4
};

type NlmStat
{
    NlmStats Ntat;
}

type NlmRes
{
    Netobj Cookie;
    NlmStat Stat;
}

type NlmHolder
{
    XDRBool Exclusive;
    XDRInt Uppid;
    Netobj Oh;
    XdrUnsignedInt LOffset;
    XdrUnsignedInt LLen;
}

type NlmTestrply
{
    NlmStats stat;
    optional [|stat is NlmStats.LCK_DENIED|] NlmHolder Holder;    // holder of the lock
}

type NlmTestres
{
    Netobj Cookie;
    NlmTestrply TestStat;
}

type NlmLock
{
    XDRString CallerName where ValidationCheck(value.Length <= NlmMaxStrLen, null, "Length of string should be less than TD required " + (NlmMaxStrLen as string));
    Netobj Fh;              //  identify a file
    Netobj Oh;              //  identify owner of a lock
    XDRInt Uppid;           //  Unique process identifier
    XdrUnsignedInt LOffset; //  File offset (for record locking)
    XdrUnsignedInt LLen;    //  Length (size of record)
}

type NlmLockargs
{
    Netobj Cookie;
    XDRBool Block;            //  Flag to indicate blocking behaviour.
    XDRBool Exclusive;        //  If exclusive access is desired.
    NlmLock Alock;            //  The actual lock data (see above)
    XDRBool Reclaim;          //  used for recovering locks
    XDRInt State;             //  specify local NSM state
}

type NlmCancargs
{
    Netobj Cookie;
    XDRBool Block;
    XDRBool Exclusive;
    NlmLock Alock;
}

type NlmTestargs
{
    Netobj Cookie;
    XDRBool Exclusive;
    NlmLock Alock;
}

type NlmUnlockargs
{
    Netobj Cookie;
    NlmLock Alock;
}

// DOS File-Sharing Data Types
pattern FshMode = enum int
{
    Fsm_DN       = 0,     //  deny none
    Fsm_DR       = 1,     //  deny read
    Fsm_DW       = 2,     //  deny write
    Fsm_DRW      = 3      //  deny read/write
};

pattern FshAccess = enum int
{
    Fsa_NONE     = 0,        //  for completeness
    Fsa_R        = 1,        //  read-only
    Fsa_W        = 2,        //  write-only
    Fsa_RW       = 3         //  read/write
};

type NlmShare 
{
    XDRString CallerName where ValidationCheck(value.Length <= NlmMaxStrLen, null, "Length of string should be less than TD required " + (NlmMaxStrLen as string));
    Netobj Fh;
    Netobj Oh;
    FshMode Mode;
    FshAccess Access;
}

type NlmShareargs
{
    Netobj Cookie;
    NlmShare Share;         //  actual share data
    XDRBool Reclaim;        //  used for recovering shares
}

type NlmShareres
{
    Netobj Cookie;
    NlmStats Stat;
    XDRInt Sequence;
}

type NlmNotify
{
    XDRString Name where ValidationCheck(value.Length <= NlmMaxNameLen, null, "Length of string should be less than TD required " + (NlmMaxNameLen as string));
    XDRHyper State;
}

/****************************** Nlm version 4 ******************************/
type Nlm4Stat
{
    Nlm4Stats Ntat;
}

type Nlm4Res
{
    Netobj Cookie;
    Nlm4Stat Stat;
}

type Nlm4Testrply
{
    Nlm4Stats stat;
    optional [|stat is Nlm4Stats.NLM4_DENIED|] Nlm4Holder Holder;    //  holder of the lock
}

type Nlm4Testres
{
    Netobj Cookie;
    Nlm4Testrply TestStat;
}

type Nlm4Lockargs
{
    Netobj Cookie;
    XDRBool Block;            //  Flag to indicate blocking behaviour.
    XDRBool Exclusive;        //  If exclusive access is desired.
    Nlm4Lock Alock;           //  The actual lock data (see above)
    XDRBool Reclaim;          //  used for recovering locks
    XDRInt State;             //  specify local NSM state
}

type Nlm4Cancargs
{
    Netobj Cookie;
    XDRBool Block;
    XDRBool Exclusive;
    Nlm4Lock Alock;
}

type Nlm4Testargs
{
    Netobj Cookie;
    XDRBool Exclusive;
    Nlm4Lock Alock;
}

type Nlm4Unlockargs
{
    Netobj Cookie;
    Nlm4Lock Alock;
}

// DOS File-Sharing Data Types
pattern Fsh4Mode = FshMode;

pattern Fsh4Access = FshAccess;

type Nlm4Shareargs
{
    Netobj Cookie;
    Nlm4Share Share;        //  actual share data
    XDRBool Reclaim;        //  used for recovering shares
}

type Nlm4Shareres
{
    Netobj Cookie;
    Nlm4Stats Stat;
    XDRInt Sequence;
}

pattern Nlm4Notify = NlmNotify;

pattern Nlm4Stats = enum int
{
    NLM4_GRANTED                    = 0,
    NLM4_DENIED                     = 1,
    NLM4_DENIED_NOLOCKS             = 2,
    NLM4_BLOCKED                    = 3,
    NLM4_DENIED_GRACE_PERIOD        = 4,
    NLM4_DEADLCK                    = 5,
    NLM4_ROFS                       = 6,
    NLM4_STALE_FH                   = 7,
    NLM4_FBIG                       = 8,
    NLM4_FAILED                     = 9
};

type Nlm4Holder
{
    XDRBool Exclusive;
    XDRInt Svid;
    Netobj Oh;
    XDRUnsignedHyper LOffset;
    XDRUnsignedHyper LLen;
}

type Nlm4Lock
{
    XDRString CallerName where ValidationCheck(value.Length <= NlmMaxStrLen, null, "Length of string should be less than TD required " + (NlmMaxStrLen as string));
    Netobj Fh;
    Netobj Oh;
    XDRInt Svid;
    XDRUnsignedHyper LOffset;
    XDRUnsignedHyper LLen;
}

type Nlm4Share
{
    XDRString CallerName where ValidationCheck(value.Length <= NlmMaxStrLen, null, "Length of string should be less than TD required " + (NlmMaxStrLen as string));
    Netobj Fh;
    Netobj Oh;
    Fsh4Mode Mode;
    Fsh4Access Access;
}
