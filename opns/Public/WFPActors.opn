module WFPActors with 
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary = 
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ]
};

using IANA;
using WFPCapture;
using ARP;
//using UDP;
using GRE;
using OSPF;
//using ICMPv6;
using Utility;
//using ICMP;
using IGMP;

autostart actor ARPOverWFP(WFPCapture.WFPFrame wfp)
{
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.LARP}
    {
        switch (fm.Payload)
        {
            case p:ARP.Packet from BinaryDecoder<ARP.Packet> =>
                dispatch endpoint ARP.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("ARP");
        }
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.LARP}
    {
        switch (fm.Payload)
        {
            case p:ARP.Packet from BinaryDecoder<ARP.Packet> =>
                dispatch endpoint ARP.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("ARP");
        }
    }
    
    process wfp accepts fm:MessageV6{Protocol is ProtocolType.LARP}
    {
        switch (fm.Payload)
        {
            case p:ARP.Packet from BinaryDecoder<ARP.Packet> =>
                dispatch endpoint ARP.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("ARP");
        }
    }
    
    process wfp accepts fm:Message2V6{Protocol is ProtocolType.LARP}
    {
        switch (fm.Payload)
        {
            case p:ARP.Packet from BinaryDecoder<ARP.Packet> =>
                dispatch endpoint ARP.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("ARP");
        }
    }
}

autostart actor GREOverWFP(WFPCapture.WFPFrame wfp)
{
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.GRE}
    {
        switch (fm.Payload)
        {
            case p:GRE.Packet from BinaryDecoder<GRE.Packet> =>
                p#SourceAddress = fm.SourceAddress.FlatAddress;
                p#DestinationAddress = fm.DestinationAddress.FlatAddress;
                dispatch endpoint GRE.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("GRE");
        }
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.GRE}
    {
        switch (fm.Payload)
        {
            case p:GRE.Packet from BinaryDecoder<GRE.Packet> =>
                p#SourceAddress = fm.SourceAddress.FlatAddress;
                p#DestinationAddress = fm.DestinationAddress.FlatAddress;
                dispatch endpoint GRE.Node[fm.DestinationAddress.FlatAddress] accepts p;
            default => 
                ThrowDecodingException("GRE");
        }
    }
}

autostart actor IGMPOverWFP(WFPCapture.WFPFrame wfp)
{
    bool netmaskFlag = false;
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.IGMP} 
    {
        DecodeAndDispatchDatagram(fm.DestinationAddress.FlatAddress, fm.Payload, ref netmaskFlag);
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.IGMP} 
    {
        DecodeAndDispatchDatagram(fm.DestinationAddress.FlatAddress, fm.Payload, ref netmaskFlag);
    }
}

autostart actor OSPFOverWFP(WFPCapture.WFPFrame wfp)
{
    process wfp accepts fm:MessageV4{Protocol is ProtocolType.OSPFIGP}
    {
        OSPF.DecodeAndDispatchPacket(fm.DestinationAddress.FlatAddress, fm.Payload);
    }
    
    process wfp accepts fm:Message2V4{Protocol is ProtocolType.OSPFIGP}
    {
        OSPF.DecodeAndDispatchPacket(fm.DestinationAddress.FlatAddress, fm.Payload);
    }
}
