protocol MIME with
StreamEncodingDefaults{Encoding = TextEncoding.ASCII},
Documentation
{
    ProtocolName = "Multi-purpose Internet Mail Extensions",
    ShortName = "MIME",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
        [
            new Reference{Name = "RFC 822"},
            new Reference{Name = "RFC 2822"},
            new Reference{Name = "RFC 1341"},
            new Reference{Name = "RFC 2045"},
            new Reference{Name = "RFC 2046"},
            new Reference{Name = "RFC 2047"},
            new Reference{Name = "RFC 2048"},
            new Reference{Name = "RFC 2049"},
            new Reference{Name = "RFC 2183"},
            new Reference{Name = "RFC 2387"},
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ]
};

using HTTP;
using Utility;
using IMAP;
using POP3;
using SMTP;
using Reassembly;

string MODULE_NAME = "MIME";

endpoint Server over IMAP.Server
    | over POP3.Server
    | over SMTP.Server
    accepts Mime issues Mime;
        
client endpoint Client connected to Server;

autostart actor MIMEOverPOP3(POP3.Server server)
{
    process server issues p:POP3.ResponseMsg where p.Payload != nothing
    {
        var mime = MIME.MimeDecoder(p.Payload as binary);
        dispatch (endpoint MIME.Server over server) issues mime;
    }
}

autostart actor MIMEOverSMTP(SMTP.Server server)
{
    /* Add dataBuffer to reassemble the data from the SMTP protocol as it can't reassemble the data if missing the first data comand message
     * [RFC 2046] In addition, a number of SMTP gateways move or remove the MIME headers, and a clever MIME decoder can take a good
     * guess at multipart boundaries even in the absence of the Content-Type header and thereby successfully decode the message.
     */
    DecodingCacheBase cache = new DecodingCacheBase{};

    process server accepts p:SMTP.MailPacket where p.Payload != nothing
                                                    /* Verify if the first recieved Payload contains the MIME data
                                                     * 1. It should contain "MIME-Version" if having the MIME headers;
                                                     * 2. It should contain "--" if the MIME headers is removed
                                                     */
                                                    && (cache.Buffer != $[] || (HasMimeVersion(p.Payload as binary) || (p.Payload as binary).IndexOf($[2D2D]) >= 0))
    {
        cache.Buffer += p.Payload as binary;
        cache.Origins += [p];
        bool isComplete = true;

        // Check if the data is complete for multipart content-type MIME
        if (cache.Buffer.IndexOf($[6D756C746970617274]) > 0) // The binary value of "multipart"
        {
            isComplete = HasCloseDelimiter(cache.Buffer);
        }

        // The data is complete
        if (isComplete)
        {
            // Has MIME headers
            Mime mime;
            if (HasMimeVersion(cache.Buffer))
            {
                mime = MimeDecoder(cache.Buffer);
            }
            // The MIME headers are removed
            else
            {
                var body = MimeBodyDecoder(cache.Buffer, {});
                if (body != null)
                {
                    mime = new Mime
                    {
                        Headers = {},
                        Bodies = body
                    };
                    mime.SourceData = cache.Buffer;
                }
            }
            if (mime != null)
            {
                mime.Origins = cache.Origins;
                dispatch (endpoint MIME.Server over server) accepts mime;
                cache.Buffer = $[];
                cache.Origins = [];
            }
            else
            {
                cache.Clear();
                throw "MIME: Invalid data";
            }
        }
    }
    
    ~endpoint(SMTP.Server e)
    {
        cache.Clear();
    }
}

autostart actor MIMEOverIMAP(IMAP.Server server)
{
    process server accepts p:IMAP.RequestMsg where p.Payload != nothing && HasMimeVersion(p.Payload as binary)
    {
        var mime = MIME.MimeDecoder(p.Payload as binary);
        dispatch (endpoint MIME.Server over server) accepts mime;
    }

    process server issues p:IMAP.ResponseMsg where p.Payload != nothing && HasMimeVersion(p.Payload as array<binary>)
    {
        array<binary> payloads = p.Payload as array<binary>;
        foreach (var payload in payloads)
        {
            if (HasMimeVersion(payload))
            {
                var mime = MIME.MimeDecoder(payload);
                dispatch (endpoint MIME.Server over server) issues mime;
            }
        }
    }
}

// Indentifies whether the payload of lower protocol contains MIME data by checking "MIME-Version"
bool HasMimeVersion(array<binary> payloads)
{
    foreach (var payload in payloads)
    {
        if (HasMimeVersion(payload))
        {
            return true;
        }
    }

    return false;
}

bool HasMimeVersion(binary payload)
{
     return payload.IndexOf($[4D494D452D56657273696F6E]) > 0; // The binary value of "MIME-Version"
}

// Indentifies whether the payload of lower protocol contains MIME data by checking the boundary delimiters.
bool HasCloseDelimiter(binary buffer)
{
    /* To see whether the data contains the closing boundary delimiter: a delimiter line is identical to the previous
     * delimiter lines, with the addition of two more hyphens after the boundary parameter value.
     */
    var firstOffset = buffer.IndexOf($[0D0A2D2D]) + 2; // Get the byte position of the first DashBoundary in buffer

    // Bug#37249 - Exception thrown if using LastIndexOf function to find some certain binary value.
    //var lastOffset = buffer.LastIndexOf($[0D0A2D2D]) + 2;

    // WORKAROUND - Start
    var lastOffset = buffer.LastIndexOf($[2D2D]);
    while (lastOffset > firstOffset && buffer.Segment(lastOffset - 2, 2) != $[0D0A])
    {
        lastOffset = buffer.Segment(0, lastOffset).LastIndexOf($[2D2D]);
    }
    // WORKAROUND - End

    if (lastOffset > firstOffset)
    {
        optional string firstDashBoundary = DashBoundary(buffer.Segment(firstOffset));
        if (firstDashBoundary != nothing)
        {
            return ContainCloseDelimiter(buffer.Segment(lastOffset), (firstDashBoundary as string) + "--");
        }
    }

    return false;
}

// Secondary parsing header of body part.(Copy from HTTP)
map<string, any> ParseBodyHeaders(map<string, any> headers)
{
    set<string> keys = headers.Keys;
    if (keys["Content-Type"])
    {
        headers = ParseFieldInHeader(MODULE_NAME, "Content-Type", headers, ContentType);
    }
    // Future Reference: Need to add types which may occur in bodypart's header.
    // Currently known: "Content-Disposition", "Content-Type"
    return headers;
}

// Temporarily parse "Content-Type" in header to strong type, and produce strong type.
// Should redefined follow mime's rfc.
syntax ContentType = s:MediaType => new HeaderFieldType
                                       {
                                           Value = s.Value,
                                           Parameters = ((s.Parameters != nothing && s.Parameters as map<string, optional string> == {}) ? nothing : s.Parameters)
                                       };

Mime MimeDecoder(binary sourceData)
{
    stream s = sourceData;
    optional map<string, any> oheader  = BodyPartHeader(s);
    if (oheader == nothing)
    {
        ThrowDecodingException("MIME", "BodyPartHeader");
    }

    map<string, any> header = ParseBodyHeaders(oheader as map<string, any>);

    CRLF(s);

    var mime = new Mime
        {
            Headers = header,
            Bodies = (s.BytePosition == s.ByteLength? nothing : MimeBodyDecoder(sourceData.Segment(s.BytePosition), header))
        };

    mime.SourceData = sourceData;
    return mime;
}

message Mime
{
    HttpHeadersType Headers;
    optional MimeBody Bodies;
    override string ToString()
    {
        string display;
        if (("MIME-Version" in Headers) && (Headers["MIME-Version"] is string))
        {
            display += "MIME-Version: " + (Headers["MIME-Version"] as string) + ", ";
        }
        if ("Content-Type" in Headers && Headers["Content-Type"] is HeaderFieldType)
        {
            var contentType = Headers["Content-Type"] as HeaderFieldType;
            display += "Content-Type: " + contentType.Value.ToString();
        }
        return display;
    }
}

// This method only decode Mime's body. In MIME over HTTP, MIME's frame only contains body.
// For contents of simple type, currently parse them with binary, maybe need Secondary parsing with syntax.
MimeBody MimeBodyDecoder(binary sourceData, map<string, any> headers)
{
    stream s = sourceData;
    string sourceString = MatchString(sourceData) as string;
    array<any> bodies = [];
    string dashBoundary = null;

    // Get the boundary from header
    if ("Content-Type" in headers && headers["Content-Type"] is HeaderFieldType
            && (headers["Content-Type"] as HeaderFieldType).Parameters != nothing
            && "boundary" in ((headers["Content-Type"] as HeaderFieldType).Parameters as map<string, optional string>).Keys)
    {
        // Get boundary string from 2 places: 1. HTTP header for the first one. 2. for recursive case, get from parent bodypart's header.
        optional string str = ((headers["Content-Type"] as HeaderFieldType).Parameters as map<string, optional string>)["boundary"];
        dashBoundary = "--" + (str == nothing ? "" : (str as string));
    }
    // Update for MIME over SMTP: Guess the boundary if the header is removed
    else if (headers == {})
    {
        var boundaryOffset = sourceData.IndexOf($[2D2D]);
        if (boundaryOffset >= 0)
        {
            dashBoundary = DashBoundary(sourceData.Segment(boundaryOffset)) as string;
        }
    }

    if (dashBoundary != null)
    {
        string closeDelimiter = dashBoundary + "--";
        var closeDashBoundaryPos = sourceString.LastIndexOf(closeDelimiter);

        // Data is uncompleted.
        if (closeDashBoundaryPos < 0)
        {
            throw "MIME message is not decoded successfully, the possible reason should be data format is inconsistent with protocol specification or HTTP payload is truncated.";
        }

        // Skip Preamble part
        var preambleSize = sourceString.IndexOf(dashBoundary);
        if (preambleSize > 0)
        {
            BinaryDecoder<Blob[preambleSize as uint]>(s);
        }

        // Check if it has reached to the last boundary
        while (s.BytePosition < closeDashBoundaryPos)
        {
            // Parse header(including open delimiter)
            optional MultipartBodyHeaderType oheader = MultipartBodyHeader(s);
            // If decode header failed, throw exception
            if (oheader == nothing)
            {
                ThrowDecodingException("MIME", "MultipartBodyHeader");
            }

            // Otherwise, continue
            MultipartBodyHeaderType header = oheader as MultipartBodyHeaderType;

            header.Headers = ParseBodyHeaders(header.Headers);

            var body = new MultipartBodyType
                        {
                            Headers = header.Headers,
                        };
            // End the parsing if there's no data left for Body part
            if (s.BytePosition == s.ByteLength)
            {
                bodies += [body];
                break;
            }

            // In case of more than one close delimiter
            if (header.Delimiter == closeDelimiter)
            {
                continue;
            }
            
            // Temporary variable to keep content in body part.
            (Mime | MimeBody | string | binary) content;
            // Get the data size of the Content part
            var contentSize = sourceString.Segment(s.BytePosition).IndexOf(dashBoundary);
            // Get the binary data of the Content part
            binary contentData = (BinaryDecoder<Blob[contentSize as uint]>(s) as Blob).Data;

            if ("Content-Type" in header.Headers && header.Headers["Content-Type"] is HeaderFieldType)
            {
                // Get Content-Type from header of bodypart.
                string contentType = (header.Headers["Content-Type"] as HeaderFieldType).Value;
                // Mulitpart body.
                if (contentType.Contains("multipart"))
                {
                    content = MimeBodyDecoder(contentData, header.Headers);
                }
                // full Mime
                else if (contentType.Contains("message"))
                {
                    content = MimeDecoder(contentData);
                }
                else if (contentType.Contains("text"))
                {
                    // This content may be further parsed by uplayer protocols.
                    content = contentData;
                }
                // Simple type.
                else
                {
                    content = contentData;
                }
            }
            // Content-type does not exist, default type.
            else
            {
                // Future Reference: maybe it's binary, not string. no need MatchString(contentData)
                content = MatchString(contentData);
            }

            body.Content = content;
            bodies += [body];
        }
    }
    else if (headers != {})
    {
        bodies = [sourceString];
    }
    else
    {
        return null;
    }

    var m = new MimeBody
                {
                    Bodies = bodies
                };
    m.SourceData = sourceData;
    return m;
}

bool ContainCloseDelimiter(stream s, string closeDelimiter)
{
    string str = MatchString(s) as string;
    return str.IndexOf(closeDelimiter) == 0;
}

syntax decoder = TextDecoder;

// Not from RFC, but only to set header's content into a map.
syntax BodyPartHeader = kk:(ss:MsgHeader CRLF => ss)* => HTTP.MergeHeaders(kk);
syntax MsgHeader      = k:FieldNames ":" v:(FieldValues?) => new HTTP.KeyValuePair{Key = k, Value = (v.Count == 0 ? "" : v[0])};
syntax FieldNames     = k:regex{\\\\w[^:]*} => k;
// Regex: Pass QE Check 8/5/2013
// Change the FieldValues syntax from: ([^\r\n]*\r\n[\\t ]+)*[^\r\n]* to: ([^\r\n]*\r\n[\\t ])*[^\r\n]*
syntax FieldValues = k:regex{([^\r\n]*\r\n[\\t ])*[^\r\n]*}=> k.Trim();
syntax BodyContent = s:(regex{[^\r\n]*})? CRLF=> (s.Count == 0 ? "" : s[0]);

type MimeBody
{
    (array<MultipartBodyType | string | any>) Bodies;
    
    override string ToString()
    {
        return "MimeBody";
    }
}

// Add "HTab?" in MultipartBodyHeader. Root cause: rfc 2049, page 7, section 4.
syntax MultipartBodyHeader = delimiter:Delimiter TransportPadding CRLF HTab? header:BodyPartHeader CRLF?
        =>new MultipartBodyHeaderType
                        {
                            Delimiter = delimiter,
                            Headers = header
                        };

type MultipartBodyHeaderType
{
    string Delimiter;
    map<string, any> Headers;
}

type MultipartBodyType
{
    HttpHeadersType Headers;
    (Mime | MimeBody | string | binary | any) Content;
}

// Not from RFC, only use to cast binary to string, so we are able to traverse the string to look for expected sub-string.
syntax MatchString    = s:regex{(.|\n)*} => s;

//RFC 2822
syntax Text            = s:regex{.} => s;
syntax CR              = "\r";
syntax LF              = "\n";
syntax CRLF            = s1:CR s2:LF => (s1 + s2);
syntax NoWSCTL         = regex {\x01-\x08} | regex {\x11-\x12} | regex {\x14-\x31} | regex {\x127};
syntax WSP             = s:(Space | HTab) => s;
syntax FWS             = (WSP* CRLF)? WSP+;
syntax CFWS            = (FWS? Comment)* (FWS? Comment) | FWS;
syntax CText           = NoWSCTL | regex {\x33-\x39} | regex {\x42-\x91} | regex {\x93-\x126};
syntax CContent        = CText | QuotedPair ;//CText | QuotedPair| Comment;
syntax Comment         = "(" (FWS? CText | QuotedPair)* FWS? ")";//"(" (FWS? CContent)* FWS? ")";
//syntax QuotedPair      = ("\\" Text)?; // | ObsQp;
syntax Message         = Fields (CRLF Body)?;  // | obs-fields
syntax Fields          = (Trace (ResentDate | ResentFrom | ResentSender | ResentTo | ResentCc | ResentBcc | ResentMsgId)*)*
                         (OrigDate | From | Sender | ReplyTo | To | Cc | Bcc | Messageid | InReplyTo | References | Subject | Comments | Keywords | OptionalField)*;
syntax Body            = (Text* CRLF)* Text*;
syntax Trace           = Return? Received*;
syntax Return          = Path CRLF;
syntax Path            = CFWS? "<" (CFWS? | AddrSpec) ">" CFWS?; //| obs-path
syntax Received        = NamValList ";" Datetime CRLF;
syntax NamValList      = CFWS? (NameValPair (CFWS NameValPair)*)?;
syntax NameValPair     = ItemName CFWS ItemMIMEValue;
syntax ItemName        = Alpha ("-"? (Alpha | Digit))*;
syntax ItemMIMEValue   = AngleAddr* | AddrSpec | Atom | Domain | MsgId;
syntax Subject         = Unstructured CRLF;
syntax UText           = NoWSCTL | regex{\x33-\x126}; // | obs-utext
syntax Unstructured    = (FWS? UText)* FWS?;
syntax Comments        = Unstructured CRLF;
syntax Keywords        = Phrase ("," Phrase)* CRLF;
syntax OptionalField   = FieldName ":" Unstructured CRLF;
syntax FieldName       = FText*;
syntax FText           = regex{\x33-\x57} | regex{\x59-\x126};
syntax OrigDate        = Datetime CRLF;
syntax Datetime        = (DayOfWeek ",")? Date FWS Time (CFWS)?;
syntax DayOfWeek       = FWS? DayName; // | obs-day-of-week
syntax DayName        = "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun";
syntax Date            = Day Month Year;
syntax Year            = Digit*;// obs-year
syntax Month           = FWS MonthName FWS; // obs-month
syntax MonthName      = "Jan" | "Feb" | "Mar" | "Apr" | "May" | "Jun" | "Jul" | "Aug" | "Sep" | "Oct" | "Nov" | "Dec";
syntax Day             = FWS? Digit*; // obs-day
syntax Time            = TimeOfDay FWS Zone;
syntax TimeOfDay       = Hour ":" Minute ( ":" Second )? ;
syntax Hour            = Digit*; // obs-hour
syntax Minute          = Digit*; // obs-minute
syntax Second          = Digit*; // obs-second
syntax Zone            = ( "+" | "-" ) Digit*;// | obs-zone
syntax From            = MailboxList CRLF;
syntax Sender          = Mailbox CRLF;
syntax ReplyTo         = AddressList CRLF;
syntax To              = AddressList CRLF;
syntax Cc              = AddressList CRLF;
syntax Bcc             = (AddressList | CFWS?)? CRLF;
syntax Messageid       = MsgId CRLF;
syntax InReplyTo       = MsgId* CRLF;
syntax References      = MsgId* CRLF;
syntax MsgId           = CFWS? "<" IdLeft "@" IdRight ">" CFWS?;
syntax IdLeft          = DotAtomText | NoFoldQuote; //| obs-id-left
syntax IdRight         = DotAtomText | NoFoldLiteral; //| obs-id-right
syntax NoFoldQuote     = Dquote (QText | QuotedPair)* Dquote;
syntax NoFoldLiteral   = "[" (DText | QuotedPair)* "]";
syntax ResentDate      = Datetime CRLF;
syntax ResentFrom      = MailboxList CRLF;
syntax ResentSender    = Mailbox CRLF;
syntax ResentTo        = AddressList CRLF;
syntax ResentCc        = AddressList CRLF;
syntax ResentBcc       = (AddressList | CFWS?) CRLF;
syntax ResentMsgId     = MsgId CRLF;
syntax MailboxList     = Mailbox ("," Mailbox)*; // obs-mbox-list
syntax AddressList     = Address ("," Address)*; // obs-addr-list
syntax Address         = Mailbox | Group;
syntax Mailbox         = NameAddr | AddrSpec;
syntax NameAddr        = DisplayName? AngleAddr;
syntax AngleAddr       = CFWS? "<" AddrSpec ">" CFWS?  ;// obs-angle-addr
syntax AddrSpec        = LocalPart "@" Domain ;
syntax LocalPart       = DotAtom | QuotedString ;// obs-local-part
syntax Domain          = DotAtom | DomainLiteral ;// obs-domain
syntax DotAtom         = CFWS? DotAtomText CFWS?;
syntax DotAtomText     = AText* ("." AText*)*;
syntax DomainLiteral   = CFWS? "[" (FWS? DContent)* FWS? "]" CFWS?;
syntax DContent        = DText | QuotedPair ;
syntax DText           = NoWSCTL | regex{\x33-\x90} | regex{\x94-\x126};
syntax Group           = DisplayName ":" (MailboxList | CFWS)? ";" CFWS? ;
syntax DisplayName     = Phrase;
syntax Phrase          = Word*; //| obs-phrase;
syntax Word            = Atom | QuotedString;
syntax Atom            = CFWS? AText* CFWS?;
syntax AText           = regex{[A-Za-z0-9] | \"!\" | \"#\" | \"$\" | \"%\" | \"&\" | \"'\" | \"*\" | \"+\" | \"-\" | \"/\" | \"=\" | \"?\" | \"^\" | \"_\" | \"`\" | \"{\" | \"|\" | \"}\" | \"~\"};
//syntax QuotedString    = CFWS? Dquote (FWS? QContent)* FWS? Dquote CFWS?;
syntax Dquote          = "$0022";
syntax QText           = NoWSCTL | regex{\x33} | regex {\x35-\x91} | regex {\x93-\x126};
syntax QContent        = QText | QuotedPair ;

//RFC 822
syntax Digit          = regex{[0-9]};
syntax Alpha          = regex{[A-Za-z]};
syntax LWspChar       = Space | HTab ;
syntax Space          = " ";
syntax HTab           = "\t";
syntax Tab            = HTab;

//RFC 2045
// MIME Header Fields
syntax EntityHeaders        = (Content CRLF)? (encoding CRLF)? (Id CRLF)? (Description CRLF)? (MIMEExtensionField CRLF)*;
syntax MIMEMessageHeaders   = EntityHeaders Fields Version CRLF;
syntax MIMEPartHeaders      = EntityHeaders;// Future Reference:  Fields?;

// Content-Type Header Field
syntax Content         = "Content-Type" ":" Type "/" SubType (";" Parameter)*;
//syntax Type            = DiscreteType | CompositeType;
syntax DiscreteType    = "text" | "image" | "audio" | "video" | "application" | ExtensionToken;
syntax CompositeType   = "message" | "multipart" | ExtensionToken;
syntax ExtensionToken  = IetfToken | XToken;
syntax IetfToken = Token;//<An extension token defined by a standards-track RFC and registered with IANA.>
syntax XToken = Token;//<The two characters "X-" or "x-" followed, with no intervening white space, by any token>
//syntax SubType = ExtensionToken | IanaToken;
syntax IanaToken = Token; //<A publicly-defined extension token. Tokens of this form must be registered with IANA as specified in RFC 2048.>
//syntax Parameter = Attribute "=" MIMEValue;
//syntax Attribute = Token;
syntax MIMEValue = Token | QuotedString;
//syntax Token = regex{[^\x32[\x0-\x37]\x127 ]+};//1*<Any CHAR except SPACE, CTLs, and tspecials or especials>
syntax TSpecials = regex{ \"(\" | \")\" | \"<\" | \">\" | \"@\" | \",\" | \";\" | \":\" | \"\\\\\\" | \"\"\" | \"/\" | \"[\" | \"]\" | \"?\" | \"=\" };

// Content-Transfer-Encoding Syntax
syntax encoding = "Content-Transfer-Encoding" ":" Mechanism;
syntax Mechanism = "7bit" | "8bit" | "binary" | "quoted-printable" | "base64" | IetfToken | XToken;

// Quoted-Printable Content-Transfer-Encoding
syntax QuotedPrintable = QpLine (CRLF QpLine)*;
syntax QpLine = (QpSegment TransportPadding CRLF)* QpPart TransportPadding;
syntax QpPart = QpSection;  // Future Reference: Validation, Maximum length of 76 characters
syntax QpSegment = QpSection *(Space | Tab) "=";    // Future Reference: Validation, Maximum length of 76 characters
syntax QpSection = ((PText | Space | Tab)* PText)?;

syntax PText = HexOctet | SafeChar;
syntax SafeChar = regex{\x33-\x60} | regex{\x62-\x126};
syntax HexOctet = "=" (Digit | "A" | "B" | "C" | "D" | "E" | "F")*;


// Content-ID Header Field
syntax Id = MsgId;
syntax Description = t:(Text*) => t;
syntax MIMEExtensionField = regex{^Content-};//<Any RFC 822 header field which begins with the string "Content-">
syntax Version = "MIME-Version" ":" Digit* "." Digit*;

//RFC 2046
//syntax Boundary = s1:((s:BChars => s)*) s2:BCharsNoSpace => ConvertStringArrayToString(s1 + [s2]);

syntax Boundary = ss: BChars* => ConvertStringArrayToString(ss);

syntax BChars   = s:(BCharsNoSpace | " ") => s;

//syntax BCharsNoSpace = s:(Digit | Alpha | regex{\"'\" | \"(\" | \")\" | \"+\" | \"_\" | \",\" | \"-\" | \".\" | \"/\" | \":\" | \"=\" | \"?\"}) => s;
// Future Reference: not from rfc, should use above commented BCharsNoSpace
syntax BCharsNoSpace = s:(Digit | Alpha | regex{[^\r\n]}) => s;

syntax DashBoundary = s0:"--" s1:Boundary => (s0 + s1);

// page 22
//syntax MultipartBody = (Preamble CRLF)? s0:DashBoundary s1:TransportPadding CRLF s2:BodyPart Encapsulation* CloseDelimiter TransportPadding (CRLF Epilogue)?;

// Bug: syntax is unable to match "empty".
syntax TransportPadding = s:LWspChar* => ((s == null) ? "" : s);

//syntax Encapsulation = Delimiter TransportPadding CRLF BodyPart;

//syntax Delimiter = CRLF DashBoundary;
syntax Delimiter = s:DashBoundary => s;

//syntax Preamble = s:DiscardText =>s CRLF?;
syntax Preamble = preamble:(p:(distext:DiscardText CRLF =>distext)? CRLF? => (p.Count == 0 ? "" : p[0]))
                    =>preamble;

//syntax DiscardText = (Text* CRLF)* Text*;  // t1:((ts:(t:Text => t)* => ts) CRLF)* t2:((t:Text => t)*) => (t1 + t2);
syntax DiscardText    = s:regex{[^-{2}][^\r\n]*} => s;

// Future Reference: Should implement and support RFC2046, page 23.
//syntax BodyPart = MIME-part-headers [CRLF Octet*]

syntax Octet = regex{[$[00]-$[FF]]};

//RFC  2047
//syntax EncodedWord = "=?" Charset "?" encoding "?" EncodedText "?=";

//syntax Charset = Token;

//syntax Especials = regex{\"(\" | \")\" | \"<\" | \">\" | \"@\" | \",\" | \";\" | \":\" | \"\"\" | \"/\" | \"[\" | \"]\" | \"?\" | \".\" | \"=\"};

//syntax  EncodedText = regex{[^\?\x20]+};//1*<Any printable ASCII character other than "?"or SPACE>;

//RFC 2387
//syntax RelatedParam   = ( ";" "start" "=" Cid )? ( ";" "start-info"  "=" ( CidList | MIMEValue ) )?( ";" "type"  "=" Type "|" SubType )?;

//syntax CidList        = Cid CidList;

//syntax Cid            = MsgId;

//RFC 2183  Content-Disposition in bodypart'header
syntax Disposition = "Content-Disposition" DispositionType (";" DispositionParm)*;
syntax DispositionType = "inline" | "attachment" | ExtensionToken;
syntax DispositionParm = FilenameParm | CreationDateParm | ModificationDateParm | ReadDateParm | SizeParm | Parameter;
syntax FilenameParm = "filename" "=" MIMEValue;
syntax CreationDateParm = "creation-date" "=" QuotedDatetime;
syntax ModificationDateParm = "modification-date" "=" QuotedDatetime;
syntax ReadDateParm = "read-date" "=" QuotedDatetime;
syntax SizeParm = "size" "=" Digit*;
syntax QuotedDatetime = Datetime;
syntax MediaType        = s1:Type s2:"/" s3:SubType s5:((LWspChar | CRLF)* ";" (LWspChar | CRLF)* s4:Parameter => s4)*
                        => new HeaderFieldType
                        {
                         Value = (s1 + s2 + s3),
                         Parameters = ConvertArrayToMap(s5)
                        };
syntax Type             = s:Token => s;
syntax SubType          = s:Token => s;
syntax Parameter        = s1:Attribute "=" s2:ParameterValue
                        => {s1 -> s2};
syntax Attribute        = s:Token => s;
syntax ParameterValue   = s:(Token | QuotedString) => s;
syntax Token            = s:regex{[0-9a-zA-Z!#$%&`*+._'|~\x5E\x2D]+} => s;
syntax QuotedString     = Quote ss:(s:(QDText | QuotedPair) => s)* Quote => ConvertStringArrayToString(ss);
syntax QDText           = s:regex{[!\x23-\x7E \r\n]} => s;
syntax QuotedPair       = s1:"\\" s2:Char => (s1 + s2);
syntax Char             = s:regex{[\x00-\x7F]} => s;
pattern Quote           = regex{\x22};
