module PcapFileActors with 
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References = 
        [
        ],
    RevisionSummary =
        [
            new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "04/01/2013"}
        ]
};

using Standard;
using PcapFile;
using Ethernet;
using IP1394;
using WebProxy;
using WiFi;
using WiFiChannelInfo;
using LinuxCookedMode;
using Utility;
using HTTP;
using WiFiChannelInfo;
using Etw;
using EtwEvent;
using PefNdisProvider;
using WFPCapture;
using IPv4;
using IPv6;
using ERF;

autostart actor PcapFileToBasicNetworkingProtocol(PcapFile.PcapFileEndpoint pcap)
{
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_LINUX_SLL}
    {
        switch (pk.Payload)
        {
            case d:LinuxCookedMode.Datagram from BinaryDecoder<LinuxCookedMode.Datagram> =>
                dispatch (endpoint LinuxCookedMode.Node) accepts d;
            default =>
                ThrowDecodingException("PcapFile", "LinuxCookedMode");
        }
    }
}

autostart actor PcapNgFileToBasicNetworkingProtocol(PcapFile.PcapNgFileEndpoint pcapNg)
{
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_LINUX_SLL}
    {
        switch (pk.Payload)
        {
            case d:LinuxCookedMode.Datagram from BinaryDecoder<LinuxCookedMode.Datagram> =>
                dispatch (endpoint LinuxCookedMode.Node) accepts d;
            default =>
                ThrowDecodingException("PcapFile", "LinuxCookedMode");
        }
    }
}

autostart actor PcapFileToProtocol(PcapFile.PcapFileEndpoint pcap)
{
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_ETHERNET}
    {
        switch (pk.Payload)
        {
            case f:Ethernet.Frame from BinaryDecoder<Ethernet.Frame[false]> =>
                dispatch (endpoint Ethernet.Node[f.DestinationAddress.FlatAddress]) accepts f;
            default =>
                ThrowDecodingException("PcapFile", "Ethernet");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_RAW || Network is PcapLinkTypeCode.LINKTYPE_12}
    {
        switch (pk.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder<IPv4.Datagram> =>
                dispatch (endpoint IPv4.ReassemblyNode[d.DestinationAddress.FlatAddress]) accepts d;
            case d:IPv6.Datagram from BinaryDecoder<IPv6.Datagram> =>
                dispatch (endpoint IPv6.ReassemblyNode[d.DestinationAddress.FlatAddress]) accepts d;
            default =>
                ThrowDecodingException("PcapFile", "RAW");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IEEE802_11}
    {
        switch (pk.Payload)
        {
            case wifi:NetMon3WiFiChannelMessage from BinaryDecoder<NetMon3WiFiChannelMessage> =>
                dispatch endpoint WiFiChannelNode accepts wifi;
            default =>
                if (!WiFi.DecodeWiFiMessageAndDispatch(pk.Payload, false))
                {
                    ThrowDecodingException("PcapFile, WiFi");
                }
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IEEE802_11_RADIOTAP}
    {
        switch (pk.Payload)
        {
            case m:ieee80211_radiotap from BinaryDecoder<ieee80211_radiotap> =>
                WiFi.DecodeWiFiMessageAndDispatch(m.data, false);
            default =>
                ThrowDecodingException("PcapFile", "ieee80211_radiotap");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_APPLE_IP_OVER_IEEE1394}
    {
        switch (pk.Payload)
        {
            case f:IP1394.Frame from BinaryDecoder<IP1394.Frame> =>
                dispatch (endpoint IP1394.ReassemblyNode[f.DestinationAddress.FlatAddress < f.SourceAddress.FlatAddress ? f.DestinationAddress.FlatAddress: f.SourceAddress.FlatAddress]) accepts f;
            default =>
                ThrowDecodingException("PcapFile", "IP1394");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IPV4}
    {
        switch (pk.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder<IPv4.Datagram> =>
                dispatch endpoint IPv4.ReassemblyNode[d.DestinationAddress.FlatAddress < d.SourceAddress.FlatAddress ? d.DestinationAddress.FlatAddress : d.SourceAddress.FlatAddress] accepts d;
            default =>
                ThrowDecodingException("PcapFile", "IPv4");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_IPV6}
    {
        switch (pk.Payload)
        {
            case d:IPv6.Datagram from IPv6Decoder =>
                dispatch endpoint IPv6.ReassemblyNode[d.DestinationAddress.FlatAddress < d.SourceAddress.FlatAddress ? d.DestinationAddress.FlatAddress : d.SourceAddress.FlatAddress] accepts d;
            default =>
                ThrowDecodingException("PcapFile", "IPv6");
        }
    }
    process pcap accepts pk:PcapFile.Packet{Network is PcapLinkTypeCode.LINKTYPE_ERF}
    {
        switch (pk.Payload)
        {
            case r:ERF.ERFRecord from BinaryDecoder<ERF.ERFRecord> =>
                dispatch endpoint ERF.Node accepts r;
            default =>
                ThrowDecodingException("PcapFile", "ERF");
        }
    }
}

autostart actor PcapNgFileToProtocol(PcapFile.PcapNgFileEndpoint pcapNg)
{
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_ETHERNET}
    {
        switch (pk.Payload)
        {
            case f:Ethernet.Frame from BinaryDecoder<Ethernet.Frame[false]> =>
                dispatch (endpoint Ethernet.Node[f.DestinationAddress.FlatAddress]) accepts f;
            default =>
                ThrowDecodingException("PcapNgFile", "Ethernet");
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_RAW || LinkType is PcapNgLinkTypeCode.LINKTYPE_12}
    {
        switch (pk.Payload)
        {
            case d:IPv4.Datagram from BinaryDecoder<IPv4.Datagram> =>
                dispatch (endpoint IPv4.ReassemblyNode[d.DestinationAddress.FlatAddress]) accepts d;
            case d:IPv6.Datagram from BinaryDecoder<IPv6.Datagram> =>
                dispatch (endpoint IPv6.ReassemblyNode[d.DestinationAddress.FlatAddress]) accepts d;
            default =>
                ThrowDecodingException("PcapNgFile", "RAW");
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_IEEE802_11}
    {
        switch (pk.Payload)
        {
            case wifi:NetMon3WiFiChannelMessage from BinaryDecoder<NetMon3WiFiChannelMessage> =>
                dispatch endpoint WiFiChannelNode accepts wifi;
            default =>
                if (!WiFi.DecodeWiFiMessageAndDispatch(pk.Payload, false))
                {
                    ThrowDecodingException("PcapNgFile, WiFi");
                }
        }
    }
    process pcapNg accepts pk:PcapFile.PacketNg{LinkType is PcapNgLinkTypeCode.LINKTYPE_APPLE_IP_OVER_IEEE1394}
    {
        switch (pk.Payload)
        {
            case f:IP1394.Frame from BinaryDecoder<IP1394.Frame> =>
                dispatch (endpoint IP1394.ReassemblyNode[f.DestinationAddress.FlatAddress < f.SourceAddress.FlatAddress ? f.DestinationAddress.FlatAddress: f.SourceAddress.FlatAddress]) accepts f;
            default =>
                ThrowDecodingException("PcapNgFile", "IP1394");
        }
    }
}

type ieee80211_radiotap_header
{
    byte it_version;
    byte it_pad;
    ushort it_len;
    uint it_present;
}

type ieee80211_radiotap : ieee80211_radiotap_header
{
    binary radiotapdata with BinaryEncoding{Length = (it_len - 8) as uint};
    binary data;
}
