protocol DHCPv6 with 
BinaryEncodingDefaults{Endian = Endian.Big},
Documentation
{
    ProtocolName = "Dynamic Host Configuration Protocol for IPv6",
    ShortName = "DHCPv6",
    Description = ""
},
OPNAuthoring
{
    Copyright = "(c) Microsoft Corporation",
    References =
       [
            new Reference{Name = "RFC 3315"},
            new Reference{Name = "RFC 3319"},
            new Reference{Name = "RFC 3646"},
            new Reference{Name = "RFC 3633"},
            new Reference{Name = "RFC 3898"},
            new Reference{Name = "RFC 1035"},
            new Reference{Name = "RFC 4075"},
            new Reference{Name = "RFC 4242"},
            new Reference{Name = "RFC 4280"},
            new Reference{Name = "RFC 4704"},
            new Reference{Name = "RFC 4649"},
            new Reference{Name = "RFC 4580"},
            new Reference{Name = "MS-DHCPE"},
        ],
    RevisionSummary = 
        [
             new Revision{Class = RevisionClass.Major, Version = "1.0.0", Date = "09/02/2011"}
        ]
};

using Standard;
using Ethernet;
using IPv6;
using UDP;
using Utility;
using IANA;

endpoint Server
    over UDP.Host provides Messages consumes Messages
{
    // ToCheck the RelayMessage MUST include a Relay Message option
    observe this accepts m:Messages.RelayMessage
    {
        bool hasRelayMsgOption = false;
        foreach (var op in m.Options)
        {
            if (op is RelayMsgOption)
            {
                hasRelayMsgOption = true;
                break;
            }
            ValidationCheck(hasRelayMsgOption, m, "DHCPv6: The operation must include a relay message option.");
        }
    }
};

client endpoint Client connected to Server;

// Since Bug 36618, change all the "binding" to actor temporarily.
//binding ServerOverUDP:DHCPv6.Server over host:UDP.Host
//{
    //rule host accepts UDP.Datagram{SourcePort is Port.DHCPv6S, DestinationPort is Port.DHCPv6C, Payload is m:Messages.Message from MessageDecoder}
        //=> DHCPv6.Server issues m;
    //rule host accepts UDP.Datagram{SourcePort is Port.DHCPv6C, DestinationPort is Port.DHCPv6S, Payload is m:Messages.Message from MessageDecoder}
        //=> DHCPv6.Server accepts m;
    //rule host accepts UDP.Datagram{SourcePort is Port.DHCPv6S, DestinationPort is Port.DHCPv6C, Payload is m:Messages.RelayMessage from RelayMessageDecoder}
        //=> DHCPv6.Server issues m;
    //rule host accepts UDP.Datagram{SourcePort is Port.DHCPv6C, DestinationPort is Port.DHCPv6S, Payload is m:Messages.RelayMessage from RelayMessageDecoder}
        //=> DHCPv6.Server accepts m;
//}

autostart actor ServerOverUDP(UDP.Host host)
{
    process host accepts d:UDP.Datagram where d.SourcePort == Port.DHCPv6S && d.DestinationPort == Port.DHCPv6C
    {
        switch (d.Payload)
        {
            case m:Messages.Message from BinaryDecoder =>
            dispatch (endpoint DHCPv6.Server over host) issues m;
            case m:Messages.RelayMessage from BinaryDecoder =>
            dispatch (endpoint DHCPv6.Server over host) issues m;
            default => 
            ThrowDecodingException("DHCPv6");
        }
    }
    process host accepts d:UDP.Datagram where d.SourcePort == Port.DHCPv6C && d.DestinationPort == Port.DHCPv6S
    {
        switch (d.Payload)
        {
            case m:Messages.Message from BinaryDecoder =>
            dispatch (endpoint DHCPv6.Server over host) accepts m;
            case m:Messages.RelayMessage from BinaryDecoder =>
            dispatch (endpoint DHCPv6.Server over host) accepts m;
            default => 
            ThrowDecodingException("DHCPv6");
        }
    }
    process host accepts d:UDP.Datagram where d.SourcePort == Port.DHCPv6S && d.DestinationPort == Port.DHCPv6S
    {
        switch (d.Payload)
        {
            case m:Messages.RelayMessage from BinaryDecoder =>
            dispatch (endpoint DHCPv6.Server over host) accepts m;
            default => 
            ThrowDecodingException("DHCPv6");
        }
    }
}

contract Messages
{
    // RFC 3315 Client/Server Message Formats
    message Message
    {
        MsgType Type where value != MsgType.RELAYFORW && value != MsgType.RELAYREPL;
        uint TransactionId with BinaryEncoding{Width = 24};
        array<DHCPOption> Options;
        override string ToString()
        {
            return EnumToString(Type, "DHCPv6.MsgType") + ", TransID: " + DecToHexFormat(TransactionId);
        }
    }

    // RFC 3315  Relay Agent/Server Message
    message RelayMessage
    {
        MsgType Type where value == MsgType.RELAYFORW  || value == MsgType.RELAYREPL;
        byte hopcount;
        (GlobalUnicastAddress |SiteLocalUnicastAddress) LinkAddress;
        IPv6Address PeerAddress;
        array<DHCPOption> Options;
        override string ToString()
        {
            return EnumToString(Type, "DHCPv6.MsgType");
        } 
    }
}

// RFC 3315 DHCP Message Types
pattern MsgType = enum byte
{
    SOLICIT = 1,
    ADVERTISE = 2,
    REQUEST = 3,
    CONFIRM = 4,
    RENEW = 5,
    REBIND = 6,
    REPLY =7,
    RELEASE = 8,
    DECLINE = 9,
    RECONFIGURE = 10,
    INFORMATIONREQUEST = 11,
    RELAYFORW = 12,
    RELAYREPL = 13
};

// RFC 3315 DHCP Options
pattern DHCPOption = ( ClientIdentifierOption
                         | ServerIdentifierOption   
                         | IANAOption
                         | IATAOption               
                         | IAAOption                
                         | RequestOption            
                         | PreferenceOption         
                         | ElapsedTimeOption        
                         | RelayMsgOption           
                         | AutherticationOption 
                         | ServerUnicastOption      
                         | StatusCodeOption         
                         | RapidCommitOption        
                         | DHCPEUserClassOption
                         | UserClassOption          
                         | DHCPEVendorClass
                         | VendorClassOption        
                         | DHCPEVendorSpecificInfoOption
                         | VendorSpecificInfoOption 
                         | InterfaceIDOption        
                         | ReconfigureMsgOption     
                         | ReconfigureAcceptOption
                         | SIPServerDomainOption
                         | SIPServerAddrOption
                         | DNSServersOption
                         | DomainSearchListOption
                         | IAPrefixDelegationOption
                         | IAPrefixOption
                         | NetworkInformationServerOption
                         | NetworkInformationServerV2Option
                         | NetworkInformationServerDomainNameOption
                         | NetworkInformationServerV2DomainNameOption
                         | SNTPServerListOption
                         | OptionFormat
                         | BCMCSControllerDomainNamelist
                         | BCMCSControllerIPv6addresslist
                         | RelayAgentRemoteIDOption
                         | RelayAgentSubscriberIDOption
                         | ClientFQDN);

// RFC 3315 DHCP Options
pattern OptionType = enum ushort
{
    OptionClientID = 1,
    OptionServerID = 2,
    OptionIANA = 3,
    OptionIATA = 4,
    OptionIAADDR = 5,
    OptionORO = 6,
    OptionPreference = 7,
    OptionElapsedTime = 8,
    OptionRelayMsg = 9,
    OptionAUTH = 11,
    OptionUniCast = 12,
    OptionStatusCode = 13,
    OptionRapidCommit = 14,
    OptionUserClass = 15,
    OptionVendorClass = 16,
    OptionVendorOPTS = 17,
    OptionInterfaceID = 18,
    OptionReconfMsg = 19,
    OptionReconfAccept = 20,
    OptionClientFQDN =39
};

// RFC 3315 Client Identifier Option
type ClientIdentifierOption
{
    (OptionType where value == 1) OptionCode; // OptionCode = 1
    ushort OptionLen;
    DUIDContents[OptionLen] DUID with BinaryEncoding{Length = OptionLen};
}

// RFC 3315 Server Identifier Option
type ServerIdentifierOption
{
    (OptionType where value == 2) OptionCode; // OptionCode = 2
    ushort OptionLen;
   DUIDContents[OptionLen] DUID with BinaryEncoding{Length = OptionLen};
}

// RFC 3315 Identity Association for Non-temporary Addresses Option
type IANAOption
{
    (OptionType where value == 3) OptionCode; // OptionCode = 3
    ushort OptionLen;
    uint IAID;
    uint T1;
    uint T2;
    optional [|OptionLen > 12|] (IAAOption | StatusCodeOption | FlatOption[(OptionLen - 12) as ushort]) IANAOptions;
}

// Define a type as default
type FlatOption[ushort Len]
{
    string Option with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = Len as uint};
}

// RFC 3315 Identity Association for Temporary Addresses Option
type IATAOption
{
    (OptionType where value == 4) OptionCode; // OptionCode = 4
    ushort OptionLen;
    uint IAIDL;
    optional [|OptionLen > 4|] (IAAOption | StatusCodeOption | FlatOption[(OptionLen - 4) as ushort]) IATAOptions;
}

// RFC 3315 IA IPv6Address Option
type IAAOption
{
    (OptionType where value == 5) OptionCode; // OptionCode = 5
    ushort OptionLen;
    IPv6Address IPv6Address;
    uint PreferredLifeTime;
    uint ValidLifeTime;
    optional [|OptionLen > 24|] (StatusCodeOption | FlatOption[(OptionLen - 24) as ushort]) IAAddrOptions;
}

// RFC 3315 Option Request Option
type RequestOption
{
    (OptionType where value == 6) OptionCde; // OptionCode = 6
    ushort OptionLen;
    array<ushort> ReqOptCode with BinaryEncoding{Length = OptionLen / 2 as uint}; // Future Reference: Use Enum pattern instead.
}

// RFC 3315 Preference Option
type PreferenceOption
{
    (OptionType where value == 7) OptionCode; // OptionCode = 7
    ushort OptionLen where ValidationCheck(value == 1, null, "DHCPv6: The Length field in type PreferenceOption must be set to 1, not " + DecToHexFormat(value) + ".");
    byte PreValue;
}

// RFC 3315 Elapsed Time Option
type ElapsedTimeOption
{
    (OptionType where value == 8) OptionCode; // OptionCode = 8
    ushort OptionLen where ValidationCheck(value == 2, null, "DHCPv6: The Length field in type ElapsedTimeOption must be set to 2, not " + DecToHexFormat(value) + ".");
    ushort ElapsedTime;
}

// RFC 3315 Relay Message Option
type RelayMsgOption
{
    (OptionType where value == 9) OptionCode;   // OptionCode = 9
    ushort OptionLen;
    binary DHCPRelayMessage;
}

// RFC 3315 Authentication Option
type AutherticationOption
{
    (OptionType where value == 11) OptionCode; // OptionCode = 11
    ushort OptionLen;
    byte Protocol;
    byte Algorithm;
    byte RDM;
    ulong ReplayDetection;
    binary AuthInfo with BinaryEncoding{Length = (OptionLen -11) as uint};
}

// RFC 3315 Server Unicast Option
type ServerUnicastOption
{
    (OptionType where value == 12) OptionCode; // OptionCode = 12
    ushort OptionLen where ValidationCheck(value == 16, null, "DHCPv6: The Length field in type ServerUnicastOption must be set to 16, not " + DecToHexFormat(value) + ".");
    IPv6Address ServerAddress;
}

// RFC 3315 Status Code Option
type StatusCodeOption
{
    (OptionType where value == 13) OptionCode; // OptionCode = 13
    ushort OptionLen where value == 16;
    StatusCode statusCode;
    string StatusMsg where ValidationCheck(value.IndexOf("\0") != 0, null, "DHCPv6: The StatusMsg field in type StatusCodeOption must not be null.") with BinaryEncoding{TextEncoding = TextEncoding.UTF8,Length = (OptionLen - 2) as uint};
}

// Status Codes
pattern StatusCode = enum ushort
{
    Success = 0,
    UnspecFail = 1,
    NoAddrsAvail = 2,
    NoBinding = 3,
    NotOnLink  = 4,
    UseMulticast = 5
};

// RFC 3315 Rapid Commit Option
type RapidCommitOption
{
    (OptionType where value == 14) OptionCode; // OptionCode = 14
    ushort OptionLen where ValidationCheck(value == 0, null, "DHCPv6: The Length field in type RapidCommitOption must be set to zero, not " + DecToHexFormat(value) + ".");
}

// RFC 3315 User Class Option
type UserClassOption
{
    (OptionType where value == 15) OptionCode; // OptionCode = 15
    ushort OptionLen;
    array<UserClassData> UserClassdata with BinaryEncoding{WidthForComposedType = OptionLen * 8 as int};
}

type UserClassData
{
    ushort UserClassLen;
    (binary | any) OpaqueData with BinaryEncoding{MaxLength = UserClassLen as uint};
}

// RFC 3315 Vendor Class Option
type VendorClassOption
{
    (OptionType where value == 16) OptionCode; // OptionCode = 16
    ushort OptionLen;
    uint EnterpriseNum;
    array<VendorClassData> VendorClassdata with BinaryEncoding{WidthForComposedType = (OptionLen - 4) * 8 as int};
}

type VendorClassData
{
    ushort VendorClassLen;
    (binary | any) OpaqueData with BinaryEncoding{MaxLength = VendorClassLen as uint};
}

// RFC 3315 Vendor-specific Information Option
type VendorSpecificInfoOption
{
    (OptionType where value == 17) OptionCode; // OptionCode = 17
    ushort OptionLen;
    ulong EnterpriseNum;
    (binary | any) OptionData with BinaryEncoding{Length = (OptionLen - 4) as uint};
}

// RFC 3315 Interface-Id Option
type InterfaceIDOption
{
    (OptionType where value == 18) OptionCode; // OptionCode = 18
    ushort OptionLen;
    binary InterfaceId;
}

// RFC 3315 Reconfigure Message Option
type ReconfigureMsgOption
{
    (OptionType where value == 19) OptionCode; // OptionCode = 19
    ushort OptionLen where ValidationCheck(value == 1, null, "DHCPv6: The Length field in type ReconfigureMsgOption must be set to 1, not " + DecToHexFormat(value) + ".");
    byte MsgType where value == 5 || value == 11;
}

// RFC 3315 Reconfigure Accept Option
type ReconfigureAcceptOption
{
    (OptionType where value == 20) OptionCode; // OptionCode = 20
    ushort OptionLen where ValidationCheck(value == 0, null, "DHCPv6: The Length field in type ReconfigureAcceptOption must be set to zero, not " + DecToHexFormat(value) + ".");
}

// RFC 3319 SIP Servers Domain Name List
type SIPServerDomainOption
{
    (ushort where value == 21) OptionCode; // OptionCode = 21
    ushort OptionLen;
    DomainName DomainName;
}

// RFC 3319 SIP Servers IPv6 IPv6Address List
type SIPServerAddrOption
{
    (ushort where value == 22) OptionCode;  // OptionCode = 22
    ushort OptionLen;
    IPv6Address IPAddress;
}

// RFC 3646 DNS Recursive Name Server option 
type DNSServersOption
{
    (ushort where value == 23) OptionCode; // OptionCode = 23
    ushort OptionLen;
    IPv6Address DNSServerAddr with BinaryEncoding{Length = (OptionLen / 16) as uint};
}

// RFC  3646  Domain Search List option
type DomainSearchListOption
{
    (ushort where value == 24) OptionCode; // OptionCode = 24
    ushort OptionLen;
    DomainName DomainName;
}

// RFC 3633 Identity Association for Prefix Delegation Option
type IAPrefixDelegationOption
{
    (ushort where value == 25) OptionCode; // OptionCode = 25
    ushort OptionLen;
    uint T1;
    uint T2;
    binary IAPDOptions with BinaryEncoding{Length =(OptionLen - 12) as uint};
}

// RFC 3633  IA_PD Prefix option
type IAPrefixOption
{
    (ushort where value == 26) OptionCode;  //OptionCode = 26
    ushort OptionLen;
    uint PreferredLifeTime;
    uint ValidLifeTime;
    byte PrefixLen;
    IPv6Address Ipv6Prefix;
}

// RFC 3898 Network Information Service (NIS) Servers Option
type NetworkInformationServerOption
{
    (ushort where value == 27) OptionCode; // OptionCode = 27
    ushort OptionLen;
    IPv6Address DNSServerAddr with BinaryEncoding{Length = (OptionLen / 16) as uint};
}

// RFC 3898 Network Information Service V2 (NIS+) Servers Option
type NetworkInformationServerV2Option
{
    (ushort where value == 28) OptionCode; // OptionCode = 28
    ushort OptionLen;
    IPv6Address DNSServerAddr with BinaryEncoding{Length = (OptionLen / 16) as uint};
}

// RFC 3898 Network Information Service (NIS) Domain Name Option
type NetworkInformationServerDomainNameOption
{
    (ushort where value == 29) OptionCode; // OptionCode = 29
    ushort OptionLen;
    DomainName DomainName;
}
 
// RFC 3898  Network Information Service V2 (NIS+) Domain Name Option
type NetworkInformationServerV2DomainNameOption
{
    (ushort where value == 30) OptionCode; // OptionCode = 30
    ushort OptionLen;
    DomainName DomainName;
}

// RFC 4075 Simple Network Time Protocol (SNTP) Servers Option
type SNTPServerListOption
{
    (ushort where value == 31) OptionCode; // OptionCode = 31
    ushort OptionLen;
    IPv6Address SNTPServerAddr with BinaryEncoding{Length = (OptionLen / 16) as uint};
}

// RFC 4242 Option Format
type OptionFormat
{
    (ushort where value == 32) OptionCode; // OptionCode = 32
    ushort OptionLen where ValidationCheck(value == 4, null, "DHCPv6: The field of Length in type OptionFormat must be set to 4, not " + DecToHexFormat(value) + ".");
    uint InformationRefreshTime;
}

// RFC 4280 Broadcast and Multicast Service Controller Domain Name List Option
type BCMCSControllerDomainNamelist
{
    (ushort where value == 33) OptionCode; // OptionCode = 33
    ushort OptionLen;
    string InformationRefreshTime with BinaryEncoding{TextEncoding = TextEncoding.ASCII};
}

// RFC 4280 Broadcast and Multicast Service Controller Domain Name List Option
type BCMCSControllerIPv6addresslist
{
    (ushort where value == 34) OptionCode; // OptionCode = 34
    ushort OptionLen;
    IPv6Address BCMCSControllerIPv6address;
}

// RFC 4649 The Relay Agent Remote-ID Option
type RelayAgentRemoteIDOption
{
    (ushort where value == 37) OptionCode; // OptionCode = 37
    ushort OptionLen;
    uint EnterpriseNumber;
    string RemoteID with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (OptionLen - 4) as uint};
}

// RFC 4580 The Relay Agent Subscriber-ID Option
type RelayAgentSubscriberIDOption
{
    (ushort where value == 38) OptionCode; // OptionCode = 38
    ushort OptionLen;
    string RemoteID with BinaryEncoding{TextEncoding = TextEncoding.ASCII,Length = OptionLen  as uint};
}
// RFC 4704 The DHCPv6 Client FQDN Option
type ClientFQDN
{
    (ushort where value == 39) OptionCode; // OptionCode = 39
    ushort OptionLen;
    Flags Flags;
    string DomainName with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (OptionLen -1) as uint};
}

// RFC 4704 The Flags Field
type Flags
{
    byte MBZ with BinaryEncoding{Width = 5};
    byte N with BinaryEncoding{Width = 1};
    byte O with BinaryEncoding{Width = 1};
    byte S with BinaryEncoding{Width = 1};
}

// RFC 3315 DUID Based on Link-layer IPv6Address Plus Time [DUID-LLT]
type DUIDLLT
{
    ushort Type where value == 1;
    HardwareTypeEnum HardwareType;
    uint Time;
    (AddressMappingUnicast |MacAddress) LinklayerAddress;
}

// RFC 3315 DUID Assigned by Vendor Based on Enterprise Number [DUID-EN]
type DUIDEN
{
    ushort Type where value == 2;
    uint EnterpriseNumber;
}

// RFC 3315 DUID Based on Link-layer IPv6Address [DUID-LL]
type DUIDLL
{
    ushort Type where value == 3;
    HardwareTypeEnum HardwareType;
    (AddressMappingUnicast |MacAddress) LinklayerAddress;
}

// http://www.iana.org/assignments/arp-parameters/arp-parameters.xml
pattern HardwareTypeEnum = enum ushort
{
    Ethernet = 1,
    Experimental = 2,
    AmateurRadio = 3,
    ProteonProNETTokenRing = 4,
    Chaos = 5,
    IEEE802 = 6,
    ARCNET = 7,
    Hyperchannel = 8,
    Lanstar = 9,
    AutonetShortAddress = 10,
    LocalTalk = 11,
    LocalNet = 12,
    Ultralink = 13,
    SMDS = 14,
    FrameRelay = 15,
    ATM1 = 16,
    HDLC = 17,
    FibreChannel = 18,
    ATM2 = 19,
    SerialLine = 20,
    ATM3 = 21,
    MILSTD188220 = 22,
    Metricom = 23,
    IEEE13941995 = 24,
    MAPOS = 25,
    Twinaxial = 26,
    EUI64 = 27,
    HIPARP = 28,
    IPandARPoverISO = 29,
    ARPSec = 30,
    IPsectunneL = 31,
    Infiniband = 32,
    CAI = 33
};

type DUIDString[ushort OptionLen] 
{
    string DUID with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = OptionLen as uint};
}

// RFC 3315 DUID Contents
type DUIDContents[ushort OptionLen]
{
    (DUIDLLT |
     DUIDEN  |
     DUIDLL  |
     DUIDString[OptionLen]) DUID;
}


// rfc1035 Name space definitions
type DomainName
{
    byte NameLength;
    string DomainName with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = (NameLength + 1) as uint};
}

// MS-DHCPE User Class Option
type DHCPEUserClassOption
{
    (ushort where value == 15) OptionCode; // OptionCode = 15
    ushort OptionLength;
    ushort UserClassDataLength;
    ushort UserClassBinaryDataLength;
    binary UserClassBinaryData with BinaryEncoding{Length = UserClassBinaryDataLength as uint};
    optional [| UserClassBinaryDataLength % 4 != 0 |] array<byte> Padding with BinaryEncoding{Length = 4 - UserClassBinaryDataLength % 4 as uint};
    ushort UserClassNameLength;
    binary UserClassName with BinaryEncoding{Length = UserClassNameLength as uint};
    ushort UserClassDescriptionLength;
    binary UserClassDescription with BinaryEncoding{Length = UserClassDescriptionLength as uint};
}

// MS-DHCPE Vendor Class Option
type DHCPEVendorClass
{
    (ushort where value == 16) OptionCode; // OptionCode = 16
    (ushort where value == 14) OptionLength;
    (uint where value == 311) EnterpriseNumber;
    ushort VendorClassDataLength where ValidationCheckValue(value == 0x0008, null, true, ReferenceType.Type, "DHCPv6", "Vendor_Class_Data_Length", "DHCPEVendorClass", 0x0008, value);
    string VendorClassDataString where ValidationCheckValue(value == "MSFT 5.0", null, true, ReferenceType.Type, "DHCPv6", "Vendor_Class_Data_String", "DHCPEVendorClass", "\"MSFT 5.0\"", value) with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = VendorClassDataLength as uint};
}

// MS-DHCPE Vendor Specific Information Option
type DHCPEVendorSpecificInfoOption
{
    (ushort where value == 17) OptionCode; // OptionCode = 16
    ushort OptionLength;
    (uint where value == 311) EnterpriseNumber;
    (DHCPERogueDectionRequest | DHCPERogueDectionReply) VendorSpecificOption;
}

// MS-DHCPE Vendor-Specific Option - Rogue Detection Request Option
type DHCPERogueDectionRequest
{
    (ushort where value == 94) VendorSpecificOptionCode;
    ushort VendorSpecificOptionLength where ValidationCheckValue(value == 0, null, true, ReferenceType.Type, "DHCPv6", "VendorSpecificOptionLength", "DHCPERogueDectionRequest", "0x00", value);
}

// MS-DHCPE Vendor-Specific Option - Rogue Detection Reply Option
type DHCPERogueDectionReply
{
    (ushort where value == 95) VendorSpecificOptionCode;
    ushort VendorSpecificOptionLength;
    string VendorSpecificOptionData with BinaryEncoding{TextEncoding = TextEncoding.ASCII, Length = VendorSpecificOptionLength as uint};
}
